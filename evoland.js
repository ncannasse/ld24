// Generated by Haxe 4.1.0-rc.1+9ba2f8b9a
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ChestKind = $hxEnums["ChestKind"] = { __ename__ : "ChestKind", __constructs__ : ["CLeftCtrl","C2D","CScroll","CColor","CMonsters","CWeapon","CZoom","CAllowSave","CWeb","CNpc","CGoldCoin","CKey","CFreeMove","CDiablo","CExit","CPorn","CSounds","CMusic","CTitleScreen","CRightCtrl","CPushBlock","CDungeon","CDungeonKills","CPuzzle","CLevelUp","CFarming","CPrincess"]
	,CLeftCtrl: {_hx_index:0,__enum__:"ChestKind",toString:$estr}
	,C2D: {_hx_index:1,__enum__:"ChestKind",toString:$estr}
	,CScroll: {_hx_index:2,__enum__:"ChestKind",toString:$estr}
	,CColor: {_hx_index:3,__enum__:"ChestKind",toString:$estr}
	,CMonsters: {_hx_index:4,__enum__:"ChestKind",toString:$estr}
	,CWeapon: {_hx_index:5,__enum__:"ChestKind",toString:$estr}
	,CZoom: {_hx_index:6,__enum__:"ChestKind",toString:$estr}
	,CAllowSave: {_hx_index:7,__enum__:"ChestKind",toString:$estr}
	,CWeb: {_hx_index:8,__enum__:"ChestKind",toString:$estr}
	,CNpc: {_hx_index:9,__enum__:"ChestKind",toString:$estr}
	,CGoldCoin: {_hx_index:10,__enum__:"ChestKind",toString:$estr}
	,CKey: {_hx_index:11,__enum__:"ChestKind",toString:$estr}
	,CFreeMove: {_hx_index:12,__enum__:"ChestKind",toString:$estr}
	,CDiablo: {_hx_index:13,__enum__:"ChestKind",toString:$estr}
	,CExit: {_hx_index:14,__enum__:"ChestKind",toString:$estr}
	,CPorn: {_hx_index:15,__enum__:"ChestKind",toString:$estr}
	,CSounds: {_hx_index:16,__enum__:"ChestKind",toString:$estr}
	,CMusic: {_hx_index:17,__enum__:"ChestKind",toString:$estr}
	,CTitleScreen: {_hx_index:18,__enum__:"ChestKind",toString:$estr}
	,CRightCtrl: {_hx_index:19,__enum__:"ChestKind",toString:$estr}
	,CPushBlock: {_hx_index:20,__enum__:"ChestKind",toString:$estr}
	,CDungeon: {_hx_index:21,__enum__:"ChestKind",toString:$estr}
	,CDungeonKills: {_hx_index:22,__enum__:"ChestKind",toString:$estr}
	,CPuzzle: {_hx_index:23,__enum__:"ChestKind",toString:$estr}
	,CLevelUp: {_hx_index:24,__enum__:"ChestKind",toString:$estr}
	,CFarming: {_hx_index:25,__enum__:"ChestKind",toString:$estr}
	,CPrincess: {_hx_index:26,__enum__:"ChestKind",toString:$estr}
};
ChestKind.__empty_constructs__ = [ChestKind.CLeftCtrl,ChestKind.C2D,ChestKind.CScroll,ChestKind.CColor,ChestKind.CMonsters,ChestKind.CWeapon,ChestKind.CZoom,ChestKind.CAllowSave,ChestKind.CWeb,ChestKind.CNpc,ChestKind.CGoldCoin,ChestKind.CKey,ChestKind.CFreeMove,ChestKind.CDiablo,ChestKind.CExit,ChestKind.CPorn,ChestKind.CSounds,ChestKind.CMusic,ChestKind.CTitleScreen,ChestKind.CRightCtrl,ChestKind.CPushBlock,ChestKind.CDungeon,ChestKind.CDungeonKills,ChestKind.CPuzzle,ChestKind.CLevelUp,ChestKind.CFarming,ChestKind.CPrincess];
var Chests = function() { };
$hxClasses["Chests"] = Chests;
Chests.__name__ = "Chests";
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,__class__: EReg
};
var EKind = $hxEnums["EKind"] = { __ename__ : "EKind", __constructs__ : ["NPC","Chest","Monster","Sword","SavePoint","Cursor","Hero","HeroUp","Bat","Knight","Fireball"]
	,NPC: {_hx_index:0,__enum__:"EKind",toString:$estr}
	,Chest: {_hx_index:1,__enum__:"EKind",toString:$estr}
	,Monster: {_hx_index:2,__enum__:"EKind",toString:$estr}
	,Sword: {_hx_index:3,__enum__:"EKind",toString:$estr}
	,SavePoint: {_hx_index:4,__enum__:"EKind",toString:$estr}
	,Cursor: {_hx_index:5,__enum__:"EKind",toString:$estr}
	,Hero: {_hx_index:6,__enum__:"EKind",toString:$estr}
	,HeroUp: {_hx_index:7,__enum__:"EKind",toString:$estr}
	,Bat: {_hx_index:8,__enum__:"EKind",toString:$estr}
	,Knight: {_hx_index:9,__enum__:"EKind",toString:$estr}
	,Fireball: {_hx_index:10,__enum__:"EKind",toString:$estr}
};
EKind.__empty_constructs__ = [EKind.NPC,EKind.Chest,EKind.Monster,EKind.Sword,EKind.SavePoint,EKind.Cursor,EKind.Hero,EKind.HeroUp,EKind.Bat,EKind.Knight,EKind.Fireball];
var Entity = function(kind,x,y) {
	this.kind = kind;
	this.x = this.ix = x;
	this.y = this.iy = y;
	this.speed = 0.1;
	this.frame = Std.random(1000);
	this.animSpeed = 0.3;
	this.bounds = { x : 4, w : 8, y : 8, h : 8};
	this.mc = new h2d_Object();
	this.bmp = new h2d_Bitmap();
	this.game = Game.inst;
	switch(kind._hx_index) {
	case 0:
		this.animSpeed = 0;
		this.frame = 0;
		if(this.iy == 31 && this.ix == 59) {
			this.frame = 1;
		}
		break;
	case 1:
		this.shade = new h2d_Graphics();
		this.shade.beginFill(0,0.1);
		this.shade.drawRect(2,12,11,6);
		this.game.dm.addChildAt(this.shade,1);
		break;
	case 4:
		break;
	default:
		this.shade = new h2d_Graphics();
		this.shade.beginFill(0,0.1);
		this.shade.drawEllipse(7,14,6,4);
		this.game.dm.addChildAt(this.shade,1);
	}
	this.mc.addChild(this.bmp);
	this.game.dm.addChildAt(this.mc,3);
};
$hxClasses["Entity"] = Entity;
Entity.__name__ = "Entity";
Entity.prototype = {
	endMove: function() {
	}
	,teleport: function(tx,ty) {
		this.x = this.ix = tx;
		this.y = this.iy = ty;
	}
	,explode: function(p) {
		if(p == null) {
			p = 100;
		}
		Part.explode(this.bmp.tile,this.mc.x | 0,this.mc.y | 0,p);
	}
	,updatePos: function(dt) {
		if(this.target == null) {
			return;
		}
		var dx = this.target.x - this.x;
		var dy = this.target.y - this.y;
		var speed = this.speed * dt;
		if(dx != 0) {
			if(Math.abs(dx) <= speed) {
				this.x = this.target.x;
			} else if(dx > 0) {
				this.x += speed;
			} else {
				this.x -= speed;
			}
		}
		if(dy != 0) {
			if(Math.abs(dy) <= speed) {
				this.y = this.target.y;
			} else if(dy > 0) {
				this.y += speed;
			} else {
				this.y -= speed;
			}
		}
		if(this.x == this.target.x && this.y == this.target.y) {
			this.ix = this.x | 0;
			this.iy = this.y | 0;
			this.endMove();
			this.target = null;
		}
	}
	,remove: function() {
		if(this.mc != null) {
			this.mc.parent.removeChild(this.mc);
		}
		if(this.shade != null) {
			this.shade.parent.removeChild(this.shade);
		}
	}
	,update: function(dt) {
		this.updatePos(dt);
		var _this = this.mc;
		_this.posChanged = true;
		_this.x = this.x * 16 | 0;
		var _this1 = this.mc;
		_this1.posChanged = true;
		_this1.y = (this.y * 16 | 0) - 2;
		if(this.shade != null) {
			var _this2 = this.shade;
			_this2.posChanged = true;
			_this2.x = this.mc.x + 0.5;
			var _this3 = this.shade;
			_this3.posChanged = true;
			_this3.y = this.mc.y + 0.5;
		}
		if(this.frame >= 0) {
			var sl = this.game.spriteFrames[this.kind._hx_index];
			this.frame += this.animSpeed * (hxd_Timer.dt * hxd_Timer.wantedFPS);
			this.iframe = (this.frame | 0) % sl.length;
			this.bmp.tile = sl[this.iframe];
			if(sl.length == 0) {
				this.frame = -1;
			}
		}
	}
	,__class__: Entity
};
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw new js__$Boot_HaxeError(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,getParamFloatValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstants: function(globals) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw new js__$Boot_HaxeError("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_ScreenShader
});
var BitmaskShader = function() {
	this.delta__ = 0;
	this.mask__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["BitmaskShader"] = BitmaskShader;
BitmaskShader.__name__ = "BitmaskShader";
BitmaskShader.__super__ = h3d_shader_ScreenShader;
BitmaskShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mask__;
		case 3:
			return this.delta__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 3:
			return this.delta__;
		default:
		}
		return 0.;
	}
	,__class__: BitmaskShader
});
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,dispose: function() {
		this.engine.onResized = hxd_App.staticHandler;
		this.engine.onContextLost = hxd_App.staticHandler;
		this.isDisposed = true;
		this.s2d.dispose();
		this.s3d.dispose();
		this.sevents.dispose();
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		this.s2d.setElapsedTime(dt);
		this.s3d.setElapsedTime(dt);
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var hxd_Pad = function() {
	this.rawYAxis = 0.;
	this.rawXAxis = 0.;
	this.prevButtons = [];
	this.values = [];
	this.buttons = [];
	this.axisDeadZone = 0.1;
	this.config = hxd_Pad.DEFAULT_CONFIG;
	this.index = -1;
	this.connected = true;
};
$hxClasses["hxd.Pad"] = hxd_Pad;
hxd_Pad.__name__ = "hxd.Pad";
hxd_Pad.pickConfig = function(name) {
	switch(name) {
	case "054c-05c4-Wireless Controller":case "054c-09cc-Wireless Controller":
		return hxd_Pad.CONFIG_JS_DS4_FF;
	case "Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 05c4)":case "Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 09cc)":
		return hxd_Pad.CONFIG_JS_DS4;
	default:
		return hxd_Pad.CONFIG_JS_STD;
	}
};
hxd_Pad.createDummy = function() {
	var p = new hxd_Pad();
	p.connected = false;
	return p;
};
hxd_Pad.wait = function(onPad) {
	hxd_Pad.waitPad = onPad;
	if(!hxd_Pad.initDone) {
		hxd_Pad.initDone = true;
		window.addEventListener("gamepadconnected",function(p) {
			var pad = new hxd_Pad();
			pad.d = p.gamepad;
			pad.config = hxd_Pad.pickConfig(pad.d.id);
			pad.index = pad.d.index;
			hxd_Pad.pads.h[pad.d.index] = pad;
			hxd_Pad.waitPad(pad);
		});
		window.addEventListener("gamepaddisconnected",function(p1) {
			var pad1 = hxd_Pad.pads.h[p1.gamepad.index];
			if(pad1 == null) {
				return;
			}
			hxd_Pad.pads.remove(p1.gamepad.index);
			pad1.connected = false;
			pad1.onDisconnect();
		});
		haxe_MainLoop.add(hxd_Pad.syncPads);
	}
};
hxd_Pad.syncPads = function() {
	var freshPads = [];
	try {
		freshPads = window.navigator.getGamepads();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	if(freshPads.length > 0) {
		var _g = 0;
		var _g1 = freshPads.length;
		while(_g < _g1) {
			var i = _g++;
			if(hxd_Pad.pads.h[i] != null) {
				hxd_Pad.pads.h[i].d = freshPads[i];
			}
		}
	}
	var p = hxd_Pad.pads.iterator();
	while(p.hasNext()) {
		var p1 = p.next();
		var _g11 = 0;
		var _g2 = p1.d.buttons.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			p1.prevButtons[i1] = p1.buttons[i1];
			p1.buttons[i1] = p1.d.buttons[i1].pressed;
			p1.values[i1] = p1.d.buttons[i1].value;
		}
		var _g3 = 0;
		var _g4 = p1.d.axes.length >> 1;
		while(_g3 < _g4) {
			var i2 = _g3++;
			var x = p1.d.axes[i2 << 1];
			var y = p1.d.axes[(i2 << 1) + 1];
			p1.values[(i2 << 1) + p1.d.buttons.length] = x;
			p1.values[(i2 << 1) + p1.d.buttons.length + 1] = -y;
			if(i2 == 0) {
				p1.rawXAxis = x;
				p1.rawYAxis = y;
			}
		}
	}
};
hxd_Pad.prototype = {
	get_xAxis: function() {
		var f = this.rawXAxis;
		if((f < 0 ? -f : f) < this.axisDeadZone) {
			return 0.;
		}
		return this.rawXAxis;
	}
	,get_yAxis: function() {
		var f = this.rawYAxis;
		if((f < 0 ? -f : f) < this.axisDeadZone) {
			return 0.;
		}
		return this.rawYAxis;
	}
	,onDisconnect: function() {
	}
	,isPressed: function(button) {
		if(this.buttons[button]) {
			return !this.prevButtons[button];
		} else {
			return false;
		}
	}
	,__class__: hxd_Pad
};
var Game = function() {
	hxd_App.call(this);
};
$hxClasses["Game"] = Game;
Game.__name__ = "Game";
Game.makeField = function(text,size) {
	var tf = new h2d_HtmlText(hxd_Res.load("fonts/font" + size + ".fnt").to(hxd_res_BitmapFont).toFont());
	if(size == 18) {
		var _g = tf;
		_g.set_letterSpacing(_g.letterSpacing - 1);
	}
	tf.set_text(text);
	return tf;
};
Game.copy = function(v) {
	return haxe_Unserializer.run(haxe_Serializer.run(v));
};
Game.startGame = function(load) {
	Game.props = Game.copy(Game.DEF_PROPS);
	if(load) {
		Game.props = hxd_Save.load(Game.props,"evo2");
	}
	Game.has.monsters = false;
	Game.has.npc = false;
	Game.has.savePoints = false;
	Game.inst = new Game();
};
Game.main = function() {
	hxd_Res.set_loader(new hxd_res_Loader(new hxd_fs_EmbedFileSystem(haxe_Unserializer.run("oy9:world.pngty10:props.jsonty9:music.oggty9:title.pngty11:sprites.pngty13:pubBanner.pngty12:p0Banner.pngty11:dungeon.pngty3:sfxoy12:gameover.wavty8:open.wavty9:chest.wavty8:save.wavty13:music1.sunvoxty10:puzzle.wavty8:kill.wavty8:menu.wavty7:npc.wavty8:walk.wavty11:firehit.wavty9:sword.wavty11:levelup.wavty7:hit.wavty12:fireball.wavty12:princess.wavtgy10:title2.pngty9:tiles.pngty10:title3.pngty5:fontsoy12:04B_03__.TTFty10:font12.pngty10:font18.fntty10:font12.fntty10:fonts.jsonty10:font18.pngtgg"))));
	hxd_Pad.wait(function(p) {
		Game.pad = p;
	});
	hxd_Timer.wantedFPS = 40;
	new Title();
};
Game.__super__ = hxd_App;
Game.prototype = $extend(hxd_App.prototype,{
	init: function() {
		this.monsters = [];
		this.entities = [];
		this.barsDelta = 0.;
		this.spriteFrames = h2d_Tile.autoCut(hxd_Res.get_loader().loadCache("sprites.png",hxd_res_Image).toBitmap(),16,16).tiles;
		this.world = new World(hxd_Res.get_loader().loadCache("world.png",hxd_res_Image).getPixels());
		this.realWorld = this.world;
		var _g = 0;
		var _g1 = Game.props.rem;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			this.world.removed[r % 98][r / 98 | 0] = true;
		}
		this.world.draw();
		this.scroll = { x : (Game.props.pos.x + 0.5) * 16, y : (Game.props.pos.y + 0.5) * 16, mc : new h2d_Object(), curZ : Game.props.zoom, tz : 1.};
		var _this = this.scroll.mc;
		_this.posChanged = true;
		_this.x = -1000;
		this.scroll.mc.addChild(this.world.root);
		this.dm = new h2d_Layers(this.scroll.mc);
		this.s2d.addChild(this.scroll.mc);
		this.initPixelFilter(Game.props.zoom);
		var hchests_h = { };
		var _g2 = 0;
		var _g3 = Game.props.chests;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			hchests_h[c] = true;
		}
		var _g4 = 0;
		var _g5 = this.world.chests;
		while(_g4 < _g5.length) {
			var c1 = _g5[_g4];
			++_g4;
			if(!hchests_h.hasOwnProperty(c1.x + c1.y * 98)) {
				c1.e = new Entity(EKind.Chest,c1.x,c1.y);
				c1.e.update(0);
			}
		}
		this.hero = new Hero(Game.props.pos.x,Game.props.pos.y);
		if(Game.props.dungeon) {
			this.initDungeon(true);
		}
		if(Game.props.chests.length == 0) {
			this.getChest(ChestKind.CRightCtrl,0,0);
		}
		if(Game.props.music) {
			hxd_Res.get_loader().loadCache("music.ogg",hxd_res_Sound).play(true).set_position(2);
		}
		this.updateUI();
		this.updateWeb();
	}
	,updateUI: function() {
		if(this.uiBar == null) {
			this.uiBar = new h2d_Graphics();
			var _this = this.uiBar;
			_this.posChanged = true;
			_this.x = 5;
			var _this1 = this.uiBar;
			_this1.posChanged = true;
			_this1.y = 5;
			this.s2d.addChild(this.uiBar);
			var _this2 = this.uiBar;
			var _this3 = this.uiBar;
			_this3.posChanged = true;
			_this2.posChanged = true;
			_this2.scaleX = _this3.scaleY = 2;
		}
		var border = 15790320;
		var bg = 6316128;
		var g = this.uiBar;
		g.clear();
		if(Game.props.life > 0) {
			g.beginFill(border);
			g.drawRect(0,0,104,8);
			g.beginFill(bg);
			g.drawRect(2,2,100,4);
			g.beginFill(12582912);
			g.drawRect(2,2,Game.props.life * 2,4);
		}
		if(Game.props.xp >= 0) {
			g.beginFill(border);
			g.drawRect(0,12,104,8);
			g.beginFill(bg);
			g.drawRect(2,14,100,4);
			g.beginFill(49152);
			g.drawRect(2,14,Game.props.xp,4);
		}
	}
	,initDungeon: function(v) {
		Game.props.dungeon = v;
		var _g = 0;
		var _g1 = this.world.chests;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.e != null) {
				c.e.remove();
				c.e = null;
			}
		}
		this.scroll.mc.removeChild(this.world.root);
		if(v) {
			this.world = new World(hxd_Res.get_loader().loadCache("dungeon.png",hxd_res_Image).getPixels());
			var _g2 = 0;
			var _g3 = Game.props.rem;
			while(_g2 < _g3.length) {
				var r = _g3[_g2];
				++_g2;
				var y = r / 98 | 0;
				if(y >= 98) {
					this.world.removed[r % 98][y - 98] = true;
				}
			}
		} else {
			this.world = this.realWorld;
		}
		this.scroll.mc.addChildAt(this.world.root,0);
		var hchests_h = { };
		var _g21 = 0;
		var _g31 = Game.props.chests;
		while(_g21 < _g31.length) {
			var c1 = _g31[_g21];
			++_g21;
			hchests_h[c1] = true;
		}
		var _g4 = 0;
		var _g5 = this.world.chests;
		while(_g4 < _g5.length) {
			var c2 = _g5[_g4];
			++_g4;
			if(!hchests_h.hasOwnProperty(c2.x + (c2.y + (v ? 98 : 0)) * 98)) {
				c2.e = new Entity(EKind.Chest,c2.x,c2.y);
				c2.e.update(0);
			}
		}
		var _g6 = 0;
		var _g7 = this.entities;
		while(_g6 < _g7.length) {
			var e = _g7[_g6];
			++_g6;
			e.remove();
		}
		var _g8 = 0;
		var _g9 = this.monsters;
		while(_g8 < _g9.length) {
			var m = _g9[_g8];
			++_g8;
			m.remove();
		}
		this.entities = [];
		this.monsters = [];
		Game.has.monsters = false;
		Game.has.npc = false;
		Game.has.savePoints = false;
		this.world.draw();
		this.scroll.x = this.hero.ix;
		this.scroll.y = this.hero.iy;
	}
	,save: function() {
		Game.props.pos.x = this.hero.ix;
		Game.props.pos.y = this.hero.iy;
		if(!hxd_Save.save(Game.props,"evo2")) {
			return;
		}
		Sounds.play("save");
		this.popup("Game <font color='#00ff00'>Saved</font>","You are safe !");
	}
	,js: function(s) {
		haxe_Log.trace(s,{ fileName : "src/Game.hx", lineNumber : 230, className : "Game", methodName : "js"});
		eval(s);
	}
	,popup: function(text,subText,dialog) {
		if(dialog == null) {
			dialog = false;
		}
		if(subText == null) {
			subText = "";
		}
		var mc = new Popup();
		mc.dialog = dialog;
		mc.addChild(this.makePanel(text,subText));
		mc.posChanged = true;
		mc.y = this.s2d.height;
		var tmp = this.s2d.height;
		var _this = mc.getBounds();
		mc.targetY = tmp - (_this.yMax - _this.yMin | 0) + 2;
		this.s2d.addChild(mc);
	}
	,makePanel: function(text,subText) {
		var mc = new h2d_Graphics();
		mc.beginFill(0);
		mc.drawRect(0,0,this.s2d.width,40);
		var tf = Game.makeField(text,18);
		tf.posChanged = true;
		tf.x = 4;
		tf.posChanged = true;
		tf.y = 1;
		mc.addChild(tf);
		var tf1 = Game.makeField(subText,12);
		tf1.posChanged = true;
		tf1.x = 6;
		tf1.posChanged = true;
		tf1.y = 23;
		mc.addChild(tf1);
		return mc;
	}
	,initPixelFilter: function(k) {
		if(this.pixelFilter == null) {
			this.pixelFilter = new h2d_Bitmap(h2d_Tile.fromTexture(new h3d_mat_Texture(this.s2d.width,this.s2d.height)),this.s2d);
		}
		var p = hxd_Pixels.alloc(this.s2d.width,this.s2d.height,hxd_PixelFormat.RGBA);
		var _g = 0;
		var _g1 = this.s2d.width / k | 0;
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g11 = this.s2d.height / k | 0;
			while(_g2 < _g11) {
				var y = _g2++;
				var x1 = x * k;
				var y1 = y * k;
				p.setPixel(x1,y1,1073741824);
				var _g3 = 1;
				var _g12 = k;
				while(_g3 < _g12) {
					var i = _g3++;
					p.setPixel(x1 + i,y1,536870912);
					p.setPixel(x1,y1 + i,536870912);
				}
			}
		}
		this.pixelFilter.tile.innerTex.uploadPixels(p);
	}
	,doShake: function() {
		this.shake = { time : 10, power : 3};
	}
	,getChest: function(k,x,y) {
		this.doShake();
		var sound = "chest";
		Game.props.chests.push((y + (Game.props.dungeon ? 98 : 0)) * 98 + x);
		var extra = "";
		var index = null;
		switch(k._hx_index) {
		case 0:
			Game.props.left = true;
			break;
		case 1:
			Game.props.bars = false;
			break;
		case 2:
			index = Game.props.scroll;
			Game.props.scroll++;
			break;
		case 3:
			index = Game.props.color;
			Game.props.color++;
			break;
		case 4:
			index = Game.props.monsters;
			Game.props.monsters++;
			break;
		case 5:
			index = Game.props.weapons;
			Game.props.weapons++;
			break;
		case 6:
			this.shake = null;
			index = 4 - Game.props.zoom;
			Game.props.zoom--;
			break;
		case 7:
			Game.props.canSave = true;
			break;
		case 8:
			index = Game.props.web;
			Game.props.web++;
			this.updateWeb();
			break;
		case 9:
			index = Game.props.npc;
			Game.props.npc++;
			break;
		case 10:
			Game.props.gold++;
			break;
		case 11:
			Game.props.keys++;
			break;
		case 12:
			Game.props.freeMove = true;
			break;
		case 13:
			Game.props.life = 50;
			Game.props.xp = 0;
			this.updateUI();
			break;
		case 14:
			break;
		case 15:
			Game.props.porn = true;
			this.updateWeb();
			break;
		case 16:
			Game.props.sounds = true;
			break;
		case 17:
			Game.props.music = true;
			hxd_Res.get_loader().loadCache("music.ogg",hxd_res_Sound).play(true);
			break;
		case 18:case 19:
			break;
		case 20:
			break;
		case 21:
			this.hero.teleport(26,57);
			this.initDungeon(true);
			break;
		case 22:
			this.world.remove(26,23);
			break;
		case 23:
			Game.props.puzzle = true;
			this.world.remove(42,45);
			break;
		case 24:
			sound = "levelup";
			Game.props.xp = 0;
			Game.props.level++;
			if(Game.props.level == 10) {
				k = ChestKind.CFarming;
				Game.props.xp = -1;
				var _g = 0;
				var _g1 = this.monsters.slice();
				while(_g < _g1.length) {
					var m = _g1[_g];
					++_g;
					if(m.generated) {
						m.kill();
					}
				}
				this.world.remove(55,14);
			} else {
				extra = "<font color='#00ff00'>" + Game.props.level + "</font> / 10";
			}
			this.updateUI();
			break;
		case 25:
			break;
		case 26:
			this.win();
			break;
		}
		Sounds.play(sound);
		var t = Chests.t[k._hx_index];
		if(t == null) {
			throw new js__$Boot_HaxeError("Missing text for " + Std.string(k) + " (" + k._hx_index + ")");
		}
		if(index != null) {
			t = t[index];
		}
		if(t == null) {
			t = { name : "???", sub : ""};
		}
		this.popup("You got <font color='#ff0000'>" + Std.string(t.name) + "</font>",Std.string(t.sub) + extra);
	}
	,win: function() {
		this.hero.lock = true;
		this.circleSize = 300.;
		this.mask = new h2d_Graphics(this.s2d);
		var _this = this.mask;
		_this.posChanged = true;
		_this.x = this.s2d.width * 0.5;
		var _this1 = this.mask;
		_this1.posChanged = true;
		_this1.y = this.s2d.height * 0.5;
		this.s2d.under(this.mask);
		this.update(0);
	}
	,gameOver: function() {
		if(this.hero.lock) {
			return;
		}
		this.hero.lock = true;
		this.hero.target = null;
		this.hero.moving = false;
		this.hero.explode();
		this.hero.remove();
		Sounds.play("gameOver");
		var mc = this.makePanel("Game <font color='#ff0000'>Over</font> !","Press Esc to return to title screen");
		var x = this.s2d.height;
		var _this = mc.getBounds();
		mc.posChanged = true;
		mc.y = (x - (_this.yMax - _this.yMin)) * 0.5 | 0;
		this.s2d.addChild(mc);
	}
	,updateWeb: function() {
		var parts = ["banner","author","social"];
		var _g = 0;
		var _g1 = parts.length;
		while(_g < _g1) {
			var i = _g++;
			this.js("show('" + parts[i] + "'," + Std.string(i < Game.props.web) + ")");
		}
		if(Game.props.porn) {
			this.js("show('p0banner',true)");
		}
	}
	,update: function(_) {
		if(this.hero == null) {
			return;
		}
		switch(Game.props.scroll) {
		case 0:
			break;
		case 1:
			this.scroll.x = (this.hero.x | 0) * 16;
			this.scroll.y = (this.hero.y | 0) * 16;
			break;
		case 2:
			this.scroll.x = this.hero.x * 16 | 0;
			this.scroll.y = this.hero.y * 16 | 0;
			break;
		default:
		}
		var dt = hxd_Timer.dt * hxd_Timer.wantedFPS;
		if(this.circleSize > 200) {
			this.circleSize -= dt;
			this.mask.clear();
			this.mask.beginFill(0,0.5);
			this.mask.drawCircle(0,0,this.circleSize);
			if(this.circleSize <= 200) {
				var letters = "Congratulations !".split("");
				var colors = ["FF0000","00FF00","FFFFFF","FFFF00","FF00FF","00FFFF"];
				var c = -1;
				var _g1 = 0;
				var _g2 = letters.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var col;
					while(true) {
						col = Std.random(colors.length);
						if(!(col == c)) {
							break;
						}
					}
					c = col;
					letters[i] = "<font color='#" + colors[c] + "'>" + letters[i] + "</font>";
				}
				var p = this.makePanel(letters.join(""),"You completed the game !");
				p.posChanged = true;
				p.y = 0;
				this.s2d.addChild(p);
				var dun = new World(hxd_Res.get_loader().loadCache("dungeon.png",hxd_res_Image).getPixels());
				var gold = 0;
				var total = 0;
				var _g3 = 0;
				var _g4 = this.world.chests.concat(dun.chests);
				while(_g3 < _g4.length) {
					var c1 = _g4[_g3];
					++_g3;
					if(c1.id._hx_index == 10) {
						++gold;
					}
					++total;
				}
				var p1 = this.makePanel("You found " + (Game.props.gold + 1) + "/" + gold + " Gold Coins","And opened " + (Game.props.nchests + "/" + total) + " chests");
				p1.posChanged = true;
				p1.y = 370;
				this.s2d.addChild(p1);
			}
		}
		var tz = this.scroll.tz * Game.props.zoom;
		var zooming = true;
		this.scroll.curZ = this.scroll.curZ * 0.8 + tz * 0.2;
		if(Math.abs(this.scroll.curZ - tz) < 0.1) {
			zooming = false;
			this.scroll.curZ = tz;
		}
		var z = this.scroll.curZ;
		var tx = this.scroll.x - this.s2d.width / z * 0.5;
		var ty = this.scroll.y - this.s2d.height / z * 0.5;
		var sx = tx * z | 0;
		var sy = ty * z | 0;
		if(!zooming) {
			sx -= sx % Game.props.zoom;
			sy -= sy % Game.props.zoom;
		}
		var _this = this.scroll.mc;
		_this.posChanged = true;
		_this.x = -sx;
		var _this1 = this.scroll.mc;
		_this1.posChanged = true;
		_this1.y = -sy;
		var _this2 = this.scroll.mc;
		var _this3 = this.scroll.mc;
		_this3.posChanged = true;
		_this2.posChanged = true;
		_this2.scaleX = _this3.scaleY = z;
		this.hero.update(dt);
		Popup.updateAll(dt);
		Part.updateAll(dt);
		if(this.hero.target == null && !this.hero.lock) {
			var _g11 = 0;
			var _g21 = this.world.chests;
			while(_g11 < _g21.length) {
				var c2 = _g21[_g11];
				++_g11;
				if(c2.e != null && c2.x == this.hero.ix && c2.y == this.hero.iy) {
					c2.e.remove();
					c2.e = null;
					Game.props.nchests++;
					this.getChest(c2.id,c2.x,c2.y);
				}
			}
			this.hero.moving = false;
			Game.pad.axisDeadZone = 0.5;
			var mx = Game.pad.get_xAxis();
			var my = Game.pad.get_yAxis();
			if(mx < 0 && !Game.props.left) {
				mx = 0;
			}
			if(my != 0 && Game.props.bars) {
				my = 0;
			}
			if((hxd_Key.isDown(38) || hxd_Key.isDown(90) || hxd_Key.isDown(87)) && !Game.props.bars) {
				my = -1;
			}
			if(this.hero.target == null && (hxd_Key.isDown(40) || hxd_Key.isDown(83)) && !Game.props.bars) {
				my = 1;
			}
			if(this.hero.target == null && (hxd_Key.isDown(37) || hxd_Key.isDown(81) || hxd_Key.isDown(65)) && Game.props.left) {
				mx = -1;
			}
			if(this.hero.target == null && hxd_Key.isDown(39) || hxd_Key.isDown(68)) {
				mx = 1;
			}
			if(mx != 0 || my != 0) {
				var m = Math.sqrt(mx * mx + my * my);
				if(m > 1) {
					mx /= m;
					my /= m;
				}
				this.hero.move(mx,my,dt);
			}
		}
		var cfg = hxd_Pad.DEFAULT_CONFIG;
		if(this.hero.sword == null && !this.hero.lock) {
			if((hxd_Key.isDown(32) || hxd_Key.isDown(13) || hxd_Key.isDown(69) || Game.pad.isPressed(cfg.X) || Game.pad.isPressed(cfg.A)) && Game.props.weapons > 0) {
				this.hero.attack();
			}
		}
		if(hxd_Key.isPressed(27) || Game.pad.isPressed(cfg.start) && this.hero.lock) {
			if(!this.hero.lock) {
				this.gameOver();
			} else {
				this.dispose();
				new Title();
				return;
			}
		}
		if(hxd_Key.isPressed(83) && hxd_Key.isDown(17)) {
			this.save();
		}
		if(Game.props.monsters > 0) {
			if(!Game.has.monsters) {
				Game.has.monsters = true;
				var _g12 = 0;
				var _g22 = this.world.monsters;
				while(_g12 < _g22.length) {
					var m1 = _g22[_g12];
					++_g12;
					this.monsters.push(new Monster(m1.id,m1.x,m1.y));
				}
				this.generators = [];
				var _g31 = 0;
				var _g41 = this.world.getPos(Block.MonsterGenerator);
				while(_g31 < _g41.length) {
					var w = _g41[_g31];
					++_g31;
					this.generators.push({ x : w.x, y : w.y, time : 0.});
				}
			}
			var _g13 = 0;
			var _g23 = this.monsters;
			while(_g13 < _g23.length) {
				var m2 = _g23[_g13];
				++_g13;
				m2.update(dt);
				var dx = m2.x - this.hero.x;
				var dy = m2.y - this.hero.y;
				var d = Math.sqrt(dx * dx + dy * dy);
				if(d < 0.64 && m2.deathHit() && this.hero.hitRecover <= 0) {
					Game.props.life--;
					this.updateUI();
					if(Game.props.life <= 0) {
						this.gameOver();
					} else {
						this.hero.hitRecover = 30;
						Sounds.play("hit");
					}
				}
			}
		}
		if(Game.props.canSave && !Game.has.savePoints) {
			Game.has.savePoints = true;
			var _g14 = 0;
			var _g24 = this.world.getPos(Block.SavePoint);
			while(_g14 < _g24.length) {
				var p2 = _g24[_g14];
				++_g14;
				var e = new Entity(EKind.SavePoint,p2.x,p2.y);
				e.mc.alpha = 0.3;
				e.y += 0.1875;
				this.entities.push(e);
			}
		}
		if(Game.props.npc > 0 && !Game.has.npc) {
			Game.has.npc = true;
			var _g15 = 0;
			var _g25 = this.world.npcs;
			while(_g15 < _g25.length) {
				var n = _g25[_g15];
				++_g15;
				var e1 = new Entity(EKind.NPC,n.x,n.y);
				n.e = e1;
				this.entities.push(n.e);
				this.world.t[n.x][n.y] = Block.Lock;
			}
		}
		var _g16 = 0;
		var _g26 = this.entities;
		while(_g16 < _g26.length) {
			var e2 = _g26[_g16];
			++_g16;
			e2.update(dt);
		}
		var old = this.curColor;
		var pixelAlpha = 1.0;
		switch(Game.props.color) {
		case 0:
			this.curColor = { delta : 64, mask : 192, alpha : 1., rgb : 1., k : Game.props.color};
			break;
		case 1:
			this.curColor = { delta : 48, mask : 128, alpha : 1., rgb : 0., k : Game.props.color};
			break;
		case 2:
			this.curColor = { delta : 16, mask : 192, alpha : .5, rgb : 0., k : Game.props.color};
			break;
		case 3:
			this.curColor = { delta : 40, mask : 224, alpha : .25, rgb : 0., k : Game.props.color};
			break;
		default:
			this.curColor = { delta : 0, mask : 255, alpha : 0., rgb : 0., k : Game.props.color};
		}
		this.curColor = old == null ? this.curColor : { delta : old.delta * 0.8 + this.curColor.delta * 0.2, mask : old.mask * 0.8 + this.curColor.mask * 0.2, alpha : old.alpha * 0.8 + this.curColor.alpha * 0.2, rgb : old.rgb * 0.8 + this.curColor.rgb * 0.2, k : old.k * 0.8 + this.curColor.k * 0.2};
		if(this.shake != null) {
			var a = this.shake.time < 10 ? this.shake.time / 10 : 1;
			var tx1 = (Math.random() * 2 - 1) * this.shake.power * a;
			var ty1 = (Math.random() * 2 - 1) * this.shake.power * a;
			var _this4 = this.s2d;
			_this4.posChanged = true;
			_this4.x = tx1;
			var _this5 = this.s2d;
			_this5.posChanged = true;
			_this5.y = ty1;
			this.shake.time -= dt;
			if(this.shake.time < 0) {
				this.shake = null;
				var _this6 = this.s2d;
				var _this7 = this.s2d;
				_this7.posChanged = true;
				_this6.posChanged = true;
				_this6.x = _this7.y = 0;
			}
		}
		this.outputFilters = [];
		var delta = this.curColor.delta | 0;
		var mask = Math.ceil(this.curColor.mask);
		if(delta != 0 || mask != 255) {
			this.applyMask(delta,mask);
		}
		if(this.curColor.rgb > 0.01) {
			var r = 155;
			var g = 198;
			var b = 15;
			var f = 0.25 / g * this.curColor.rgb;
			var k = 1 - this.curColor.rgb;
			var m11 = h3d_Matrix.L([k + r * f,r * f,r * f,0,g * f,k + g * f,g * f,0,b * f,b * f,k + b * f,0,0,0,0,1]);
			m11._41 = 0. * this.curColor.rgb;
			m11._42 = 0.15686274509803921 * this.curColor.rgb;
			m11._43 = -0.15686274509803921 * this.curColor.rgb;
			m11.colorContrast(this.curColor.rgb * 0.15);
			m11.colorSaturate(-this.curColor.rgb * 0.2);
			var curFilter = new h2d_filter_ColorMatrix(m11);
			this.outputFilters.push(curFilter);
		}
		this.pixelFilter.alpha = this.curColor.alpha;
		this.pixelFilter.set_visible(this.curColor.alpha > 0.01);
		if(this.generators != null) {
			var _g42 = 0;
			var _g5 = this.generators;
			while(_g42 < _g5.length) {
				var g1 = _g5[_g42];
				++_g42;
				var dx1 = this.hero.x - g1.x;
				var dy1 = this.hero.y - g1.y;
				var d1 = dx1 * dx1 + dy1 * dy1;
				if(d1 < 100 && Game.props.xp >= 0) {
					g1.time -= dt;
					if(g1.time < 0) {
						var k1;
						switch(Std.random(10)) {
						case 0:case 1:case 2:
							k1 = EKind.Monster;
							break;
						case 3:case 4:case 5:
							k1 = EKind.Bat;
							break;
						case 6:case 7:
							k1 = EKind.Knight;
							break;
						default:
							k1 = null;
						}
						if(k1 != null && this.monsters.length < 50) {
							var m3 = new Monster(k1,g1.x,g1.y);
							m3.generated = true;
							this.monsters.push(m3);
						}
						g1.time += 50;
					}
				}
			}
		}
		var size = (Math.ceil(16 * this.scroll.curZ) >> 1) + this.barsDelta;
		if(Game.props.bars || size < this.s2d.height * 0.5) {
			var color = this.curColor.rgb == 0 ? -16777216 : -15453676;
			if(this.bars == null) {
				this.bars = new h2d_Graphics(this.s2d);
			}
			this.bars.clear();
			this.bars.beginFill(color);
			this.bars.drawRect(0,0,this.s2d.width,(this.s2d.height >> 1) - size - 5);
			this.bars.drawRect(0,(this.s2d.height >> 1) + size - 5,this.s2d.width,this.s2d.height - (this.s2d.height >> 1) + size);
			if(!Game.props.bars) {
				this.barsDelta += 5 * dt;
			}
		} else if(this.bars != null) {
			var _this8 = this.bars;
			if(_this8 != null && _this8.parent != null) {
				_this8.parent.removeChild(_this8);
			}
			this.bars = null;
		}
		if(this.mask != null) {
			this.outputFilters.push(new h2d_filter_Mask(this.mask));
		}
		this.dm.ysort(3);
		this.scroll.mc.set_filter(this.outputFilters.length == 0 ? null : this.outputFilters.length == 1 ? this.outputFilters[0] : new h2d_filter_Group(this.outputFilters));
	}
	,applyMask: function(delta,mask) {
		if(this.bitmaskFilter == null) {
			this.bitmaskFilter = new h2d_filter_Shader(new BitmaskShader());
		}
		this.outputFilters.push(this.bitmaskFilter);
		this.bitmaskFilter.get_shader().delta__ = delta;
		this.bitmaskFilter.get_shader().mask__ = mask;
	}
	,dispose: function() {
		hxd_App.prototype.dispose.call(this);
		hxd_Res.get_loader().loadCache("music.ogg",hxd_res_Sound).stop();
	}
	,__class__: Game
});
var Hero = function(x,y) {
	Entity.call(this,EKind.Hero,x,y);
	this.dirY = 1;
	this.hitRecover = 0;
};
$hxClasses["Hero"] = Hero;
Hero.__name__ = "Hero";
Hero.__super__ = Entity;
Hero.prototype = $extend(Entity.prototype,{
	talk: function(n) {
		if(Popup.hasDialog()) {
			return;
		}
		var p = Game.props;
		switch(n.x + "/" + n.y) {
		case "38/61":
			Sounds.play("npc");
			this.game.popup("Check our company website <font color='#4040FF'>ShiroGames.com</font>","What ? In-game advertising ? No way !",true);
			break;
		case "41/72":
			Sounds.play("npc");
			this.game.popup("Can't find your way? Try to push some rock","Yes I know, this is quite a classic trick...",true);
			break;
		case "51/62":
			Sounds.play("npc");
			if(p.npc == 1) {
				this.game.popup("Sorry I have nothing to say to you !","that's what you get when talking to strangers",true);
				return;
			}
			if(p.quests[0] == 0 || p.quests[0] == 1 && p.gold == 0) {
				this.game.popup("You want a <font color='#4040FF'>Quest</font> ?","Bring me something shiny and I'll will help you",true);
				p.quests[0] = 1;
				return;
			}
			if(p.quests[0] == 1) {
				p.gold--;
				p.quests[0] = 2;
			}
			this.game.popup("Thank you for your <font color='#4040FF'>gold coin</font> !","You can now open doors with keys !",true);
			break;
		case "53/47":
			Sounds.play("npc");
			this.game.popup("I love fishing","What about you ?",true);
			break;
		case "57/38":
			Sounds.play("npc");
			this.game.popup("If you talk to the princess, it will be game end","I am married as well, I know what I'm talking about !",true);
			break;
		case "59/31":
			if(p.quests[1] == 0) {
				p.quests[1] = 1;
				Sounds.play("princess");
				this.game.getChest(ChestKind.CPrincess,0,0);
			}
			break;
		default:
			haxe_Log.trace("Unknown NPC @" + Std.string([n.x,n.y]),{ fileName : "src/Hero.hx", lineNumber : 60, className : "Hero", methodName : "talk"});
		}
	}
	,collide: function(x,y) {
		if(!this.game.world.collide(x,y)) {
			return false;
		}
		if(this.game.world.t[x][y]._hx_index == 15) {
			if(Game.props.quests[0] == 2 && Game.props.keys > 0) {
				Game.props.keys--;
				this.game.world.remove(x,y);
				this.game.popup("Door <font color='#00ff00'>Opened</font>",Game.props.keys + " keys left");
			}
		}
		var _g1 = 0;
		var _g2 = this.game.world.npcs;
		while(_g1 < _g2.length) {
			var n = _g2[_g1];
			++_g1;
			if(n.x == x && n.y == y) {
				this.talk(n);
			}
		}
		return true;
	}
	,move: function(dx,dy,dt) {
		var angle = Math.atan2(dy,dx);
		if(Math.abs(angle) < Math.PI / 4) {
			this.dirX = 1;
			this.dirY = 0;
		} else if(Math.abs(angle) > Math.PI * 3 / 4) {
			this.dirX = -1;
			this.dirY = 0;
		} else {
			this.dirX = 0;
			this.dirY = angle > 0 ? 1 : -1;
		}
		if(dx != 0) {
			this.doMove(dx,0,dt);
		}
		if(dy != 0) {
			this.doMove(0,dy,dt);
		}
	}
	,doMove: function(dx,dy,dt) {
		if(Game.props.freeMove) {
			var s = this.speed * dt;
			var px1 = (this.x * 16 + this.bounds.x) / 16 + dx * s | 0;
			var px2 = (this.x * 16 + this.bounds.x + this.bounds.w - 1) / 16 + dx * s | 0;
			var py1 = (this.y * 16 + this.bounds.y) / 16 + dy * s | 0;
			var py2 = (this.y * 16 + this.bounds.y + this.bounds.h - 1) / 16 + dy * s | 0;
			if(this.collide(px1,py1) || this.collide(px2,py1) || this.collide(px1,py2) || this.collide(px2,py2)) {
				this.push += dt;
				if(this.push > 25) {
					this.push = 0;
					if(this.dirY == 1 && px1 == 64 && py2 == 58) {
						this.game.world.remove(64,58);
						this.game.world.remove(64,61);
						this.game.getChest(ChestKind.CPushBlock,0,0);
					}
				}
				return;
			}
			this.push = 0;
			this.x += dx * s;
			this.y += dy * s;
			var nx = this.x + (this.bounds.x + this.bounds.w * 0.5) / 16 | 0;
			var ny = this.y + (this.bounds.y + this.bounds.h * 0.5) / 16 | 0;
			if(nx != this.ix || ny != this.iy) {
				this.ix = nx;
				this.iy = ny;
				this.endMove();
			}
			this.moving = true;
		} else {
			var x = this.ix + (dx == 0 ? 0 : dx > 0 ? 1 : -1);
			var y = this.iy + (dy == 0 ? 0 : dy > 0 ? 1 : -1);
			if(this.collide(x,y)) {
				return;
			}
			this.target = { x : x, y : y};
		}
	}
	,update: function(dt) {
		if(this.target == null && !this.moving) {
			this.frame = 0;
		} else if(this.iframe % 2 == 0) {
			if(!this.sound) {
				this.sound = true;
				Sounds.play("walk");
			}
		} else {
			this.sound = false;
		}
		if(this.dirY < 0) {
			this.kind = EKind.HeroUp;
		} else {
			this.kind = EKind.Hero;
		}
		Entity.prototype.update.call(this,dt);
		if(this.hitRecover > 0) {
			this.hitRecover -= dt;
			this.mc.alpha = Math.abs(Math.sin(this.hitRecover));
			if(this.hitRecover <= 0) {
				this.mc.alpha = 1;
			}
		}
		if(this.sword != null) {
			this.updateSword(dt);
		}
	}
	,cleanPuzzle: function() {
		if(this.puzzle != null) {
			var _g = 0;
			var _g1 = this.puzzle;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var _this = p.s;
				if(_this != null && _this.parent != null) {
					_this.parent.removeChild(_this);
				}
			}
			this.puzzle = null;
		}
	}
	,endMove: function() {
		switch(this.game.world.t[this.ix][this.iy]._hx_index) {
		case 10:
			if(Game.props.canSave) {
				this.game.save();
			}
			break;
		case 16:
			this.game.getChest(ChestKind.CDungeon,0,0);
			break;
		case 22:
			if(Game.props.puzzle) {
				return;
			}
			if(this.puzzle == null) {
				this.puzzle = [];
			}
			var _g = 0;
			var _g1 = this.puzzle;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(p.x == this.ix && p.y == this.iy) {
					this.cleanPuzzle();
					this.puzzle = [];
					break;
				}
			}
			var s = new h2d_Graphics();
			s.beginFill(16777215,0.5);
			s.drawRect(0,0,16,16);
			s.posChanged = true;
			s.x = this.ix * 16;
			s.posChanged = true;
			s.y = this.iy * 16;
			this.game.dm.addChildAt(s,0);
			this.puzzle.push({ x : this.ix, y : this.iy, s : s});
			Sounds.play("puzzle");
			if(this.puzzle.length == 13) {
				this.cleanPuzzle();
				this.game.getChest(ChestKind.CPuzzle,0,0);
			}
			break;
		case 26:
			if(this.y > 24.9) {
				this.teleport(59,43);
				this.game.initDungeon(false);
				this.game.world.remove(59,44);
			} else {
				this.iy = 24;
			}
			break;
		default:
			this.cleanPuzzle();
			if(this.ix == 26 && this.iy == 42 && Game.props.dungeon) {
				this.game.world.remove(26,40);
			}
		}
	}
	,updateSword: function(dt) {
		this.sword.pos += dt * this.sword.speed;
		if(this.sword.pos >= 8) {
			this.sword.pos = 8 - (this.sword.pos - 8);
			this.sword.speed *= -1;
		}
		var _this = this.sword.mc;
		_this.posChanged = true;
		_this.x = this.mc.x + 8 + (this.sword.pos - 1) * this.sword.dx;
		var _this1 = this.sword.mc;
		_this1.posChanged = true;
		_this1.y = this.mc.y + 8 + (this.sword.pos - 1) * this.sword.dy + (this.sword.dx != 0 ? 2 : 0);
		var hitX = this.sword.mc.x + this.sword.dx * 10;
		var hitY = this.sword.mc.y + this.sword.dy * 10;
		var hx = hitX / 16 | 0;
		var hy = hitY / 16 | 0;
		if(this.game.world.t[hx][hy]._hx_index == 6) {
			this.game.world.remove(hx,hy);
		}
		var props = Game.props;
		var _g1 = 0;
		var _g2 = this.game.monsters;
		while(_g1 < _g2.length) {
			var m = _g2[_g1];
			++_g1;
			var dx = m.x * 16 + 8 - hitX;
			var dy = m.y * 16 + 7 - hitY;
			if(dx * dx + dy * dy < 64 && m.canHit()) {
				m.kill();
				Sounds.play("kill");
				if(props.dungeon) {
					props.dmkills++;
					if(props.dmkills == 7) {
						this.game.getChest(ChestKind.CDungeonKills,0,0);
					}
				}
				if(props.xp >= 0) {
					props.xp += 10;
					this.game.updateUI();
					if(props.xp >= 100) {
						this.game.getChest(ChestKind.CLevelUp,0,0);
					}
				}
				break;
			}
		}
		if(this.sword.pos < 0) {
			var _this2 = this.sword.mc;
			if(_this2 != null && _this2.parent != null) {
				_this2.parent.removeChild(_this2);
			}
			this.sword = null;
		}
	}
	,attack: function() {
		var smc = new h2d_Object();
		var bmp = new h2d_Bitmap(this.game.spriteFrames[3][0]);
		bmp.posChanged = true;
		bmp.x = -8;
		bmp.posChanged = true;
		bmp.y = -3;
		smc.addChild(bmp);
		var v = Math.atan2(-this.dirX,this.dirY);
		smc.posChanged = true;
		smc.rotation = v;
		this.game.dm.addChildAt(smc,3 + (this.dirY < 0 ? -1 : 0));
		this.sword = { dx : this.dirX, dy : this.dirY, pos : 0., speed : 3., mc : smc};
		this.updateSword(0);
		Sounds.play("sword");
	}
	,__class__: Hero
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Math.__name__ = "Math";
var Monster = function(k,x,y) {
	Entity.call(this,k,x,y);
	this.wait = 10;
	switch(k._hx_index) {
	case 8:
		this.speed = 0.05;
		break;
	case 9:
		this.speed = 0.1;
		break;
	case 10:
		this.mc.alpha = 0.7;
		break;
	default:
		this.speed = 0.03;
	}
	this.start = { x : x, y : y};
};
$hxClasses["Monster"] = Monster;
Monster.__name__ = "Monster";
Monster.__super__ = Entity;
Monster.prototype = $extend(Entity.prototype,{
	endMove: function() {
		this.wait = (Math.random() + 0.2) * 10;
	}
	,endWait: function() {
	}
	,deathHit: function() {
		if(this.kind._hx_index == 9) {
			return this.mc.alpha > 0.3;
		}
		return true;
	}
	,canHit: function() {
		switch(this.kind._hx_index) {
		case 9:
			return this.mc.alpha > 0.8;
		case 10:
			return false;
		default:
		}
		return true;
	}
	,update: function(dt) {
		if(this.wait > 0) {
			this.wait -= dt;
			if(this.wait <= 0) {
				this.endWait();
			}
		} else {
			switch(this.kind._hx_index) {
			case 2:
				if(this.target == null) {
					var dx = 0;
					var dy = 0;
					switch(Std.random(10)) {
					case 1:
						++dx;
						break;
					case 2:
						--dx;
						break;
					case 3:
						--dy;
						break;
					case 4:
						++dy;
						break;
					}
					if((dx != 0 || dy != 0) && !this.game.world.collide(this.ix + dx,this.iy + dy)) {
						this.ix += dx;
						this.iy += dy;
						this.target = { x : this.ix, y : this.iy};
					}
				}
				break;
			case 8:
				if(this.target == null) {
					var x;
					var y;
					while(true) {
						x = this.x + (Math.random() - 0.5) * 3;
						y = this.y + (Math.random() - 0.5) * 3;
						if(!((x - this.start.x) * (x - this.start.x) + (y - this.start.y) * (y - this.start.y) > 16)) {
							break;
						}
					}
					this.target = { x : x, y : y};
				}
				break;
			case 9:
				if(this.frame > 12) {
					this.mc.alpha -= dt * 0.03;
					if(this.mc.alpha <= 0) {
						this.frame = 0;
						this.wait = 20 + Math.random() * 10;
						this.mc.alpha = 1;
						this.attack = Std.random(3) != 0;
						var h = this.game.hero;
						while(true) {
							this.ix = this.x + (Math.random() - 0.5) * 6 | 0;
							this.iy = this.y + (Math.random() - 0.5) * 6 | 0;
							if(!(this.game.world.collide(this.ix,this.iy) || (this.ix - this.start.x) * (this.ix - this.start.x) + (this.iy - this.start.y) * (this.iy - this.start.y) > 36 || (this.ix - h.x) * (this.ix - h.x) + (this.iy - h.y) * (this.iy - h.y) < 2)) {
								break;
							}
						}
						this.x = this.ix;
						this.y = this.iy;
						if(!this.game.world.collide(this.ix,this.iy + 1)) {
							this.target = { x : this.ix, y : this.y + 1};
						}
					}
				}
				if(!this.attack && this.target == null) {
					this.attack = true;
					var dx1 = this.game.hero.x - this.ix;
					var dy1 = this.game.hero.y - this.iy;
					if(dx1 * dx1 + dy1 * dy1 < 64) {
						Sounds.play("fireball");
					}
					this.game.monsters.push(new Monster(EKind.Fireball,this.ix,this.iy));
				}
				break;
			case 10:
				this.y += dt * 0.1;
				if(this.game.world.collide(this.x | 0,this.y | 0)) {
					var dx2 = this.game.hero.x - this.x;
					var dy2 = this.game.hero.y - this.y;
					if(dx2 * dx2 + dy2 * dy2 < 64) {
						Sounds.play("fireHit");
					}
					this.kill();
					return;
				}
				break;
			default:
			}
		}
		Entity.prototype.update.call(this,dt);
	}
	,kill: function() {
		this.explode(10);
		this.remove();
		HxOverrides.remove(this.game.monsters,this);
	}
	,__class__: Monster
});
var Part = function(x,y,z,mc) {
	this.mc = mc;
	this.x = x;
	this.y = y;
	this.z = z;
	this.speed = 0.8;
	mc.posChanged = true;
	mc.x = x;
	mc.posChanged = true;
	mc.y = y - z;
	Game.inst.dm.addChildAt(mc,4);
	this.vx = (Math.random() - 0.5) * 3;
	this.vy = (Math.random() - 0.5) * 3;
	this.vz = (Math.random() + 2) * 1.5;
	this.time = 50.;
	Part.all.push(this);
};
$hxClasses["Part"] = Part;
Part.__name__ = "Part";
Part.explode = function(t,px,py,proba) {
	if(proba == null) {
		proba = 100;
	}
	if(t == null) {
		return;
	}
	var _g = 0;
	var _g1 = Math.ceil(t.width + t.x) - Math.floor(t.x);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g11 = Math.ceil(t.height + t.y) - Math.floor(t.y);
		while(_g2 < _g11) {
			var y = _g2++;
			if(Std.random(100) >= proba) {
				continue;
			}
			var c = t.sub(x,y,1,1);
			var b = new h2d_Bitmap(c);
			new Part(px + x,py + y,0,b);
		}
	}
};
Part.updateAll = function(dt) {
	var _g = 0;
	var _g1 = Part.all.slice();
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(!p.update(dt)) {
			p.remove();
			HxOverrides.remove(Part.all,p);
		}
	}
};
Part.prototype = {
	update: function(dt) {
		this.x += this.vx * this.speed;
		this.y += this.vy * this.speed;
		this.z += this.vz * this.speed;
		this.vz -= Math.pow(0.9,dt) * this.speed;
		if(this.z < 0) {
			this.z = -this.z;
			this.vz *= -0.5;
		}
		var _this = this.mc;
		_this.posChanged = true;
		_this.x = this.x;
		var _this1 = this.mc;
		_this1.posChanged = true;
		_this1.y = this.y - this.z;
		this.time -= dt;
		this.mc.alpha = this.time / 30;
		return this.time > 0;
	}
	,remove: function() {
		this.mc.parent.removeChild(this.mc);
	}
	,__class__: Part
};
var h2d_Object = function(parent) {
	this.alpha = 1.;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.blendMode = h2d_BlendMode.Alpha;
	this.posChanged = parent != null;
	this.set_visible(true);
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Object"] = h2d_Object;
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,set_filter: function(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c1 = this.children[0];
			if(c1.visible) {
				c1.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c2 = _g11[_g2];
			++_g2;
			if(!c2.visible) {
				continue;
			}
			c2.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x;
			var y;
			var x1 = dx * this.matA + dy * this.matC + this.absX;
			var y1 = dx * this.matB + dy * this.matD + this.absY;
			if(x1 < out.xMin) {
				out.xMin = x1;
			}
			if(x1 > out.xMax) {
				out.xMax = x1;
			}
			if(y1 < out.yMin) {
				out.yMin = y1;
			}
			if(y1 > out.yMax) {
				out.yMax = y1;
			}
			var x2 = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y2 = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x2 < out.xMin) {
				out.xMin = x2;
			}
			if(x2 > out.xMax) {
				out.xMax = x2;
			}
			if(y2 < out.yMin) {
				out.yMin = y2;
			}
			if(y2 > out.yMax) {
				out.yMax = y2;
			}
			var x3 = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y3 = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x3 < out.xMin) {
				out.xMin = x3;
			}
			if(x3 > out.xMax) {
				out.xMax = x3;
			}
			if(y3 < out.yMin) {
				out.yMin = y3;
			}
			if(y3 > out.yMax) {
				out.yMax = y3;
			}
			var x4 = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y4 = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x4 < out.xMin) {
				out.xMin = x4;
			}
			if(x4 > out.xMax) {
				out.xMax = x4;
			}
			if(y4 < out.yMin) {
				out.yMin = y4;
			}
			if(y4 > out.yMax) {
				out.yMax = y4;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x5 = dx * this.matA + dy * this.matC + rX;
		var y5 = dx * this.matB + dy * this.matD + rY;
		var x6 = x5 * rA + y5 * rC;
		var y6 = x5 * rB + y5 * rD;
		if(x6 < out.xMin) {
			out.xMin = x6;
		}
		if(x6 > out.xMax) {
			out.xMax = x6;
		}
		if(y6 < out.yMin) {
			out.yMin = y6;
		}
		if(y6 > out.yMax) {
			out.yMax = y6;
		}
		x5 = (dx + width) * this.matA + dy * this.matC + rX;
		y5 = (dx + width) * this.matB + dy * this.matD + rY;
		var x7 = x5 * rA + y5 * rC;
		var y7 = x5 * rB + y5 * rD;
		if(x7 < out.xMin) {
			out.xMin = x7;
		}
		if(x7 > out.xMax) {
			out.xMax = x7;
		}
		if(y7 < out.yMin) {
			out.yMin = y7;
		}
		if(y7 > out.yMax) {
			out.yMax = y7;
		}
		x5 = dx * this.matA + (dy + height) * this.matC + rX;
		y5 = dx * this.matB + (dy + height) * this.matD + rY;
		var x8 = x5 * rA + y5 * rC;
		var y8 = x5 * rB + y5 * rD;
		if(x8 < out.xMin) {
			out.xMin = x8;
		}
		if(x8 > out.xMax) {
			out.xMax = x8;
		}
		if(y8 < out.yMin) {
			out.yMin = y8;
		}
		if(y8 > out.yMax) {
			out.yMax = y8;
		}
		x5 = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y5 = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x9 = x5 * rA + y5 * rC;
		var y9 = x5 * rB + y5 * rD;
		if(x9 < out.xMin) {
			out.xMin = x9;
		}
		if(x9 > out.xMax) {
			out.xMax = x9;
		}
		if(y9 < out.yMin) {
			out.yMin = y9;
		}
		if(y9 > out.yMax) {
			out.yMax = y9;
		}
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h2d_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,getMatrix: function(m) {
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr1 = Math.cos(this.rotation);
				var sr1 = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr1;
				var tmpB = this.scaleX * sr1;
				var tmpC = this.scaleY * -sr1;
				var tmpD = this.scaleY * cr1;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
		return;
	}
	,clipBounds: function(ctx,bounds) {
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			matA = this.matA * f1.x + this.matB * f1.y;
			matB = this.matA * f2.x + this.matB * f2.y;
			matC = this.matC * f1.x + this.matD * f1.y;
			matD = this.matC * f2.x + this.matD * f2.y;
			absX = this.absX * f1.x + this.absY * f1.y + f1.z;
			absY = this.absX * f2.x + this.absY * f2.y + f2.z;
		} else {
			matA = this.matA;
			matB = this.matB;
			matC = this.matC;
			matD = this.matD;
			absX = this.absX;
			absY = this.absY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x2 = bounds.xMax;
		var y2 = bounds.yMin;
		var x3 = x2 * matA + y2 * matC + absX;
		var y3 = x2 * matB + y2 * matD + absY;
		if(x3 < view.xMin) {
			view.xMin = x3;
		}
		if(x3 > view.xMax) {
			view.xMax = x3;
		}
		if(y3 < view.yMin) {
			view.yMin = y3;
		}
		if(y3 > view.yMax) {
			view.yMax = y3;
		}
		var x4 = bounds.xMin;
		var y4 = bounds.yMax;
		var x5 = x4 * matA + y4 * matC + absX;
		var y5 = x4 * matB + y4 * matD + absY;
		if(x5 < view.xMin) {
			view.xMin = x5;
		}
		if(x5 > view.xMax) {
			view.xMax = x5;
		}
		if(y5 < view.yMin) {
			view.yMin = y5;
		}
		if(y5 > view.yMax) {
			view.yMax = y5;
		}
		var x6 = bounds.xMax;
		var y6 = bounds.yMax;
		var x7 = x6 * matA + y6 * matC + absX;
		var y7 = x6 * matB + y6 * matD + absY;
		if(x7 < view.xMin) {
			view.xMin = x7;
		}
		if(x7 > view.xMax) {
			view.xMax = x7;
		}
		if(y7 < view.yMin) {
			view.yMin = y7;
		}
		if(y7 > view.yMax) {
			view.yMax = y7;
		}
		if(view.xMin < ctx.curX) {
			view.xMin = ctx.curX;
		}
		if(view.yMin < ctx.curY) {
			view.yMin = ctx.curY;
		}
		if(view.xMax > ctx.curX + ctx.curWidth) {
			view.xMax = ctx.curX + ctx.curWidth;
		}
		if(view.yMax > ctx.curY + ctx.curHeight) {
			view.yMax = ctx.curY + ctx.curHeight;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x8 = sxMin;
		var y8 = syMin;
		x8 -= absX;
		y8 -= absY;
		var x9 = (x8 * matD - y8 * matC) * invDet;
		var y9 = (-x8 * matB + y8 * matA) * invDet;
		if(x9 < view.xMin) {
			view.xMin = x9;
		}
		if(x9 > view.xMax) {
			view.xMax = x9;
		}
		if(y9 < view.yMin) {
			view.yMin = y9;
		}
		if(y9 > view.yMax) {
			view.yMax = y9;
		}
		var x10 = sxMax;
		var y10 = syMin;
		x10 -= absX;
		y10 -= absY;
		var x11 = (x10 * matD - y10 * matC) * invDet;
		var y11 = (-x10 * matB + y10 * matA) * invDet;
		if(x11 < view.xMin) {
			view.xMin = x11;
		}
		if(x11 > view.xMax) {
			view.xMax = x11;
		}
		if(y11 < view.yMin) {
			view.yMin = y11;
		}
		if(y11 > view.yMax) {
			view.yMax = y11;
		}
		var x12 = sxMin;
		var y12 = syMax;
		x12 -= absX;
		y12 -= absY;
		var x13 = (x12 * matD - y12 * matC) * invDet;
		var y13 = (-x12 * matB + y12 * matA) * invDet;
		if(x13 < view.xMin) {
			view.xMin = x13;
		}
		if(x13 > view.xMax) {
			view.xMax = x13;
		}
		if(y13 < view.yMin) {
			view.yMin = y13;
		}
		if(y13 > view.yMax) {
			view.yMax = y13;
		}
		var x14 = sxMax;
		var y14 = syMax;
		x14 -= absX;
		y14 -= absY;
		var x15 = (x14 * matD - y14 * matC) * invDet;
		var y15 = (-x14 * matB + y14 * matA) * invDet;
		if(x15 < view.xMin) {
			view.xMin = x15;
		}
		if(x15 > view.xMax) {
			view.xMax = x15;
		}
		if(y15 < view.yMin) {
			view.yMin = y15;
		}
		if(y15 > view.yMax) {
			view.yMax = y15;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a1 = bounds.yMin;
		var b1 = view.yMin;
		bounds.yMin = a1 < b1 ? b1 : a1;
		var a2 = bounds.xMax;
		var b2 = view.xMax;
		bounds.xMax = a2 > b2 ? b2 : a2;
		var a3 = bounds.yMax;
		var b3 = view.yMax;
		bounds.yMax = a3 > b3 ? b3 : a3;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		var maxExtent = -1.;
		this.filter.sync(ctx,this);
		if(this.filter.autoBounds) {
			maxExtent = this.filter.boundsExtend;
		} else {
			this.filter.getBounds(this,bounds);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		if(maxExtent >= 0) {
			this.getBounds(this,bounds);
			bounds.xMin -= maxExtent;
			bounds.yMin -= maxExtent;
			bounds.xMax += maxExtent;
			bounds.yMax += maxExtent;
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		this.clipBounds(ctx,total);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldA_x = x;
		var oldA_y = y;
		var oldA_z = z;
		var oldA_w = w;
		var _this1 = shader.filterMatrixB__;
		var x1 = _this1.x;
		var y1 = _this1.y;
		var z1 = _this1.z;
		var w1 = _this1.w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldB_x = x1;
		var oldB_y = y1;
		var oldB_z = z1;
		var oldB_w = w1;
		var oldF = ctx.inFilter;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet;
		var invB = -this.matB * invDet;
		var invC = -this.matC * invDet;
		var invD = this.matA * invDet;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this2 = shader.filterMatrixA__;
		var x2 = invA;
		var y2 = invC;
		var z2 = invX;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z2;
		_this2.w = 1.;
		var _this3 = shader.filterMatrixB__;
		var x3 = invB;
		var y3 = invD;
		var z3 = invY;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this3.x = x3;
		_this3.y = y3;
		_this3.z = z3;
		_this3.w = 1.;
		ctx.globalAlpha = 1;
		this.draw(ctx);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.drawRec(ctx);
		}
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin;
		finalTile.dy = yMin;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != prev && finalTile != null) {
			finalTile.dx += xMin;
			finalTile.dy += yMin;
		}
		var _this4 = shader.filterMatrixA__;
		_this4.x = oldA_x;
		_this4.y = oldA_y;
		_this4.z = oldA_z;
		_this4.w = oldA_w;
		var _this5 = shader.filterMatrixB__;
		_this5.x = oldB_x;
		_this5.y = oldB_y;
		_this5.z = oldB_z;
		_this5.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			if(ctx.front2back) {
				var nchilds = this.children.length;
				var _g2 = 0;
				var _g11 = nchilds;
				while(_g2 < _g11) {
					var i = _g2++;
					this.children[nchilds - 1 - i].drawRec(ctx);
				}
				this.draw(ctx);
			} else {
				this.draw(ctx);
				var _g3 = 0;
				var _g12 = this.children;
				while(_g3 < _g12.length) {
					var c1 = _g12[_g3];
					++_g3;
					c1.drawRec(ctx);
				}
			}
			ctx.globalAlpha = old;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var c1 = c.__name__;
		if(this.name == null) {
			return c1;
		} else {
			return this.name + "(" + c1 + ")";
		}
	}
	,contentChanged: function(s) {
	}
	,__class__: h2d_Object
};
var Popup = function() {
	h2d_Object.call(this);
	this.speed = 4;
	this.wait = 0;
	Popup.all.push(this);
};
$hxClasses["Popup"] = Popup;
Popup.__name__ = "Popup";
Popup.hasDialog = function() {
	var _g = 0;
	var _g1 = Popup.all;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(p.dialog) {
			return true;
		}
	}
	return false;
};
Popup.updateAll = function(dt) {
	var _g = 0;
	var _g1 = Popup.all.slice();
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(!p.update(dt)) {
			p.parent.removeChild(p);
			HxOverrides.remove(Popup.all,p);
		}
	}
};
Popup.__super__ = h2d_Object;
Popup.prototype = $extend(h2d_Object.prototype,{
	update: function(dt) {
		if(this.wait > 0) {
			this.wait -= dt;
			return true;
		}
		if(isNaN(this.startY)) {
			this.startY = this.y;
			this.virtualY = this.y;
		}
		this.virtualY -= dt * this.speed;
		if(this.virtualY < this.targetY) {
			this.virtualY = this.targetY;
			this.wait = this.speed * 30;
			this.speed = -this.speed * 0.5;
		}
		this.posChanged = true;
		this.y = this.virtualY | 0;
		if(this.virtualY > this.getScene().height) {
			return false;
		}
		return true;
	}
	,__class__: Popup
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var Sounds = function() { };
$hxClasses["Sounds"] = Sounds;
Sounds.__name__ = "Sounds";
Sounds.play = function(name) {
	if(!Game.props.sounds) {
		return;
	}
	var s = Sounds.sounds.h[name];
	if(s == null) {
		s = hxd_Res.load("sfx/" + name.toLowerCase() + ".wav").toSound();
		Sounds.sounds.h[name] = s;
	}
	s.play();
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Title = function() {
	hxd_App.call(this);
};
$hxClasses["Title"] = Title;
Title.__name__ = "Title";
Title.__super__ = hxd_App;
Title.prototype = $extend(hxd_App.prototype,{
	init: function() {
		var _gthis = this;
		this.time = 0;
		var bg = new h2d_Object(this.s2d);
		var _g = bg;
		_g.posChanged = true;
		_g.scaleX *= 2;
		var _g1 = bg;
		_g1.posChanged = true;
		_g1.scaleY *= 2;
		var bmp = new h2d_Bitmap(hxd_Res.get_loader().loadCache("title.png",hxd_res_Image).toTile(),bg);
		this.layer2 = new h2d_Bitmap(hxd_Res.get_loader().loadCache("title2.png",hxd_res_Image).toTile(),bg);
		this.layer3 = new h2d_Bitmap(hxd_Res.get_loader().loadCache("title3.png",hxd_res_Image).toTile(),bg);
		this.layer2.set_colorKey(hxd_Res.get_loader().loadCache("title2.png",hxd_res_Image).getPixels().getPixel(0,0));
		this.layer3.set_colorKey(hxd_Res.get_loader().loadCache("title3.png",hxd_res_Image).getPixels().getPixel(0,0));
		var quote = Game.makeField("A short story of adventure video games evolution",12);
		quote.set_textColor(14207829);
		var v = (this.s2d.width - quote.get_textWidth()) * 0.5 | 0;
		quote.posChanged = true;
		quote.x = v;
		quote.posChanged = true;
		quote.y = 170;
		this.s2d.addChild(quote);
		if(Title.NEED_CLICK) {
			Title.NEED_CLICK = false;
			var tf = Game.makeField("Click to start",18);
			var v1 = (this.s2d.width - tf.get_textWidth() | 0) >> 1;
			tf.posChanged = true;
			tf.x = v1;
			tf.posChanged = true;
			tf.y = 300;
			this.s2d.addChild(tf);
			var _this = this.layer2;
			_this.posChanged = true;
			_this.y = 1000;
			var int = new h2d_Interactive(this.s2d.width,this.s2d.height,this.s2d);
			int.onClick = function(_) {
				if(tf != null && tf.parent != null) {
					tf.parent.removeChild(tf);
				}
				if(int != null && int.parent != null) {
					int.parent.removeChild(int);
				}
				_gthis.show();
			};
			return;
		}
		this.show();
	}
	,show: function() {
		var copy = Game.makeField("(C)1986-2012 ncannasse",12);
		var v = this.s2d.width - copy.get_textWidth() - 5;
		copy.posChanged = true;
		copy.x = v;
		copy.posChanged = true;
		copy.y = this.s2d.height - 20;
		this.s2d.addChild(copy);
		var start = Game.makeField("Start",18);
		start.posChanged = true;
		start.x = 250;
		start.posChanged = true;
		start.y = 220;
		this.s2d.addChild(start);
		this.hasSave = hxd_Save.load(null,"evo2") != null;
		var cont = Game.makeField("Continue",18);
		cont.posChanged = true;
		cont.x = 250;
		cont.posChanged = true;
		cont.y = 250;
		if(!this.hasSave) {
			cont.set_textColor(8421504);
		}
		this.s2d.addChild(cont);
		this.load = this.hasSave;
		this.cursor = new h2d_Bitmap(hxd_Res.get_loader().loadCache("sprites.png",hxd_res_Image).toTile().sub(0,80,16,16),this.s2d);
		var _this = this.cursor;
		var _g = _this;
		_g.posChanged = true;
		_g.scaleX *= 2;
		var _g1 = _this;
		_g1.posChanged = true;
		_g1.scaleY *= 2;
		this.cursor.set_colorKey(-65281);
	}
	,update: function(_) {
		if(this.load == null) {
			return;
		}
		Game.pad.axisDeadZone = 0.8;
		var sw = Game.pad.get_yAxis() != 0 && Game.pad.get_yAxis() < 0 == this.load;
		var k = 40;
		if(hxd_Key.isPressed(k)) {
			sw = true;
		}
		var k1 = 38;
		if(hxd_Key.isPressed(k1)) {
			sw = true;
		}
		var k2 = 90;
		if(hxd_Key.isPressed(k2)) {
			sw = true;
		}
		var k3 = 87;
		if(hxd_Key.isPressed(k3)) {
			sw = true;
		}
		var k4 = 83;
		if(hxd_Key.isPressed(k4)) {
			sw = true;
		}
		if(sw && this.hasSave) {
			var this1 = hxd_Res.get_loader();
			this1.loadCache("sfx/menu.wav",hxd_res_Sound).play();
			this.load = !this.load;
		}
		this.time += 0.2;
		var d2 = this.time * 2;
		if(d2 > 50) {
			d2 = 50 - Math.abs(Math.sin((this.time - 25) * 0.2) * 2.5);
		}
		var _this = this.layer2;
		_this.posChanged = true;
		_this.y = 100 - d2 * 2;
		var _this1 = this.layer2;
		_this1.posChanged = true;
		_this1.x = 25 - d2 * 0.5;
		var _this2 = this.layer3;
		var v = Math.sin(this.time * 0.1) * 10;
		_this2.posChanged = true;
		_this2.y = v;
		var _this3 = this.cursor;
		var v1 = 220 + Math.sin(this.time) * 2;
		_this3.posChanged = true;
		_this3.x = v1;
		var _this4 = this.cursor;
		_this4.posChanged = true;
		_this4.y = 210 + (this.load ? 30 : 0);
		var cfg = hxd_Pad.DEFAULT_CONFIG;
		var k5 = 69;
		if(hxd_Key.isPressed(k5) || Game.pad.isPressed(cfg.A) || Game.pad.isPressed(cfg.X)) {
			haxe_Timer.delay($bind(this,this.start),10);
			return;
		}
		var k6 = 13;
		if(hxd_Key.isPressed(k6) || Game.pad.isPressed(cfg.A) || Game.pad.isPressed(cfg.X)) {
			haxe_Timer.delay($bind(this,this.start),10);
			return;
		}
		var k7 = 32;
		if(hxd_Key.isPressed(k7) || Game.pad.isPressed(cfg.A) || Game.pad.isPressed(cfg.X)) {
			haxe_Timer.delay($bind(this,this.start),10);
			return;
		}
	}
	,start: function() {
		if(this.started) {
			return;
		}
		this.started = true;
		this.dispose();
		Game.startGame(this.load);
	}
	,__class__: Title
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var Block = $hxEnums["Block"] = { __ename__ : "Block", __constructs__ : ["Dark","Field","Tree","Water","BridgeUD","BridgeLR","Bush","RiverBank","Detail","Rock","SavePoint","Sand","SandBank","SandDetail","Cactus","Door","Dungeon","DungeonSoil","DungeonWall","DungeonStat","DungeonStairs","DungeonFakeWall","DungeonPuzzle","MonsterGenerator","FakeTree","Shades","DungeonExit","DarkDungeon","Lock","Free","DungeonFakeDark"]
	,Dark: {_hx_index:0,__enum__:"Block",toString:$estr}
	,Field: {_hx_index:1,__enum__:"Block",toString:$estr}
	,Tree: {_hx_index:2,__enum__:"Block",toString:$estr}
	,Water: {_hx_index:3,__enum__:"Block",toString:$estr}
	,BridgeUD: {_hx_index:4,__enum__:"Block",toString:$estr}
	,BridgeLR: {_hx_index:5,__enum__:"Block",toString:$estr}
	,Bush: {_hx_index:6,__enum__:"Block",toString:$estr}
	,RiverBank: {_hx_index:7,__enum__:"Block",toString:$estr}
	,Detail: {_hx_index:8,__enum__:"Block",toString:$estr}
	,Rock: {_hx_index:9,__enum__:"Block",toString:$estr}
	,SavePoint: {_hx_index:10,__enum__:"Block",toString:$estr}
	,Sand: {_hx_index:11,__enum__:"Block",toString:$estr}
	,SandBank: {_hx_index:12,__enum__:"Block",toString:$estr}
	,SandDetail: {_hx_index:13,__enum__:"Block",toString:$estr}
	,Cactus: {_hx_index:14,__enum__:"Block",toString:$estr}
	,Door: {_hx_index:15,__enum__:"Block",toString:$estr}
	,Dungeon: {_hx_index:16,__enum__:"Block",toString:$estr}
	,DungeonSoil: {_hx_index:17,__enum__:"Block",toString:$estr}
	,DungeonWall: {_hx_index:18,__enum__:"Block",toString:$estr}
	,DungeonStat: {_hx_index:19,__enum__:"Block",toString:$estr}
	,DungeonStairs: {_hx_index:20,__enum__:"Block",toString:$estr}
	,DungeonFakeWall: {_hx_index:21,__enum__:"Block",toString:$estr}
	,DungeonPuzzle: {_hx_index:22,__enum__:"Block",toString:$estr}
	,MonsterGenerator: {_hx_index:23,__enum__:"Block",toString:$estr}
	,FakeTree: {_hx_index:24,__enum__:"Block",toString:$estr}
	,Shades: {_hx_index:25,__enum__:"Block",toString:$estr}
	,DungeonExit: {_hx_index:26,__enum__:"Block",toString:$estr}
	,DarkDungeon: {_hx_index:27,__enum__:"Block",toString:$estr}
	,Lock: {_hx_index:28,__enum__:"Block",toString:$estr}
	,Free: {_hx_index:29,__enum__:"Block",toString:$estr}
	,DungeonFakeDark: {_hx_index:30,__enum__:"Block",toString:$estr}
};
Block.__empty_constructs__ = [Block.Dark,Block.Field,Block.Tree,Block.Water,Block.BridgeUD,Block.BridgeLR,Block.Bush,Block.RiverBank,Block.Detail,Block.Rock,Block.SavePoint,Block.Sand,Block.SandBank,Block.SandDetail,Block.Cactus,Block.Door,Block.Dungeon,Block.DungeonSoil,Block.DungeonWall,Block.DungeonStat,Block.DungeonStairs,Block.DungeonFakeWall,Block.DungeonPuzzle,Block.MonsterGenerator,Block.FakeTree,Block.Shades,Block.DungeonExit,Block.DarkDungeon,Block.Lock,Block.Free,Block.DungeonFakeDark];
var World = function(pix) {
	this.t = [];
	this.monsters = [];
	this.chests = [];
	this.removed = [];
	this.npcs = [];
	this.removedBitmaps = [];
	var _g = 0;
	while(_g < 98) {
		var x = _g++;
		this.t[x] = [];
		this.removedBitmaps[x] = [];
		this.removed[x] = [];
		var _g1 = 0;
		while(_g1 < 98) {
			var y = _g1++;
			this.t[x][y] = this.decodeColor(pix,x,y);
		}
	}
	this.tiles = h2d_Tile.autoCut(hxd_Res.get_loader().loadCache("tiles.png",hxd_res_Image).toBitmap(),16,16).tiles;
	this.shadeTile = this.tiles[24];
	this.root = new h2d_TileGroup(hxd_Res.get_loader().loadCache("tiles.png",hxd_res_Image).toTile());
	this.root.set_colorKey(-65281);
};
$hxClasses["World"] = World;
World.__name__ = "World";
World.prototype = {
	collide: function(x,y) {
		if(x < 0 || y < 0 || x >= 98 || y >= 98) {
			return true;
		}
		if(this.removed[x][y]) {
			return false;
		}
		switch(this.t[x][y]._hx_index) {
		case 1:case 10:case 11:case 17:case 24:case 29:
			return false;
		case 7:case 8:case 12:case 13:case 20:case 21:case 22:case 25:case 26:case 30:
			return false;
		case 4:case 5:case 16:case 23:
			return false;
		case 0:case 2:case 3:case 6:case 9:case 14:case 15:case 18:case 19:case 27:case 28:
			return true;
		}
	}
	,getSoil: function(x,y,rec) {
		if(rec == null) {
			rec = false;
		}
		if(x < 0 || y < 0 || x >= 98 || y >= 98) {
			return Block.Field;
		}
		var b = this.t[x][y];
		switch(b._hx_index) {
		case 0:case 2:case 6:case 9:case 10:case 14:case 15:case 16:case 24:case 28:case 29:
			if(rec) {
				return null;
			}
			var cur = null;
			var s = this.getSoil(x,y - 1,true);
			if(cur == null || s != null && s._hx_index < cur._hx_index) {
				cur = s;
			}
			var s1 = this.getSoil(x,y + 1,true);
			if(cur == null || s1 != null && s1._hx_index < cur._hx_index) {
				cur = s1;
			}
			var s2 = this.getSoil(x - 1,y,true);
			if(cur == null || s2 != null && s2._hx_index < cur._hx_index) {
				cur = s2;
			}
			var s3 = this.getSoil(x + 1,y,true);
			if(cur == null || s3 != null && s3._hx_index < cur._hx_index) {
				cur = s3;
			}
			if(cur == null) {
				cur = Block.Field;
			}
			return cur;
		case 1:case 11:case 17:
			return b;
		case 3:case 4:case 5:
			if(rec) {
				return null;
			} else {
				return Block.Water;
			}
			break;
		case 7:case 8:case 12:case 13:
			return null;
		case 18:case 19:case 20:case 21:case 22:case 23:case 26:
			return Block.DungeonSoil;
		case 25:case 27:case 30:
			return null;
		}
	}
	,remove: function(x,y) {
		if(this.removed[x][y]) {
			return false;
		}
		this.removed[x][y] = true;
		Game.props.rem.push(x + (y + (Game.props.dungeon ? 98 : 0)) * 98);
		Sounds.play("open");
		this.draw();
		var b = this.removedBitmaps[x][y];
		if(b != null) {
			Part.explode(b,x * 16,y * 16);
		}
		return true;
	}
	,getPos: function(b) {
		var pos = [];
		var _g = 0;
		while(_g < 98) {
			var x = _g++;
			var _g1 = 0;
			while(_g1 < 98) {
				var y = _g1++;
				if(this.t[x][y] == b) {
					pos.push({ x : x, y : y});
				}
			}
		}
		return pos;
	}
	,draw: function() {
		this.root.clear();
		this.rnd = new hxd_Rand(42);
		this.details = false;
		var _g = 0;
		while(_g < 98) {
			var x = _g++;
			var _g1 = 0;
			while(_g1 < 98) {
				var y = _g1++;
				var b = this.getSoil(x,y);
				if(b == null) {
					continue;
				}
				this.putBlock(x,y,b);
				switch(b._hx_index) {
				case 1:
					if(this.getSoil(x,y - 1) == Block.Sand) {
						this.putSingle(x,y,Block.SandBank,0);
					}
					if(this.getSoil(x + 1,y) == Block.Sand) {
						this.putSingle(x,y,Block.SandBank,1);
					}
					if(this.getSoil(x - 1,y) == Block.Sand) {
						this.putSingle(x,y,Block.SandBank,2);
					}
					if(this.getSoil(x,y + 1) == Block.Sand) {
						this.putSingle(x,y,Block.SandBank,3);
					}
					break;
				case 3:
					switch(this.getSoil(x,y - 1)._hx_index) {
					case 3:
						break;
					case 11:
						this.putSingle(x,y,Block.SandBank,0);
						break;
					default:
						this.putSingle(x,y,Block.RiverBank,0);
					}
					var s = this.getSoil(x + 1,y);
					if(s != Block.Water) {
						this.putSingle(x,y,s == Block.Sand ? Block.SandBank : Block.RiverBank,1);
					}
					s = this.getSoil(x - 1,y);
					if(s != Block.Water) {
						this.putSingle(x,y,s == Block.Sand ? Block.SandBank : Block.RiverBank,2);
					}
					break;
				default:
				}
			}
		}
		this.details = true;
		var _g11 = 0;
		while(_g11 < 98) {
			var x1 = _g11++;
			var _g12 = 0;
			while(_g12 < 98) {
				var y1 = _g12++;
				var b1 = this.t[x1][y1];
				switch(b1._hx_index) {
				case 0:
					var _this = this.rnd;
					_this.seed = 36969 * (_this.seed & 65535) + (_this.seed >> 16);
					_this.seed2 = 18000 * (_this.seed2 & 65535) + (_this.seed2 >> 16);
					if((((_this.seed << 16) + _this.seed2 | 0) & 1073741823) % 3 == 0) {
						var _this1 = this.rnd;
						_this1.seed = 36969 * (_this1.seed & 65535) + (_this1.seed >> 16);
						_this1.seed2 = 18000 * (_this1.seed2 & 65535) + (_this1.seed2 >> 16);
						var tmp = (((_this1.seed << 16) + _this1.seed2 | 0) & 1073741823) % 5 - 2;
						var _this2 = this.rnd;
						_this2.seed = 36969 * (_this2.seed & 65535) + (_this2.seed >> 16);
						_this2.seed2 = 18000 * (_this2.seed2 & 65535) + (_this2.seed2 >> 16);
						this.putBlock(x1,y1,Block.Tree,tmp,(((_this2.seed << 16) + _this2.seed2 | 0) & 1073741823) % 2,0,true);
					}
					break;
				case 1:
					var _this3 = this.rnd;
					_this3.seed = 36969 * (_this3.seed & 65535) + (_this3.seed >> 16);
					_this3.seed2 = 18000 * (_this3.seed2 & 65535) + (_this3.seed2 >> 16);
					if((((_this3.seed << 16) + _this3.seed2 | 0) & 1073741823) % 3 == 0) {
						var _this4 = this.rnd;
						_this4.seed = 36969 * (_this4.seed & 65535) + (_this4.seed >> 16);
						_this4.seed2 = 18000 * (_this4.seed2 & 65535) + (_this4.seed2 >> 16);
						var tmp1 = (((_this4.seed << 16) + _this4.seed2 | 0) & 1073741823) % 7 - 3;
						var _this5 = this.rnd;
						_this5.seed = 36969 * (_this5.seed & 65535) + (_this5.seed >> 16);
						_this5.seed2 = 18000 * (_this5.seed2 & 65535) + (_this5.seed2 >> 16);
						this.putBlock(x1,y1,Block.Detail,tmp1,-((((_this5.seed << 16) + _this5.seed2 | 0) & 1073741823) % 4));
					}
					break;
				case 2:
					var _this6 = this.rnd;
					_this6.seed = 36969 * (_this6.seed & 65535) + (_this6.seed >> 16);
					_this6.seed2 = 18000 * (_this6.seed2 & 65535) + (_this6.seed2 >> 16);
					var tmp2 = (((_this6.seed << 16) + _this6.seed2 | 0) & 1073741823) % 5 - 2;
					var _this7 = this.rnd;
					_this7.seed = 36969 * (_this7.seed & 65535) + (_this7.seed >> 16);
					_this7.seed2 = 18000 * (_this7.seed2 & 65535) + (_this7.seed2 >> 16);
					this.putBlock(x1,y1,b1,tmp2,-((((_this7.seed << 16) + _this7.seed2 | 0) & 1073741823) % 3),0,true);
					break;
				case 6:case 9:
					var _this8 = this.rnd;
					_this8.seed = 36969 * (_this8.seed & 65535) + (_this8.seed >> 16);
					_this8.seed2 = 18000 * (_this8.seed2 & 65535) + (_this8.seed2 >> 16);
					var tmp3 = (((_this8.seed << 16) + _this8.seed2 | 0) & 1073741823) % 5 - 2;
					var _this9 = this.rnd;
					_this9.seed = 36969 * (_this9.seed & 65535) + (_this9.seed >> 16);
					_this9.seed2 = 18000 * (_this9.seed2 & 65535) + (_this9.seed2 >> 16);
					this.putBlock(x1,y1,b1,tmp3,-((((_this9.seed << 16) + _this9.seed2 | 0) & 1073741823) % 3),0);
					break;
				case 11:
					var _this10 = this.rnd;
					_this10.seed = 36969 * (_this10.seed & 65535) + (_this10.seed >> 16);
					_this10.seed2 = 18000 * (_this10.seed2 & 65535) + (_this10.seed2 >> 16);
					if((((_this10.seed << 16) + _this10.seed2 | 0) & 1073741823) % 3 == 0) {
						var _this11 = this.rnd;
						_this11.seed = 36969 * (_this11.seed & 65535) + (_this11.seed >> 16);
						_this11.seed2 = 18000 * (_this11.seed2 & 65535) + (_this11.seed2 >> 16);
						var tmp4 = (((_this11.seed << 16) + _this11.seed2 | 0) & 1073741823) % 7 - 3;
						var _this12 = this.rnd;
						_this12.seed = 36969 * (_this12.seed & 65535) + (_this12.seed >> 16);
						_this12.seed2 = 18000 * (_this12.seed2 & 65535) + (_this12.seed2 >> 16);
						this.putBlock(x1,y1,Block.SandDetail,tmp4,-((((_this12.seed << 16) + _this12.seed2 | 0) & 1073741823) % 4));
					}
					break;
				case 14:
					var _this13 = this.rnd;
					_this13.seed = 36969 * (_this13.seed & 65535) + (_this13.seed >> 16);
					_this13.seed2 = 18000 * (_this13.seed2 & 65535) + (_this13.seed2 >> 16);
					var tmp5 = (((_this13.seed << 16) + _this13.seed2 | 0) & 1073741823) % 5 - 2;
					var _this14 = this.rnd;
					_this14.seed = 36969 * (_this14.seed & 65535) + (_this14.seed >> 16);
					_this14.seed2 = 18000 * (_this14.seed2 & 65535) + (_this14.seed2 >> 16);
					this.putBlock(x1,y1,b1,tmp5,-((((_this14.seed << 16) + _this14.seed2 | 0) & 1073741823) % 3),1);
					break;
				case 4:case 5:case 10:case 15:case 16:case 18:case 19:case 20:case 21:case 22:case 23:case 24:
					this.putBlock(x1,y1,b1);
					break;
				case 26:
					this.putBlock(x1,y1,Block.DungeonStairs);
					break;
				default:
				}
			}
		}
	}
	,putSingle: function(x,y,b,k) {
		var tl = this.tiles[b._hx_index - 1];
		if(tl == null || tl.length == 0) {
			throw new js__$Boot_HaxeError("Not tile for " + Std.string(b));
		}
		this.put(x * 16,y * 16,tl[k % tl.length]);
	}
	,putBlock: function(x,y,b,dx,dy,shade,mrnd) {
		if(mrnd == null) {
			mrnd = false;
		}
		if(shade == null) {
			shade = -1;
		}
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		var tx = x * 16 + dx;
		var ty = y * 16 + dy;
		var rem = this.details && this.removed[x][y];
		if(shade >= 0 && !rem) {
			this.put(tx,ty + 4,this.shadeTile[shade]);
		}
		var tl = this.tiles[b._hx_index - 1];
		var t;
		if(tl == null) {
			t = null;
		} else {
			var _this = this.rnd;
			_this.seed = 36969 * (_this.seed & 65535) + (_this.seed >> 16);
			_this.seed2 = 18000 * (_this.seed2 & 65535) + (_this.seed2 >> 16);
			var x1 = (((_this.seed << 16) + _this.seed2 | 0) & 1073741823) % tl.length;
			var y1;
			if(mrnd) {
				var _this1 = this.rnd;
				_this1.seed = 36969 * (_this1.seed & 65535) + (_this1.seed >> 16);
				_this1.seed2 = 18000 * (_this1.seed2 & 65535) + (_this1.seed2 >> 16);
				y1 = (((_this1.seed << 16) + _this1.seed2 | 0) & 1073741823) % tl.length;
			} else {
				y1 = 99;
			}
			t = tl[x1 < y1 ? x1 : y1];
		}
		if(t == null || tl.length == 0) {
			throw new js__$Boot_HaxeError("Not tile for " + Std.string(b));
		}
		if(this.details && rem) {
			this.removedBitmaps[x][y] = t;
		} else {
			this.put(tx,ty,t);
		}
	}
	,put: function(x,y,t) {
		var _this = this.root;
		_this.content.add(x,y,_this.curColor.x,_this.curColor.y,_this.curColor.z,_this.curColor.w,t);
	}
	,decodeColor: function(bmp,x,y) {
		var col = bmp.getPixel(x,y) & 16777215;
		switch(col) {
		case 146138:
			return Block.SavePoint;
		case 920334:
			return Block.DarkDungeon;
		case 1002753:
			return Block.FakeTree;
		case 1010945:
			return Block.Tree;
		case 2021890:
			return Block.Bush;
		case 3747129:
			return Block.DungeonFakeDark;
		case 5111226:
			return Block.DungeonPuzzle;
		case 5141584:
			return Block.DungeonStat;
		case 5791580:
			return Block.Dungeon;
		case 6618445:
			return Block.Field;
		case 6665467:
			return Block.Water;
		case 7324696:
			return Block.Cactus;
		case 7941377:
			return Block.BridgeUD;
		case 9079434:
			return Block.DungeonSoil;
		case 9613223:
			return Block.DungeonFakeWall;
		case 9910530:
			return Block.MonsterGenerator;
		case 10140828:
			return Block.DungeonExit;
		case 10395294:
			return Block.Rock;
		case 10907246:
			return Block.DungeonStairs;
		case 10945028:
			this.monsters.push({ x : x, y : y, id : EKind.Knight});
			return this.decodeColor(bmp,x,y - 1);
		case 12884248:
			return Block.Door;
		case 12966086:
			return Block.DungeonWall;
		case 14287365:
			this.monsters.push({ x : x, y : y, id : EKind.Monster});
			return this.decodeColor(bmp,x,y - 1);
		case 0:case 14287527:
			return Block.Dark;
		case 15094784:
			return Block.BridgeLR;
		case 15269197:
			return Block.Sand;
		case 16591662:
			this.monsters.push({ x : x, y : y, id : EKind.Bat});
			return this.decodeColor(bmp,x,y - 1);
		case 16600531:
			this.npcs.push({ x : x, y : y, e : null});
			return Block.Free;
		default:
			if((col & 16776960) == 16776960) {
				this.chests.push({ x : x, y : y, e : null, id : Type.createEnumIndex(ChestKind,col & 255)});
				return Block.Field;
			}
			throw new js__$Boot_HaxeError("Unknown color 0x" + StringTools.hex(col,6) + " at (" + x + "," + y + ")");
		}
	}
	,__class__: World
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + (xml.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + (xml.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + (xml.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + (xml.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + (xml.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,iterator: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		return new haxe_iterators_ArrayIterator(this.children);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,insertChild: function(x,pos) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this.nodeType)));
		}
		if(x.parent != null) {
			HxOverrides.remove(x.parent.children,x);
		}
		this.children.splice(pos,0,x);
		x.parent = this;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__ : "format.gif.Block", __constructs__ : ["BFrame","BExtension","BEOF"]
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["frame"],$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["extension"],$_)
	,BEOF: {_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__ : "format.gif.Extension", __constructs__ : ["EGraphicControl","EComment","EText","EApplicationExtension","EUnknown"]
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["gce"],$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["text"],$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["pte"],$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["ext"],$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__ : "format.gif.ApplicationExtension", __constructs__ : ["AENetscapeLooping","AEUnknown"]
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["loops"],$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["name","version","data"],$_)
};
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__ : "format.gif.Version", __constructs__ : ["GIF87a","GIF89a","Unknown"]
	,GIF87a: {_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr}; },$_.__params__ = ["version"],$_)
};
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__ : "format.gif.DisposalMethod", __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"]
	,UNSPECIFIED: {_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr}; },$_.__params__ = ["index"],$_)
};
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 73;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 70;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b3 = this.readBlock();
			blocks.add(b3);
			if(b3 == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i1 = 0;
		var code = 0;
		var last;
		while(i1 < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw new js__$Boot_HaxeError("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g2 = 0;
			while(_g2 < newRecord.length) {
				var item = newRecord[_g2];
				++_g2;
				pixels.b[i1++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i1 < pixelsCount) pixels.b[i1++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw new js__$Boot_HaxeError("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw new js__$Boot_HaxeError("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer1 = new haxe_io_BytesOutput();
			var bytes1 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len1 = this.i.readByte();
			while(len1 != 0) {
				this.i.readBytes(bytes1,0,len1);
				buffer1.writeBytes(bytes1,0,len1);
				len1 = this.i.readByte();
			}
			buffer1.flush();
			bytes1 = buffer1.getBytes();
			buffer1.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes1.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer2 = new haxe_io_BytesOutput();
			var bytes2 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len2 = this.i.readByte();
			while(len2 != 0) {
				this.i.readBytes(bytes2,0,len2);
				buffer2.writeBytes(bytes2,0,len2);
				len2 = this.i.readByte();
			}
			buffer2.flush();
			bytes2 = buffer2.getBytes();
			buffer2.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes2));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw new js__$Boot_HaxeError("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw new js__$Boot_HaxeError("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g11 = pixels.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
var format_mp3_SamplingRate = $hxEnums["format.mp3.SamplingRate"] = { __ename__ : "format.mp3.SamplingRate", __constructs__ : ["SR_8000","SR_11025","SR_12000","SR_22050","SR_24000","SR_32000","SR_44100","SR_48000","SR_Bad"]
	,SR_8000: {_hx_index:0,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_11025: {_hx_index:1,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_12000: {_hx_index:2,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_22050: {_hx_index:3,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_24000: {_hx_index:4,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_32000: {_hx_index:5,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_44100: {_hx_index:6,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_48000: {_hx_index:7,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_Bad: {_hx_index:8,__enum__:"format.mp3.SamplingRate",toString:$estr}
};
format_mp3_SamplingRate.__empty_constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
var format_mp3_Bitrate = $hxEnums["format.mp3.Bitrate"] = { __ename__ : "format.mp3.Bitrate", __constructs__ : ["BR_8","BR_16","BR_24","BR_32","BR_40","BR_48","BR_56","BR_64","BR_80","BR_96","BR_112","BR_128","BR_144","BR_160","BR_176","BR_192","BR_224","BR_256","BR_288","BR_320","BR_352","BR_384","BR_416","BR_448","BR_Free","BR_Bad"]
	,BR_8: {_hx_index:0,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_16: {_hx_index:1,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_24: {_hx_index:2,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_32: {_hx_index:3,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_40: {_hx_index:4,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_48: {_hx_index:5,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_56: {_hx_index:6,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_64: {_hx_index:7,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_80: {_hx_index:8,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_96: {_hx_index:9,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_112: {_hx_index:10,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_128: {_hx_index:11,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_144: {_hx_index:12,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_160: {_hx_index:13,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_176: {_hx_index:14,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_192: {_hx_index:15,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_224: {_hx_index:16,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_256: {_hx_index:17,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_288: {_hx_index:18,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_320: {_hx_index:19,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_352: {_hx_index:20,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_384: {_hx_index:21,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_416: {_hx_index:22,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_448: {_hx_index:23,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Free: {_hx_index:24,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Bad: {_hx_index:25,__enum__:"format.mp3.Bitrate",toString:$estr}
};
format_mp3_Bitrate.__empty_constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
var format_mp3_MPEG = function() { };
$hxClasses["format.mp3.MPEG"] = format_mp3_MPEG;
format_mp3_MPEG.__name__ = "format.mp3.MPEG";
format_mp3_MPEG.enum2Num = function(m) {
	switch(m._hx_index) {
	case 0:
		return 3;
	case 1:
		return 2;
	case 2:
		return 0;
	case 3:
		return format_mp3_MPEG.Reserved;
	}
};
format_mp3_MPEG.num2Enum = function(m) {
	switch(m) {
	case 0:
		return format_mp3_MPEGVersion.MPEG_V25;
	case 2:
		return format_mp3_MPEGVersion.MPEG_V2;
	case 3:
		return format_mp3_MPEGVersion.MPEG_V1;
	default:
		return format_mp3_MPEGVersion.MPEG_Reserved;
	}
};
format_mp3_MPEG.srEnum2Num = function(sr) {
	switch(sr._hx_index) {
	case 0:
		return 8000;
	case 1:
		return 11025;
	case 2:
		return 12000;
	case 3:
		return 22050;
	case 4:
		return 24000;
	case 5:
		return 32000;
	case 6:
		return 44100;
	case 7:
		return 48000;
	case 8:
		return -1;
	}
};
format_mp3_MPEG.bitrateEnum2Num = function(br) {
	switch(br._hx_index) {
	case 0:
		return 8;
	case 1:
		return 16;
	case 2:
		return 24;
	case 3:
		return 32;
	case 4:
		return 40;
	case 5:
		return 48;
	case 6:
		return 56;
	case 7:
		return 64;
	case 8:
		return 80;
	case 9:
		return 96;
	case 10:
		return 112;
	case 11:
		return 128;
	case 12:
		return 144;
	case 13:
		return 160;
	case 14:
		return 176;
	case 15:
		return 192;
	case 16:
		return 224;
	case 17:
		return 256;
	case 18:
		return 288;
	case 19:
		return 320;
	case 20:
		return 352;
	case 21:
		return 384;
	case 22:
		return 416;
	case 23:
		return 448;
	case 24:
		return 0;
	case 25:
		return -1;
	}
};
var format_mp3_CLayer = function() { };
$hxClasses["format.mp3.CLayer"] = format_mp3_CLayer;
format_mp3_CLayer.__name__ = "format.mp3.CLayer";
format_mp3_CLayer.num2Enum = function(l) {
	switch(l) {
	case 1:
		return format_mp3_Layer.Layer3;
	case 2:
		return format_mp3_Layer.Layer2;
	case 3:
		return format_mp3_Layer.Layer1;
	default:
		return format_mp3_Layer.LayerReserved;
	}
};
var format_mp3_CChannelMode = function() { };
$hxClasses["format.mp3.CChannelMode"] = format_mp3_CChannelMode;
format_mp3_CChannelMode.__name__ = "format.mp3.CChannelMode";
format_mp3_CChannelMode.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_ChannelMode.Stereo;
	case 1:
		return format_mp3_ChannelMode.JointStereo;
	case 2:
		return format_mp3_ChannelMode.DualChannel;
	case 3:
		return format_mp3_ChannelMode.Mono;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_CEmphasis = function() { };
$hxClasses["format.mp3.CEmphasis"] = format_mp3_CEmphasis;
format_mp3_CEmphasis.__name__ = "format.mp3.CEmphasis";
format_mp3_CEmphasis.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_Emphasis.NoEmphasis;
	case 1:
		return format_mp3_Emphasis.Ms50_15;
	case 2:
		return format_mp3_Emphasis.InvalidEmphasis;
	case 3:
		return format_mp3_Emphasis.CCIT_J17;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_MPEGVersion = $hxEnums["format.mp3.MPEGVersion"] = { __ename__ : "format.mp3.MPEGVersion", __constructs__ : ["MPEG_V1","MPEG_V2","MPEG_V25","MPEG_Reserved"]
	,MPEG_V1: {_hx_index:0,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V2: {_hx_index:1,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V25: {_hx_index:2,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_Reserved: {_hx_index:3,__enum__:"format.mp3.MPEGVersion",toString:$estr}
};
format_mp3_MPEGVersion.__empty_constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
var format_mp3_Layer = $hxEnums["format.mp3.Layer"] = { __ename__ : "format.mp3.Layer", __constructs__ : ["LayerReserved","Layer3","Layer2","Layer1"]
	,LayerReserved: {_hx_index:0,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer3: {_hx_index:1,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer2: {_hx_index:2,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer1: {_hx_index:3,__enum__:"format.mp3.Layer",toString:$estr}
};
format_mp3_Layer.__empty_constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
var format_mp3_ChannelMode = $hxEnums["format.mp3.ChannelMode"] = { __ename__ : "format.mp3.ChannelMode", __constructs__ : ["Stereo","JointStereo","DualChannel","Mono"]
	,Stereo: {_hx_index:0,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,JointStereo: {_hx_index:1,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,DualChannel: {_hx_index:2,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,Mono: {_hx_index:3,__enum__:"format.mp3.ChannelMode",toString:$estr}
};
format_mp3_ChannelMode.__empty_constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
var format_mp3_Emphasis = $hxEnums["format.mp3.Emphasis"] = { __ename__ : "format.mp3.Emphasis", __constructs__ : ["NoEmphasis","Ms50_15","CCIT_J17","InvalidEmphasis"]
	,NoEmphasis: {_hx_index:0,__enum__:"format.mp3.Emphasis",toString:$estr}
	,Ms50_15: {_hx_index:1,__enum__:"format.mp3.Emphasis",toString:$estr}
	,CCIT_J17: {_hx_index:2,__enum__:"format.mp3.Emphasis",toString:$estr}
	,InvalidEmphasis: {_hx_index:3,__enum__:"format.mp3.Emphasis",toString:$estr}
};
format_mp3_Emphasis.__empty_constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
var format_mp3_FrameType = $hxEnums["format.mp3.FrameType"] = { __ename__ : "format.mp3.FrameType", __constructs__ : ["FT_MP3","FT_NONE"]
	,FT_MP3: {_hx_index:0,__enum__:"format.mp3.FrameType",toString:$estr}
	,FT_NONE: {_hx_index:1,__enum__:"format.mp3.FrameType",toString:$estr}
};
format_mp3_FrameType.__empty_constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
var format_mp3_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.bits = new format_tools_BitsInput(i);
	this.samples = 0;
	this.sampleSize = 0;
	this.any_read = false;
};
$hxClasses["format.mp3.Reader"] = format_mp3_Reader;
format_mp3_Reader.__name__ = "format.mp3.Reader";
format_mp3_Reader.prototype = {
	skipID3v2: function() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		var size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	,seekFrame: function() {
		var found = false;
		try {
			var b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format_mp3_FrameType.FT_MP3;
					}
				}
			}
		} catch( ex ) {
			var ex1 = ((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex;
			if(((ex1) instanceof haxe_io_Eof)) {
				var ex2 = ex1;
				return format_mp3_FrameType.FT_NONE;
			} else {
				throw ex;
			}
		}
	}
	,readFrames: function() {
		var frames = [];
		var ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format_mp3_FrameType.FT_NONE)) {
				break;
			}
			switch(ft._hx_index) {
			case 0:
				var f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	,readFrameHeader: function() {
		var version = this.bits.readBits(2);
		var layer = this.bits.readBits(2);
		var hasCrc = !this.bits.readBit();
		if(version == format_mp3_MPEG.Reserved || layer == format_mp3_CLayer.LReserved) {
			return null;
		}
		var bitrateIdx = this.bits.readBits(4);
		var bitrate = format_mp3_Tools.getBitrate(version,layer,bitrateIdx);
		var samplingRateIdx = this.bits.readBits(2);
		var samplingRate = format_mp3_Tools.getSamplingRate(version,samplingRateIdx);
		var isPadded = this.bits.readBit();
		var privateBit = this.bits.readBit();
		if(bitrate == format_mp3_Bitrate.BR_Bad || bitrate == format_mp3_Bitrate.BR_Free || samplingRate == format_mp3_SamplingRate.SR_Bad) {
			return null;
		}
		var channelMode = this.bits.readBits(2);
		var isIntensityStereo = this.bits.readBit();
		var isMSStereo = this.bits.readBit();
		var isCopyrighted = this.bits.readBit();
		var isOriginal = this.bits.readBit();
		var emphasis = this.bits.readBits(2);
		var crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format_mp3_MPEG.num2Enum(version), layer : format_mp3_CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format_mp3_CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format_mp3_CEmphasis.num2Enum(emphasis)};
	}
	,readFrame: function() {
		var header = this.readFrameHeader();
		if(header == null || format_mp3_Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			var data = this.i.read(format_mp3_Tools.getSampleDataSizeHdr(header));
			this.samples += format_mp3_Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				return null;
			} else {
				throw e;
			}
		}
	}
	,read: function() {
		var fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
	,__class__: format_mp3_Reader
};
var format_mp3_Tools = function() { };
$hxClasses["format.mp3.Tools"] = format_mp3_Tools;
format_mp3_Tools.__name__ = "format.mp3.Tools";
format_mp3_Tools.getBitrate = function(mpegVersion,layerIdx,bitrateIdx) {
	if(mpegVersion == format_mp3_MPEG.Reserved || layerIdx == format_mp3_CLayer.LReserved) {
		return format_mp3_Bitrate.BR_Bad;
	}
	return (mpegVersion == 3 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
};
format_mp3_Tools.getSamplingRate = function(mpegVersion,samplingRateIdx) {
	return format_mp3_MPEG.SamplingRates[mpegVersion][samplingRateIdx];
};
format_mp3_Tools.isInvalidFrameHeader = function(hdr) {
	if(!(hdr.version == format_mp3_MPEGVersion.MPEG_Reserved || hdr.layer == format_mp3_Layer.LayerReserved || hdr.bitrate == format_mp3_Bitrate.BR_Bad || hdr.bitrate == format_mp3_Bitrate.BR_Free)) {
		return hdr.samplingRate == format_mp3_SamplingRate.SR_Bad;
	} else {
		return true;
	}
};
format_mp3_Tools.getSampleDataSize = function(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
	return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
};
format_mp3_Tools.getSampleDataSizeHdr = function(hdr) {
	return format_mp3_Tools.getSampleDataSize(format_mp3_MPEG.enum2Num(hdr.version),format_mp3_MPEG.bitrateEnum2Num(hdr.bitrate),format_mp3_MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
};
format_mp3_Tools.getSampleCount = function(mpegVersion) {
	if(mpegVersion == 3) {
		return 1152;
	} else {
		return 576;
	}
};
format_mp3_Tools.getSampleCountHdr = function(hdr) {
	return format_mp3_Tools.getSampleCount(format_mp3_MPEG.enum2Num(hdr.version));
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__ : "format.png.Color", __constructs__ : ["ColGrey","ColTrue","ColIndexed"]
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__ : "format.png.Chunk", __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"]
	,CEnd: {_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 80;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 78;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b3 = 71;
		if(this.i.readByte() != b3) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b4 = 13;
		if(this.i.readByte() != b4) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b5 = 10;
		if(this.i.readByte() != b5) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b6 = 26;
		if(this.i.readByte() != b6) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b7 = 10;
		if(this.i.readByte() != b7) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp1 = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp1;
			var tmp2 = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp2;
			var tmp3 = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp3;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp4 = (c_crc ^ b.bytes[i]) & 255;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp4;
			}
			if((c_crc ^ -1) != crc) {
				throw new js__$Boot_HaxeError("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw new js__$Boot_HaxeError("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g1 = h.color;
	switch(_g1._hx_index) {
	case 0:
		var alpha = _g1.alpha;
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val1 = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val1;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g11 = 0;
		var _g2 = h.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g12 = 0;
					var _g21 = width;
					while(_g12 < _g21) {
						var x = _g12++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g13 = 0;
					var _g22 = width;
					while(_g13 < _g22) {
						var x1 = _g13++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g14 = 0;
					var _g23 = width;
					while(_g14 < _g23) {
						var x2 = _g14++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g15 = 0;
					var _g24 = width;
					while(_g15 < _g24) {
						var x3 = _g15++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g16 = 0;
					var _g25 = width;
					while(_g16 < _g25) {
						var x4 = _g16++;
						var v2 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride1];
					}
				} else {
					var _g17 = 0;
					var _g26 = width;
					while(_g17 < _g26) {
						var x5 = _g17++;
						var v3 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride2 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g18 = 0;
					var _g27 = width;
					while(_g18 < _g27) {
						var x6 = _g18++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g19 = 0;
					var _g28 = width;
					while(_g19 < _g28) {
						var x7 = _g19++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride3 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g110 = 0;
					var _g29 = width;
					while(_g110 < _g29) {
						var x8 = _g110++;
						var b1 = y == 0 ? 0 : bgra.b[w - stride3];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k = cv2 + b1 - c1;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b1;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c1;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b1 : c1) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b2 = y == 0 ? 0 : bgra.b[w - stride3];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k1 = ca2 + b2 - c2;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b2;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c2;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b2 : c2) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g111 = 0;
					var _g210 = width;
					while(_g111 < _g210) {
						var x9 = _g111++;
						var b3 = y == 0 ? 0 : bgra.b[w - stride3];
						var c3 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k2 = cv2 + b3 - c3;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b3;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c3;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b3 : c3) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha1 = _g1.alpha;
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width1 = h.width;
		var stride4 = (alpha1 ? 4 : 3) * width1 + 1;
		if(data.length < h.height * stride4) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha1) {
			var _g1_head1 = d.h;
			while(_g1_head1 != null) {
				var val2 = _g1_head1.item;
				_g1_head1 = _g1_head1.next;
				var t1 = val2;
				if(t1._hx_index == 4) {
					if(t1.id == "tRNS") {
						var data2 = t1.data;
						if(data2.length >= 6) {
							alphaRed = data2.b[1];
							alphaGreen = data2.b[3];
							alphaBlue = data2.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca3 = 0;
		var _g112 = 0;
		var _g211 = h.height;
		while(_g112 < _g211) {
			var y1 = _g112++;
			var f1 = data.b[r++];
			switch(f1) {
			case 0:
				if(alpha1) {
					var _g113 = 0;
					var _g212 = width1;
					while(_g113 < _g212) {
						var x10 = _g113++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g114 = 0;
					var _g213 = width1;
					while(_g114 < _g213) {
						var x11 = _g114++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g115 = 0;
					var _g214 = width1;
					while(_g115 < _g214) {
						var x12 = _g115++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca3 += data.b[r + 3];
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g116 = 0;
					var _g215 = width1;
					while(_g116 < _g215) {
						var x13 = _g116++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride5 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g117 = 0;
					var _g216 = width1;
					while(_g117 < _g216) {
						var x14 = _g117++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride5];
						++w;
						r += 4;
					}
				} else {
					var _g118 = 0;
					var _g217 = width1;
					while(_g118 < _g217) {
						var x15 = _g118++;
						cb = data.b[r + 2] + bgra.b[w - stride5];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride5];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride5];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				var stride6 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g119 = 0;
					var _g218 = width1;
					while(_g119 < _g218) {
						var x16 = _g119++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr;
						ca3 = data.b[r + 3] + (ca3 + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g120 = 0;
					var _g219 = width1;
					while(_g120 < _g219) {
						var x17 = _g120++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride7 = width1 * 4 * flipY1;
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g121 = 0;
					var _g220 = width1;
					while(_g121 < _g220) {
						var x18 = _g121++;
						var b4 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c4 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k3 = cb + b4 - c4;
						var pa3 = k3 - cb;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b4;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c4;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						cb = (pa3 <= pb3 && pa3 <= pc3 ? cb : pb3 <= pc3 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c5 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k4 = cg + b5 - c5;
						var pa4 = k4 - cg;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b5;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c5;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cg = (pa4 <= pb4 && pa4 <= pc4 ? cg : pb4 <= pc4 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c6 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k5 = cr + b6 - c6;
						var pa5 = k5 - cr;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b6;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c6;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cr = (pa5 <= pb5 && pa5 <= pc5 ? cr : pb5 <= pc5 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b7 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c7 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k6 = ca3 + b7 - c7;
						var pa6 = k6 - ca3;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b7;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c7;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						ca3 = (pa6 <= pb6 && pa6 <= pc6 ? ca3 : pb6 <= pc6 ? b7 : c7) + data.b[r + 3] & 255;
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g122 = 0;
					var _g221 = width1;
					while(_g122 < _g221) {
						var x19 = _g122++;
						var b8 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c8 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k7 = cb + b8 - c8;
						var pa7 = k7 - cb;
						if(pa7 < 0) {
							pa7 = -pa7;
						}
						var pb7 = k7 - b8;
						if(pb7 < 0) {
							pb7 = -pb7;
						}
						var pc7 = k7 - c8;
						if(pc7 < 0) {
							pc7 = -pc7;
						}
						cb = (pa7 <= pb7 && pa7 <= pc7 ? cb : pb7 <= pc7 ? b8 : c8) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b9 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c9 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k8 = cg + b9 - c9;
						var pa8 = k8 - cg;
						if(pa8 < 0) {
							pa8 = -pa8;
						}
						var pb8 = k8 - b9;
						if(pb8 < 0) {
							pb8 = -pb8;
						}
						var pc8 = k8 - c9;
						if(pc8 < 0) {
							pc8 = -pc8;
						}
						cg = (pa8 <= pb8 && pa8 <= pc8 ? cg : pb8 <= pc8 ? b9 : c9) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b10 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c10 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k9 = cr + b10 - c10;
						var pa9 = k9 - cr;
						if(pa9 < 0) {
							pa9 = -pa9;
						}
						var pb9 = k9 - b10;
						if(pb9 < 0) {
							pb9 = -pb9;
						}
						var pc9 = k9 - c10;
						if(pc9 < 0) {
							pc9 = -pc9;
						}
						cr = (pa9 <= pb9 && pa9 <= pc9 ? cr : pb9 <= pc9 ? b10 : c10) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f1);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw new js__$Boot_HaxeError("PNG Palette is missing");
		}
		var alpha2 = null;
		var _g1_head2 = d.h;
		while(_g1_head2 != null) {
			var val3 = _g1_head2.item;
			_g1_head2 = _g1_head2.next;
			var t2 = val3;
			if(t2._hx_index == 4) {
				if(t2.id == "tRNS") {
					var data3 = t2.data;
					alpha2 = data3;
					break;
				}
			}
		}
		if(alpha2 != null && alpha2.length < 1 << h.colbits) {
			var alpha21 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha21.blit(0,alpha2,0,alpha2.length);
			alpha21.fill(alpha2.length,alpha21.length - alpha2.length,255);
			alpha2 = alpha21;
		}
		var width2 = h.width;
		var stride8 = Math.ceil(width2 * h.colbits / 8) + 1;
		if(data.length < h.height * stride8) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var tmp = h.width * h.colbits;
		var rline = tmp >> 3;
		var _g222 = 0;
		var _g3 = h.height;
		while(_g222 < _g3) {
			var y2 = _g222++;
			var f2 = data.b[r++];
			if(f2 == 0) {
				r += rline;
				continue;
			}
			switch(f2) {
			case 1:
				var c11 = 0;
				var _g223 = 0;
				var _g31 = width2;
				while(_g223 < _g31) {
					var x20 = _g223++;
					var v4 = data.b[r];
					c11 += v4;
					data.b[r++] = c11 & 255;
				}
				break;
			case 2:
				var stride9 = y2 == 0 ? 0 : rline + 1;
				var _g224 = 0;
				var _g32 = width2;
				while(_g224 < _g32) {
					var x21 = _g224++;
					var v5 = data.b[r];
					data.b[r] = v5 + data.b[r - stride9];
					++r;
				}
				break;
			case 3:
				var c12 = 0;
				var stride10 = y2 == 0 ? 0 : rline + 1;
				var _g225 = 0;
				var _g33 = width2;
				while(_g225 < _g33) {
					var x22 = _g225++;
					var v6 = data.b[r];
					c12 = v6 + (c12 + data.b[r - stride10] >> 1) & 255;
					data.b[r++] = c12;
				}
				break;
			case 4:
				var stride11 = rline + 1;
				var c13 = 0;
				var _g226 = 0;
				var _g34 = width2;
				while(_g226 < _g34) {
					var x23 = _g226++;
					var v7 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b11 = y2 == 0 ? 0 : data.b[r - stride11];
					var c14 = x23 == 0 || y2 == 0 ? 0 : data.b[r - stride11 - numChannels];
					var k10 = c13 + b11 - c14;
					var pa10 = k10 - c13;
					if(pa10 < 0) {
						pa10 = -pa10;
					}
					var pb10 = k10 - b11;
					if(pb10 < 0) {
						pb10 = -pb10;
					}
					var pc10 = k10 - c14;
					if(pc10 < 0) {
						pc10 = -pc10;
					}
					c13 = (pa10 <= pb10 && pa10 <= pc10 ? c13 : pb10 <= pc10 ? b11 : c14) + v7 & 255;
					data.b[r++] = c13;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f2);
			}
		}
		var r1 = 0;
		if(h.colbits == 8) {
			var _g4 = 0;
			var _g5 = h.height;
			while(_g4 < _g5) {
				var y3 = _g4++;
				++r1;
				var _g41 = 0;
				var _g51 = h.width;
				while(_g41 < _g51) {
					var x24 = _g41++;
					var c15 = data.b[r1++];
					bgra.b[w++] = pal.b[c15 * 3 + 2];
					bgra.b[w++] = pal.b[c15 * 3 + 1];
					bgra.b[w++] = pal.b[c15 * 3];
					bgra.b[w++] = alpha2 != null ? alpha2.b[c15] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g42 = 0;
			var _g52 = h.height;
			while(_g42 < _g52) {
				var y4 = _g42++;
				++r1;
				var bits = 0;
				var nbits = 0;
				var _g43 = 0;
				var _g53 = h.width;
				while(_g43 < _g53) {
					var x25 = _g43++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r1++];
						nbits += 8;
					}
					var c16 = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c16 * 3 + 2];
					bgra.b[w++] = pal.b[c16 * 3 + 1];
					bgra.b[w++] = pal.b[c16 * 3];
					bgra.b[w++] = alpha2 != null ? alpha2.b[c16] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__ : "format.tga.ImageOrigin", __constructs__ : ["BottomLeft","BottomRight","TopLeft","TopRight"]
	,BottomLeft: {_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__ : "format.tga.ImageType", __constructs__ : ["NoImage","UncompressedColorMapped","UncompressedTrueColor","UncompressedBlackAndWhite","RunLengthColorMapped","RunLengthTrueColor","RunLengthBlackAndWhite","Unknown"]
	,NoImage: {_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr}; },$_.__params__ = ["type"],$_)
};
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.tga.Reader"] = format_tga_Reader;
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw new js__$Boot_HaxeError("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_BitsInput = function(i) {
	this.i = i;
	this.nbits = 0;
	this.bits = 0;
};
$hxClasses["format.tools.BitsInput"] = format_tools_BitsInput;
format_tools_BitsInput.__name__ = "format.tools.BitsInput";
format_tools_BitsInput.prototype = {
	readBits: function(n) {
		if(this.nbits >= n) {
			var c = this.nbits - n;
			var k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		var k1 = this.i.readByte();
		if(this.nbits >= 24) {
			if(n > 31) {
				throw new js__$Boot_HaxeError("Bits error");
			}
			var c1 = 8 + this.nbits - n;
			var d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c1 | k1 << c1;
			this.bits = k1;
			this.nbits = c1;
			return d;
		}
		this.bits = this.bits << 8 | k1;
		this.nbits += 8;
		return this.readBits(n);
	}
	,readBit: function() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	,__class__: format_tools_BitsInput
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var format_wav_WAVEFormat = $hxEnums["format.wav.WAVEFormat"] = { __ename__ : "format.wav.WAVEFormat", __constructs__ : ["WF_PCM"]
	,WF_PCM: {_hx_index:0,__enum__:"format.wav.WAVEFormat",toString:$estr}
};
format_wav_WAVEFormat.__empty_constructs__ = [format_wav_WAVEFormat.WF_PCM];
var format_wav_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.wav.Reader"] = format_wav_Reader;
format_wav_Reader.__name__ = "format.wav.Reader";
format_wav_Reader.prototype = {
	read: function() {
		if(this.i.readString(4) != "RIFF") {
			throw new js__$Boot_HaxeError("RIFF header expected");
		}
		var len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw new js__$Boot_HaxeError("WAVE signature not found");
		}
		var fmt = this.i.readString(4);
		_hx_loop1: while(fmt != "fmt ") switch(fmt) {
		case "JUNK":
			var junkLen = this.i.readInt32();
			this.i.read(junkLen);
			fmt = this.i.readString(4);
			break;
		case "bext":
			var bextLen = this.i.readInt32();
			this.i.read(bextLen);
			fmt = this.i.readString(4);
			break;
		default:
			break _hx_loop1;
		}
		if(fmt != "fmt ") {
			throw new js__$Boot_HaxeError("unsupported wave chunk " + fmt);
		}
		var fmtlen = this.i.readInt32();
		var format1;
		switch(this.i.readUInt16()) {
		case 1:case 3:
			format1 = format_wav_WAVEFormat.WF_PCM;
			break;
		default:
			throw new js__$Boot_HaxeError("only PCM (uncompressed) WAV files are supported");
		}
		var channels = this.i.readUInt16();
		var samplingRate = this.i.readInt32();
		var byteRate = this.i.readInt32();
		var blockAlign = this.i.readUInt16();
		var bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		var nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw new js__$Boot_HaxeError("expected data subchunk");
		}
		var datalen = this.i.readInt32();
		var data;
		try {
			data = this.i.read(datalen);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				throw new js__$Boot_HaxeError("Invalid chunk data length");
			} else {
				throw e;
			}
		}
		var cuePoints = [];
		try {
			while(true) {
				var nextChunk1 = this.i.readString(4);
				if(nextChunk1 == "cue ") {
					this.i.readInt32();
					var nbCuePoints = this.i.readInt32();
					var _g1 = 0;
					var _g2 = nbCuePoints;
					while(_g1 < _g2) {
						var _ = _g1++;
						var cueId = this.i.readInt32();
						this.i.readInt32();
						this.i.readString(4);
						this.i.readInt32();
						this.i.readInt32();
						var cueSampleOffset = this.i.readInt32();
						cuePoints.push({ id : cueId, sampleOffset : cueSampleOffset});
					}
				} else {
					this.i.read(this.i.readInt32());
				}
			}
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof haxe_io_Eof)) {
				var e5 = e4;
			} else {
				throw e3;
			}
		}
		return { header : { format : format1, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data, cuePoints : cuePoints};
	}
	,__class__: format_wav_Reader
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	this.color = new h3d_Vector(1,1,1,1);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,set_colorKey: function(v) {
		var s = this.getShader(h3d_shader_ColorKey);
		if(s == null) {
			if(v != null) {
				s = this.addShader(new h3d_shader_ColorKey(-16777216 | v));
			}
		} else if(v == null) {
			this.removeShader(s);
		} else {
			var _this = s.colorKey__;
			var c = -16777216 | v;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
		}
		return this.colorKey = v;
	}
	,getShader: function(stype) {
		if(this.shaders != null) {
			var _g_l = this.shaders;
			var _g_last = null;
			while(_g_l != _g_last) {
				var s = _g_l.s;
				_g_l = _g_l.next;
				var s1 = s;
				var s2 = js_Boot.__downcastCheck(s1,stype) ? s1 : null;
				if(s2 != null) {
					return s2;
				}
			}
		}
		return null;
	}
	,addShader: function(s) {
		if(s == null) {
			throw new js__$Boot_HaxeError("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
		return;
	}
	,__class__: h2d_Drawable
});
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = tile;
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = "h2d.Bitmap";
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
		}
	}
	,draw: function(ctx) {
		this.emitTile(ctx,this.tile);
	}
	,__class__: h2d_Bitmap
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__ : "h2d.BlendMode", __constructs__ : ["None","Alpha","Add","AlphaAdd","SoftAdd","Multiply","AlphaMultiply","Erase","Screen","Sub","Max","Min"]
	,None: {_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = "h2d.Kerning";
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = "h2d.FontChar";
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,__class__: h2d_FontChar
};
var h2d_FontType = $hxEnums["h2d.FontType"] = { __ename__ : "h2d.FontType", __constructs__ : ["BitmapFont","SignedDistanceField"]
	,BitmapFont: {_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr}; },$_.__params__ = ["channel","alphaCutoff","smoothing"],$_)
};
h2d_FontType.__empty_constructs__ = [h2d_FontType.BitmapFont];
var h2d_Font = function(name,size,type) {
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = this.nullChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
	if(name != null) {
		this.tilePath = haxe_io_Path.withExtension(name,"png");
	}
	if(type == null) {
		this.type = h2d_FontType.BitmapFont;
	} else {
		this.type = type;
	}
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = "h2d.Font";
h2d_Font.prototype = {
	__class__: h2d_Font
};
var h2d_GPoint = function() {
};
$hxClasses["h2d.GPoint"] = h2d_GPoint;
h2d_GPoint.__name__ = "h2d.GPoint";
h2d_GPoint.prototype = {
	load: function(x,y,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
	,__class__: h2d_GPoint
};
var hxd_impl__$Serializable_NoSerializeSupport = function() { };
$hxClasses["hxd.impl._Serializable.NoSerializeSupport"] = hxd_impl__$Serializable_NoSerializeSupport;
hxd_impl__$Serializable_NoSerializeSupport.__name__ = "hxd.impl._Serializable.NoSerializeSupport";
hxd_impl__$Serializable_NoSerializeSupport.__isInterface__ = true;
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_prim_Primitive.prototype = {
	getBounds: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function(allocPos) {
	h3d_prim_Primitive.call(this);
	this.buffers = [];
	this.allocPos = allocPos;
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = "h2d._Graphics.GraphicsContent";
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null});
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat],this.allocPos);
		this.indexes = h3d_Indexes.alloc(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.isDisposed()) {
				b.vbuf = h3d_Buffer.ofFloats(b.buf,8,[h3d_BufferFlag.RawFormat]);
			}
			if(b.ibuf == null || b.ibuf.isDisposed()) {
				b.ibuf = h3d_Indexes.alloc(b.idx);
			}
		}
		this.bufferDirty = false;
		this.indexDirty = false;
	}
	,render: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			if(this.bufferDirty) {
				this.buffer.dispose();
				this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				this.indexes.dispose();
				this.indexes = h3d_Indexes.alloc(this.index);
				this.indexDirty = false;
			}
		}
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			engine.renderIndexed(b.vbuf,b.ibuf);
		}
		h3d_prim_Primitive.prototype.render.call(this,engine);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				b.vbuf.dispose();
			}
			if(b.ibuf != null) {
				b.ibuf.dispose();
			}
			b.vbuf = null;
			b.ibuf = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		this.buffers = [];
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent,allocPos) {
	this.bevel = 0.25;
	this.my = 0.;
	this.mx = 0.;
	this.md = 1.;
	this.mc = 0.;
	this.mb = 0.;
	this.ma = 1.;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent(allocPos);
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = "h2d.Graphics";
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g = 0;
		var _g1 = points.length;
		while(_g < _g1) {
			var i = _g++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			var gp = new h2d_GPoint();
			gp.load(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0);
			pts.push(gp);
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			var gp1 = new h2d_GPoint();
			gp1.load(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
			prev = gp1;
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				_this.bufferDirty = true;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				_this1.bufferDirty = true;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					var _this2 = this.content;
					_this2.index.push(this.pindex);
					_this2.indexDirty = true;
					var _this3 = this.content;
					_this3.index.push(this.pindex + 1);
					_this3.indexDirty = true;
					var _this4 = this.content;
					_this4.index.push(pnext);
					_this4.indexDirty = true;
					var _this5 = this.content;
					_this5.index.push(this.pindex + 1);
					_this5.indexDirty = true;
					var _this6 = this.content;
					_this6.index.push(pnext);
					_this6.indexDirty = true;
					var _this7 = this.content;
					_this7.index.push(pnext + 1);
					_this7.indexDirty = true;
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this8 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this8.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this8.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this8.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this8.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this8.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this8.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this8.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this8.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					_this8.bufferDirty = true;
					var _this9 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this9.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this9.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this9.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this9.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this9.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this9.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this9.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this9.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					_this9.bufferDirty = true;
					var _this10 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this10.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this10.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this10.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this10.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this10.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this10.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this10.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this10.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					_this10.bufferDirty = true;
					var _this11 = this.content;
					_this11.index.push(this.pindex);
					_this11.indexDirty = true;
					var _this12 = this.content;
					_this12.index.push(pnext1);
					_this12.indexDirty = true;
					var _this13 = this.content;
					_this13.index.push(this.pindex + 2);
					_this13.indexDirty = true;
					var _this14 = this.content;
					_this14.index.push(this.pindex + 2);
					_this14.indexDirty = true;
					var _this15 = this.content;
					_this15.index.push(pnext1);
					_this15.indexDirty = true;
					var _this16 = this.content;
					_this16.index.push(pnext1 + 1);
					_this16.indexDirty = true;
				} else {
					var _this17 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this17.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this17.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this17.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this17.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this17.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this17.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this17.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this17.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					_this17.bufferDirty = true;
					var _this18 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this18.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this18.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this18.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this18.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this18.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this18.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this18.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this18.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					_this18.bufferDirty = true;
					var _this19 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this19.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this19.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this19.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this19.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this19.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this19.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this19.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this19.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					_this19.bufferDirty = true;
					var _this20 = this.content;
					_this20.index.push(this.pindex + 1);
					_this20.indexDirty = true;
					var _this21 = this.content;
					_this21.index.push(pnext1);
					_this21.indexDirty = true;
					var _this22 = this.content;
					_this22.index.push(this.pindex + 2);
					_this22.indexDirty = true;
					var _this23 = this.content;
					_this23.index.push(this.pindex + 1);
					_this23.indexDirty = true;
					var _this24 = this.content;
					_this24.index.push(pnext1);
					_this24.indexDirty = true;
					var _this25 = this.content;
					_this25.index.push(pnext1 + 1);
					_this25.indexDirty = true;
				}
				var _this26 = this.content;
				_this26.index.push(this.pindex);
				_this26.indexDirty = true;
				var _this27 = this.content;
				_this27.index.push(this.pindex + 1);
				_this27.indexDirty = true;
				var _this28 = this.content;
				_this28.index.push(this.pindex + 2);
				_this28.indexDirty = true;
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f1 = p0.y - p1.y;
			tmp = (f1 < 0 ? -f1 : f1) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g = 1;
			var _g1 = pts.length - 1;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.content;
				_this.index.push(i0);
				_this.indexDirty = true;
				var _this1 = this.content;
				_this1.index.push(i0 + i);
				_this1.indexDirty = true;
				var _this2 = this.content;
				_this2.index.push(i0 + i + 1);
				_this2.indexDirty = true;
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g2 = 0;
			var _g11 = ear.triangulate_h2d_GPoint(pts);
			while(_g2 < _g11.length) {
				var i1 = _g11[_g2];
				++_g2;
				var _this3 = this.content;
				_this3.index.push(i1 + i0);
				_this3.indexDirty = true;
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		this.flush();
		var alpha1 = alpha;
		if(alpha1 == null) {
			alpha1 = 1.;
		}
		this.curA = alpha1;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
		this.doFill = true;
	}
	,drawRect: function(x,y,w,h) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var x1 = x + w;
		this.addVertex(x1,y,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y * this.mc + this.mx,x1 * this.mb + y * this.md + this.my);
		var x2 = x + w;
		var y1 = y + h;
		this.addVertex(x2,y1,this.curR,this.curG,this.curB,this.curA,x2 * this.ma + y1 * this.mc + this.mx,x2 * this.mb + y1 * this.md + this.my);
		var y2 = y + h;
		this.addVertex(x,y2,this.curR,this.curG,this.curB,this.curA,x * this.ma + y2 * this.mc + this.mx,x * this.mb + y2 * this.md + this.my);
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		this.flush();
	}
	,drawCircle: function(cx,cy,radius,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		this.flush();
		if(nsegments == 0) {
			var f = radius * 3.14 * 2 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 6.2831853071795862 / nsegments;
		var _g = 0;
		var _g1 = nsegments + 1;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			var x = cx + Math.cos(a) * radius;
			var y = cy + Math.sin(a) * radius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,drawEllipse: function(cx,cy,radiusX,radiusY,rotationAngle,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		if(rotationAngle == null) {
			rotationAngle = 0;
		}
		this.flush();
		if(nsegments == 0) {
			var f = radiusY * 3.14 * 2 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 6.2831853071795862 / nsegments;
		var x1;
		var y1;
		var _g = 0;
		var _g1 = nsegments + 1;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			x1 = Math.cos(a) * Math.cos(rotationAngle) * radiusX - Math.sin(a) * Math.sin(rotationAngle) * radiusY;
			y1 = Math.cos(rotationAngle) * Math.sin(a) * radiusY + Math.cos(a) * Math.sin(rotationAngle) * radiusX;
			var x = cx + x1;
			var y = cy + y1;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,addVertex: function(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(this.doFill) {
			var _this = this.content;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			var this2 = _this.tmp;
			if(this2.pos == this2.array.length) {
				var newSize1 = this2.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(this2.array);
				this2.array = newArray1;
			}
			this2.array[this2.pos++] = y;
			var this3 = _this.tmp;
			if(this3.pos == this3.array.length) {
				var newSize2 = this3.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(this3.array);
				this3.array = newArray2;
			}
			this3.array[this3.pos++] = u;
			var this4 = _this.tmp;
			if(this4.pos == this4.array.length) {
				var newSize3 = this4.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(this4.array);
				this4.array = newArray3;
			}
			this4.array[this4.pos++] = v;
			var this5 = _this.tmp;
			if(this5.pos == this5.array.length) {
				var newSize4 = this5.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(this5.array);
				this5.array = newArray4;
			}
			this5.array[this5.pos++] = r;
			var this6 = _this.tmp;
			if(this6.pos == this6.array.length) {
				var newSize5 = this6.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(this6.array);
				this6.array = newArray5;
			}
			this6.array[this6.pos++] = g;
			var this7 = _this.tmp;
			if(this7.pos == this7.array.length) {
				var newSize6 = this7.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(this7.array);
				this7.array = newArray6;
			}
			this7.array[this7.pos++] = b;
			var this8 = _this.tmp;
			if(this8.pos == this8.array.length) {
				var newSize7 = this8.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(this8.array);
				this8.array = newArray7;
			}
			this8.array[this8.pos++] = a;
			_this.bufferDirty = true;
		}
		var gp = new h2d_GPoint();
		gp.load(x,y,this.lineR,this.lineG,this.lineB,this.lineA);
		this.tmpPoints.push(gp);
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawObject(this,this.tile.innerTex)) {
			return;
		}
		this.content.render(ctx.engine);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		} else {
			if(_this.bufferDirty) {
				_this.buffer.dispose();
				_this.buffer = h3d_Buffer.ofFloats(_this.tmp,8,[h3d_BufferFlag.RawFormat]);
				_this.bufferDirty = false;
			}
			if(_this.indexDirty) {
				_this.indexes.dispose();
				_this.indexes = h3d_Indexes.alloc(_this.index);
				_this.indexDirty = false;
			}
		}
	}
	,__class__: h2d_Graphics
});
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_letterSpacing(1);
	this.set_lineSpacing(0);
	this.set_text("");
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = "h2d.Text";
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			var _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				var smoothing = _g.smoothing;
				var alphaCutoff = _g.alphaCutoff;
				var channel = _g.channel;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d_shader_SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				break;
			}
		}
		if(this.glyphs != null) {
			var _this1 = this.glyphs;
			if(_this1 != null && _this1.parent != null) {
				_this1.parent.removeChild(_this1);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,set_letterSpacing: function(s) {
		if(this.letterSpacing == s) {
			return s;
		}
		this.letterSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineSpacing: function(s) {
		if(this.lineSpacing == s) {
			return s;
		}
		this.lineSpacing = s;
		this.rebuild();
		return s;
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(!this.calcDone && this.text != null && this.font != null) {
			this.initGlyphs(this.text);
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this1 = this.color;
			var x = oldR;
			var y = oldG;
			var z = oldB;
			var w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this1.x = x;
			_this1.y = y;
			_this1.z = z;
			_this1.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.rebuild();
		return t1;
	}
	,rebuild: function() {
		this.calcDone = false;
		if(this.allocated && this.text != null && this.font != null) {
			this.initGlyphs(this.text);
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,splitText: function(text) {
		return this.splitRawText(text,0,0);
	}
	,splitRawText: function(text,leftMargin,afterData) {
		if(this.realMaxWidth < 0) {
			return text;
		}
		var lines = [];
		var rest = text;
		var restPos = 0;
		var x = leftMargin;
		var prevChar = -1;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(text,i);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			if(this.font.charset.isBreakChar(cc)) {
				if(lines.length == 0 && leftMargin > 0 && x > this.realMaxWidth) {
					lines.push("");
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = prevChar;
				var breakFound = false;
				while(size <= this.realMaxWidth && k < max) {
					var cc1 = HxOverrides.cca(text,k++);
					if(this.font.charset.isSpace(cc1) || cc1 == 10) {
						breakFound = true;
						break;
					}
					var _this1 = this.font;
					var c1 = _this1.glyphs.h[cc1];
					if(c1 == null) {
						c1 = _this1.charset.resolveChar(cc1,_this1.glyphs);
						if(c1 == null) {
							c1 = cc1 == 13 || cc1 == 10 ? _this1.nullChar : _this1.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					if(this.font.charset.isBreakChar(cc1)) {
						break;
					}
				}
				if(size > this.realMaxWidth || !breakFound && size + afterData > this.realMaxWidth) {
					newline = true;
					if(this.font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > this.realMaxWidth) {
				lines.push("");
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
		}
		return lines.join("\n");
	}
	,initGlyphs: function(text,rebuild,handleAlign,lines) {
		if(handleAlign == null) {
			handleAlign = true;
		}
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0.;
		var y = 0.;
		var xMax = 0.;
		var xMin = 0.;
		var prevChar = -1;
		var align = handleAlign ? this.textAlign : h2d_Align.Left;
		switch(align._hx_index) {
		case 1:case 2:case 3:case 4:
			lines = [];
			this.initGlyphs(text,false,false,lines);
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 1 : 0;
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				lines[i] = max - lines[i] >> k;
			}
			x = lines.shift();
			xMin = x;
			break;
		default:
		}
		var dl = this.font.lineHeight + this.lineSpacing;
		var calcLines = !handleAlign && !rebuild && lines != null;
		var yMin = 0.;
		var t = this.splitText(text);
		var _g2 = 0;
		var _g11 = t.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var cc = HxOverrides.cca(t,i1);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				if(calcLines) {
					lines.push(Math.ceil(x));
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines.shift();
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						var _this1 = this.glyphs;
						_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(calcLines) {
			lines.push(Math.ceil(x));
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
	}
	,get_textWidth: function() {
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		return this.calcWidth;
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight - this.calcYMin;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var h2d_HtmlText = function(font,parent) {
	this.elements = [];
	this.condenseWhite = true;
	h2d_Text.call(this,font,parent);
};
$hxClasses["h2d.HtmlText"] = h2d_HtmlText;
h2d_HtmlText.__name__ = "h2d.HtmlText";
h2d_HtmlText.__super__ = h2d_Text;
h2d_HtmlText.prototype = $extend(h2d_Text.prototype,{
	draw: function(ctx) {
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			if(this.dropMatrix == null) {
				this.dropMatrix = new h3d_shader_ColorMatrix();
			}
			this.addShader(this.dropMatrix);
			var m = this.dropMatrix.matrix__;
			m.zero();
			m._41 = (this.dropShadow.color >> 16 & 255) / 255;
			m._42 = (this.dropShadow.color >> 8 & 255) / 255;
			m._43 = (this.dropShadow.color & 255) / 255;
			m._44 = this.dropShadow.alpha;
			this.glyphs.drawWith(ctx,this);
			this.removeShader(this.dropMatrix);
			this.absX = oldX;
			this.absY = oldY;
		} else {
			this.dropMatrix = null;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,loadImage: function(url) {
		return null;
	}
	,loadFont: function(name) {
		return this.font;
	}
	,parseText: function(text) {
		try {
			return Xml.parse(text);
		} catch( e ) {
			throw new js__$Boot_HaxeError("Could not parse " + text + " (" + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e) + ")");
		}
	}
	,initGlyphs: function(text,rebuild,handleAlign,lines) {
		if(handleAlign == null) {
			handleAlign = true;
		}
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e != null && e.parent != null) {
					e.parent.removeChild(e);
				}
			}
			this.elements = [];
		}
		this.glyphs.setDefaultColor(this.textColor);
		this.xPos = 0;
		this.xMin = 0;
		var align = handleAlign ? this.textAlign : h2d_Align.Left;
		switch(align._hx_index) {
		case 1:case 2:case 3:case 4:
			lines = [];
			this.initGlyphs(text,false,false,lines);
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 1 : 0;
			var _g2 = 0;
			var _g11 = lines.length;
			while(_g2 < _g11) {
				var i = _g2++;
				lines[i] = max - lines[i] >> k;
			}
			this.xPos = lines.shift();
			this.xMin = this.xPos;
			break;
		default:
		}
		this.yPos = 0;
		this.xMax = 0;
		this.sizePos = 0;
		this.calcYMin = 0;
		var doc = this.parseText(text);
		var sizes = [];
		this.prevChar = -1;
		this.newLine = true;
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(doc.nodeType)));
		}
		var _g_current = 0;
		var _g_array = doc.children;
		while(_g_current < _g_array.length) {
			var e1 = _g_array[_g_current++];
			this.buildSizes(e1,this.font,sizes,false);
		}
		this.prevChar = -1;
		this.newLine = true;
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(doc.nodeType)));
		}
		var _g1_current = 0;
		var _g1_array = doc.children;
		while(_g1_current < _g1_array.length) {
			var e2 = _g1_array[_g1_current++];
			this.addNode(e2,this.font,rebuild,handleAlign,sizes,lines);
		}
		if(!handleAlign && !rebuild && lines != null) {
			lines.push(Math.ceil(this.xPos));
		}
		if(this.xPos > this.xMax) {
			this.xMax = this.xPos;
		}
		var y = this.yPos;
		this.calcXMin = this.xMin;
		this.calcWidth = this.xMax - this.xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
	}
	,buildSizes: function(e,font,sizes,forSplit) {
		if(e.nodeType == Xml.Element) {
			var len = 0.;
			if(e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (e.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e.nodeType)));
			}
			var nodeName = e.nodeName.toLowerCase();
			switch(nodeName) {
			case "b":case "bold":
				font = this.loadFont("bold");
				break;
			case "br":
				len = -1;
				this.newLine = true;
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v = e.get(a1);
					if(a1.toLowerCase() == "face") {
						font = this.loadFont(v);
					}
				}
				break;
			case "img":
				var i = this.loadImage(e.get("src"));
				len = (i == null ? 8 : i.width) + this.letterSpacing;
				this.newLine = false;
				break;
			case "i":case "italic":
				font = this.loadFont("italic");
				break;
			case "p":
				if(!this.newLine) {
					len = -1;
					this.newLine = true;
				}
				break;
			default:
			}
			sizes.push(len);
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (e.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e.nodeType)));
			}
			var _g_current = 0;
			var _g_array = e.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.buildSizes(child,font,sizes,forSplit);
			}
			if(nodeName == "p") {
				sizes.push(-1);
				this.newLine = true;
			}
		} else {
			this.newLine = false;
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + (e.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e.nodeType)));
			}
			var text = this.htmlToText(e.nodeValue);
			var xp = 0.;
			var _g = 0;
			var _g1 = text.length;
			while(_g < _g1) {
				var i1 = _g++;
				var cc = HxOverrides.cca(text,i1);
				var c = font.glyphs.h[cc];
				if(c == null) {
					c = font.charset.resolveChar(cc,font.glyphs);
					if(c == null) {
						c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
					}
				}
				var fc = c;
				var sz = fc.getKerningOffset(this.prevChar) + fc.width;
				if(cc == 10 || font.charset.isBreakChar(cc)) {
					if(cc != 10 && !font.charset.isSpace(cc)) {
						xp += sz;
					}
					if(!forSplit) {
						sizes.push(-(xp + 1));
						return;
					}
					sizes.push(xp);
					if(font.charset.isSpace(cc)) {
						sizes.push(sz);
					}
					xp = 0;
					continue;
				}
				xp += sz + this.letterSpacing;
			}
			sizes.push(xp);
		}
	}
	,htmlToText: function(t) {
		if(this.condenseWhite) {
			t = t.replace(h2d_HtmlText.REG_SPACES.r," ");
		}
		return t;
	}
	,remainingSize: function(sizes) {
		var size = 0.;
		var _g = this.sizePos;
		var _g1 = sizes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = sizes[i];
			if(s < 0) {
				size += -s - 1;
				return size;
			}
			size += s;
		}
		return size;
	}
	,splitText: function(text) {
		var _gthis = this;
		if(this.realMaxWidth < 0) {
			return text;
		}
		this.yPos = 0;
		this.xMax = 0;
		this.sizePos = 0;
		this.calcYMin = 0;
		var doc = this.parseText(text);
		var sizes = [];
		this.prevChar = -1;
		this.newLine = true;
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(doc.nodeType)));
		}
		var _g_current = 0;
		var _g_array = doc.children;
		while(_g_current < _g_array.length) {
			var e = _g_array[_g_current++];
			this.buildSizes(e,this.font,sizes,true);
		}
		this.xMax = 0;
		var addBreaks = null;
		addBreaks = function(e1) {
			if(e1.nodeType == Xml.Element) {
				var sz = sizes[_gthis.sizePos++];
				if(sz < 0) {
					_gthis.xMax = 0;
				} else {
					_gthis.xMax += sz;
				}
				if(e1.nodeType != Xml.Document && e1.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (e1.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e1.nodeType)));
				}
				var _g1_current = 0;
				var _g1_array = e1.children;
				while(_g1_current < _g1_array.length) {
					var x = _g1_array[_g1_current++];
					addBreaks(x);
				}
				if(e1.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (e1.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e1.nodeType)));
				}
				if(e1.nodeName == "p") {
					_gthis.sizePos++;
					_gthis.xMax = 0;
				}
			} else {
				if(e1.nodeType == Xml.Document || e1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + (e1.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e1.nodeType)));
				}
				var text1 = _gthis.htmlToText(e1.nodeValue);
				var startI = 0;
				var prevI = 0;
				var _g1 = 0;
				var _g2 = text1.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var cc = HxOverrides.cca(text1,i);
					if(cc == 10 || _gthis.font.charset.isBreakChar(cc)) {
						var sz1 = sizes[_gthis.sizePos++];
						var sp = _gthis.font.charset.isSpace(cc) ? sizes[_gthis.sizePos++] : 0;
						_gthis.xMax += sz1;
						if(_gthis.xMax > _gthis.realMaxWidth) {
							var index = Lambda.indexOf(e1.parent,e1);
							var pre = HxOverrides.substr(text1,startI,prevI - startI);
							if(pre != "") {
								e1.parent.insertChild(Xml.createPCData(pre),index++);
							}
							e1.parent.insertChild(Xml.createElement("br"),index);
							var v = HxOverrides.substr(text1,prevI + 1,null);
							if(e1.nodeType == Xml.Document || e1.nodeType == Xml.Element) {
								throw new js__$Boot_HaxeError("Bad node type, unexpected " + (e1.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e1.nodeType)));
							}
							e1.nodeValue = v;
							startI = prevI + 1;
							_gthis.xMax = sz1;
						}
						_gthis.xMax += sp + _gthis.letterSpacing;
						prevI = i;
					}
				}
				var sz2 = sizes[_gthis.sizePos++];
				_gthis.xMax += sz2;
				if(_gthis.xMax > _gthis.realMaxWidth) {
					e1.parent.insertChild(Xml.createElement("br"),Lambda.indexOf(e1.parent,e1));
					_gthis.xMax = sz2;
				}
			}
		};
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(doc.nodeType)));
		}
		var _g1_current1 = 0;
		var _g1_array1 = doc.children;
		while(_g1_current1 < _g1_array1.length) {
			var d = _g1_array1[_g1_current1++];
			addBreaks(d);
		}
		return haxe_xml_Printer.print(doc);
	}
	,addNode: function(e,font,rebuild,handleAlign,sizes,lines) {
		var _gthis = this;
		this.sizePos++;
		var calcLines = !handleAlign && !rebuild && lines != null;
		var align = handleAlign ? this.textAlign : h2d_Align.Left;
		if(e.nodeType == Xml.Element) {
			var prevColor = null;
			var prevGlyphs = null;
			var makeLineBreak = function() {
				if(_gthis.xPos > _gthis.xMax) {
					_gthis.xMax = _gthis.xPos;
				}
				if(calcLines) {
					lines.push(Math.ceil(_gthis.xPos));
				}
				switch(align._hx_index) {
				case 0:
					_gthis.xPos = 0;
					break;
				case 1:case 2:case 3:case 4:
					_gthis.xPos = lines.shift();
					if(_gthis.xPos < _gthis.xMin) {
						_gthis.xMin = _gthis.xPos;
					}
					break;
				}
				_gthis.yPos += font.lineHeight + _gthis.lineSpacing;
				_gthis.prevChar = -1;
				_gthis.newLine = true;
			};
			if(e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (e.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e.nodeType)));
			}
			var nodeName = e.nodeName.toLowerCase();
			switch(nodeName) {
			case "b":case "bold":
				font = _gthis.loadFont("bold");
				if(prevGlyphs == null) {
					prevGlyphs = _gthis.glyphs;
				}
				var prev = _gthis.glyphs;
				_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
				if(font != null) {
					var _g = font.type;
					if(_g._hx_index == 1) {
						var smoothing = _g.smoothing;
						var alphaCutoff = _g.alphaCutoff;
						var channel = _g.channel;
						var shader = new h3d_shader_SignedDistanceField();
						shader.constModified = true;
						shader.channel__ = channel;
						shader.alphaCutoff__ = alphaCutoff;
						shader.smoothing__ = smoothing;
						_gthis.glyphs.smooth = true;
						_gthis.glyphs.addShader(shader);
					}
				}
				var _this = _gthis.glyphs.curColor;
				var v = prev.curColor;
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				_this.w = v.w;
				_gthis.elements.push(_gthis.glyphs);
				break;
			case "br":
				makeLineBreak();
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v1 = e.get(a1);
					switch(a1.toLowerCase()) {
					case "color":
						if(prevColor == null) {
							var _this1 = this.glyphs.curColor;
							prevColor = new h3d_Vector(_this1.x,_this1.y,_this1.z,_this1.w);
						}
						if(HxOverrides.cca(v1,0) == 35 && v1.length == 4) {
							v1 = "#" + v1.charAt(1) + v1.charAt(1) + v1.charAt(2) + v1.charAt(2) + v1.charAt(3) + v1.charAt(3);
						}
						this.glyphs.setDefaultColor(Std.parseInt("0x" + HxOverrides.substr(v1,1,null)));
						break;
					case "face":
						font = _gthis.loadFont(v1);
						if(prevGlyphs == null) {
							prevGlyphs = _gthis.glyphs;
						}
						var prev1 = _gthis.glyphs;
						_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
						if(font != null) {
							var _g1 = font.type;
							if(_g1._hx_index == 1) {
								var smoothing1 = _g1.smoothing;
								var alphaCutoff1 = _g1.alphaCutoff;
								var channel1 = _g1.channel;
								var shader1 = new h3d_shader_SignedDistanceField();
								shader1.constModified = true;
								shader1.channel__ = channel1;
								shader1.alphaCutoff__ = alphaCutoff1;
								shader1.smoothing__ = smoothing1;
								_gthis.glyphs.smooth = true;
								_gthis.glyphs.addShader(shader1);
							}
						}
						var _this2 = _gthis.glyphs.curColor;
						var v2 = prev1.curColor;
						_this2.x = v2.x;
						_this2.y = v2.y;
						_this2.z = v2.z;
						_this2.w = v2.w;
						_gthis.elements.push(_gthis.glyphs);
						break;
					case "opacity":
						if(prevColor == null) {
							var _this3 = this.glyphs.curColor;
							prevColor = new h3d_Vector(_this3.x,_this3.y,_this3.z,_this3.w);
						}
						this.glyphs.curColor.w *= parseFloat(v1);
						break;
					default:
					}
				}
				break;
			case "img":
				this.newLine = false;
				var i = this.loadImage(e.get("src"));
				if(i == null) {
					i = h2d_Tile.fromColor(16711935,8,8);
				}
				if(this.realMaxWidth >= 0 && this.xPos + i.width + this.letterSpacing + this.remainingSize(sizes) > this.realMaxWidth && this.xPos > 0) {
					if(this.xPos > this.xMax) {
						this.xMax = this.xPos;
					}
					this.xPos = 0;
					this.yPos += font.lineHeight + this.lineSpacing;
				}
				var py = this.yPos + font.baseLine - i.height;
				if(py + i.dy < this.calcYMin) {
					this.calcYMin = py + i.dy;
				}
				if(rebuild) {
					var b = new h2d_Bitmap(i,this);
					b.posChanged = true;
					b.x = this.xPos;
					b.posChanged = true;
					b.y = py;
					this.elements.push(b);
				}
				this.xPos += i.width + this.letterSpacing;
				break;
			case "i":case "italic":
				font = _gthis.loadFont("italic");
				if(prevGlyphs == null) {
					prevGlyphs = _gthis.glyphs;
				}
				var prev2 = _gthis.glyphs;
				_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
				if(font != null) {
					var _g2 = font.type;
					if(_g2._hx_index == 1) {
						var smoothing2 = _g2.smoothing;
						var alphaCutoff2 = _g2.alphaCutoff;
						var channel2 = _g2.channel;
						var shader2 = new h3d_shader_SignedDistanceField();
						shader2.constModified = true;
						shader2.channel__ = channel2;
						shader2.alphaCutoff__ = alphaCutoff2;
						shader2.smoothing__ = smoothing2;
						_gthis.glyphs.smooth = true;
						_gthis.glyphs.addShader(shader2);
					}
				}
				var _this4 = _gthis.glyphs.curColor;
				var v3 = prev2.curColor;
				_this4.x = v3.x;
				_this4.y = v3.y;
				_this4.z = v3.z;
				_this4.w = v3.w;
				_gthis.elements.push(_gthis.glyphs);
				break;
			case "p":
				if(!this.newLine) {
					makeLineBreak();
				}
				break;
			default:
			}
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (e.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e.nodeType)));
			}
			var _g_current = 0;
			var _g_array = e.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.addNode(child,font,rebuild,handleAlign,sizes,lines);
			}
			if(nodeName == "p") {
				this.sizePos++;
				makeLineBreak();
			}
			if(prevGlyphs != null) {
				this.glyphs = prevGlyphs;
			}
			if(prevColor != null) {
				var _this5 = this.glyphs.curColor;
				_this5.x = prevColor.x;
				_this5.y = prevColor.y;
				_this5.z = prevColor.z;
				_this5.w = prevColor.w;
			}
		} else {
			this.newLine = false;
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + (e.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(e.nodeType)));
			}
			var t = this.splitRawText(this.htmlToText(e.nodeValue),this.xPos,this.remainingSize(sizes));
			var dy = this.font.baseLine - font.baseLine;
			var _g3 = 0;
			var _g11 = t.length;
			while(_g3 < _g11) {
				var i1 = _g3++;
				var cc = HxOverrides.cca(t,i1);
				if(cc == 10) {
					if(this.xPos > this.xMax) {
						this.xMax = this.xPos;
					}
					if(calcLines) {
						lines.push(Math.ceil(this.xPos));
					}
					switch(align._hx_index) {
					case 0:
						this.xPos = 0;
						break;
					case 1:case 2:case 3:case 4:
						this.xPos = lines.shift();
						if(this.xPos < this.xMin) {
							this.xMin = this.xPos;
						}
						break;
					}
					this.yPos += font.lineHeight + this.lineSpacing;
					this.prevChar = -1;
					continue;
				} else {
					var c = font.glyphs.h[cc];
					if(c == null) {
						c = font.charset.resolveChar(cc,font.glyphs);
						if(c == null) {
							c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var fc = c;
					if(fc != null) {
						this.xPos += fc.getKerningOffset(this.prevChar);
						if(rebuild) {
							var _this6 = this.glyphs;
							_this6.content.add(this.xPos,this.yPos + dy,_this6.curColor.x,_this6.curColor.y,_this6.curColor.z,_this6.curColor.w,fc.t);
						}
						if(this.yPos == 0 && fc.t.dy + dy < this.calcYMin) {
							this.calcYMin = fc.t.dy + dy;
						}
						this.xPos += fc.width + this.letterSpacing;
					}
					this.prevChar = cc;
				}
			}
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		this.rebuild();
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(forSize) {
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(((i) instanceof h2d_Bitmap)) {
					i.set_visible(false);
				}
			}
		}
		h2d_Text.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(forSize) {
			var _g2 = 0;
			var _g11 = this.elements;
			while(_g2 < _g11.length) {
				var i1 = _g11[_g2];
				++_g2;
				i1.set_visible(true);
			}
		}
	}
	,__class__: h2d_HtmlText
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h2d_Drawable.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Drawable;
h2d_Interactive.prototype = $extend(h2d_Drawable.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		this.updateMask();
		h2d_Drawable.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Drawable.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene.addEventTarget(this);
		}
		if(parentChanged) {
			this.updateMask();
		}
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.parentMask != null && this.checkBounds(e)) {
			var p = this.parentMask;
			var pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			var saveX = pt.x;
			var saveY = pt.y;
			while(p != null) {
				pt.x = saveX;
				pt.y = saveY;
				var pt1 = p.globalToLocal(pt);
				if(pt1.x < 0 || pt1.y < 0 || pt1.x > p.width || pt1.y > p.height) {
					e.cancel = true;
					return;
				}
				p = p.parentMask;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Drawable.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	addChild: function(s) {
		this.addChildAt(s,0);
	}
	,addChildAt: function(s,layer) {
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,under: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var pos = 0;
				var _g2 = 0;
				var _g11 = this.layersIndexes;
				while(_g2 < _g11.length) {
					var l = _g11[_g2];
					++_g2;
					if(l > i) {
						break;
					} else {
						pos = l;
					}
				}
				var p = i;
				while(p > pos) {
					this.children[p] = this.children[p - 1];
					--p;
				}
				this.children[pos] = s;
				if(s.allocated) {
					s.onHierarchyMoved(false);
				}
				return;
			}
		}
	}
	,ysort: function(layer) {
		if(layer >= this.layerCount) {
			return;
		}
		var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		var max = this.layersIndexes[layer];
		if(start == max) {
			return;
		}
		var pos = start;
		var ymax = this.children[pos++].y;
		while(pos < max) {
			var c = this.children[pos];
			if(c.y < ymax) {
				var p = pos - 1;
				while(p >= start) {
					var c2 = this.children[p];
					if(c.y >= c2.y) {
						break;
					}
					this.children[p + 1] = c2;
					--p;
				}
				this.children[p + 1] = c;
				if(c.allocated) {
					c.onHierarchyMoved(false);
				}
			} else {
				ymax = c.y;
			}
			++pos;
		}
	}
	,__class__: h2d_Layers
});
var h2d_Mask = function(width,height,parent) {
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
};
$hxClasses["h2d.Mask"] = h2d_Mask;
h2d_Mask.__name__ = "h2d.Mask";
h2d_Mask.__super__ = h2d_Object;
h2d_Mask.prototype = $extend(h2d_Object.prototype,{
	onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(parentChanged) {
			this.updateMask();
		}
	}
	,onAdd: function() {
		h2d_Object.prototype.onAdd.call(this);
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,0,0,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		var x1 = this.absX;
		var y1 = this.absY;
		var x2 = this.width * this.matA + this.height * this.matC + this.absX;
		var y2 = this.width * this.matB + this.height * this.matD + this.absY;
		var tmp;
		if(x1 > x2) {
			tmp = x1;
			x1 = x2;
			x2 = tmp;
		}
		if(y1 > y2) {
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		if(ctx.hasRenderZone) {
			var oldX = ctx.renderX;
			var oldY = ctx.renderY;
			var oldW = ctx.renderW;
			var oldH = ctx.renderH;
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Object.prototype.drawRec.call(this,ctx);
			ctx.setRenderZone(oldX,oldY,oldW,oldH);
		} else {
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Object.prototype.drawRec.call(this,ctx);
			ctx.hasRenderZone = false;
			ctx.engine.setRenderZone();
		}
	}
	,__class__: h2d_Mask
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache(this);
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.prototype = {
	dispose: function() {
		this.textures.dispose();
	}
	,__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.filterStack = [];
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	dispose: function() {
		h3d_impl_RenderContext.prototype.dispose.call(this);
		if(this.fixedBuffer != null) {
			this.fixedBuffer.dispose();
		}
	}
	,begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.curX = 0;
		this.curY = 0;
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.curWidth = this.scene.width;
		this.curHeight = this.scene.height;
		this.manager.globals.set("time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this1 = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = 0.;
		_this1.w = 1.;
		var _this2 = this.baseShader.viewport__;
		var x1 = -this.scene.width * 0.5 - this.scene.offsetX;
		var y1 = -this.scene.height * 0.5 - this.scene.offsetY;
		var z = 2 / this.scene.width * this.scene.ratioX;
		var w = -2 * this.baseFlipY / this.scene.height * this.scene.ratioY;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this2.x = x1;
		_this2.y = y1;
		_this2.z = z;
		_this2.w = w;
		var _this3 = this.baseShader.filterMatrixA__;
		var x2 = 1;
		var y2 = 0;
		var z1 = 0;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this3.x = x2;
		_this3.y = y2;
		_this3.z = z1;
		_this3.w = 1.;
		var _this4 = this.baseShader.filterMatrixB__;
		var x3 = 0;
		var y3 = 1;
		var z2 = 0;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this4.x = x3;
		_this4.y = y3;
		_this4.z = z2;
		_this4.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStackIndex != 0) {
			throw new js__$Boot_HaxeError("Missing popTarget()");
		}
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.filterStack.push(spr);
		this.inFilter = spr;
		return true;
	}
	,popFilter: function() {
		var spr = this.filterStack.pop();
		if(this.filterStack.length > 0) {
			this.inFilter = this.filterStack[this.filterStack.length - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this1 = this.baseShader.viewport__;
		var x1 = -width * 0.5 - startX;
		var y1 = -height * 0.5 - startY;
		var z = 2 / width;
		var w = -2 * this.targetFlipY / height;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z;
		_this1.w = w;
		this.targetsStackIndex++;
		if(this.targetsStackIndex > this.targetsStack.length) {
			this.targetsStack.push({ t : t, x : startX, y : startY, w : width, h : height, hasRZ : this.hasRenderZone, rzX : this.renderX, rzY : this.renderY, rzW : this.renderW, rzH : this.renderH});
		} else {
			var o = this.targetsStack[this.targetsStackIndex - 1];
			o.t = t;
			o.x = startX;
			o.y = startY;
			o.w = width;
			o.h = height;
			o.hasRZ = this.hasRenderZone;
			o.rzX = this.renderX;
			o.rzY = this.renderY;
			o.rzW = this.renderW;
			o.rzH = this.renderH;
		}
		this.curX = startX;
		this.curY = startY;
		this.curWidth = width;
		this.curHeight = height;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,popTarget: function(restore) {
		if(restore == null) {
			restore = true;
		}
		if(this.targetsStackIndex <= 0) {
			throw new js__$Boot_HaxeError("Too many popTarget()");
		}
		var pinf = this.targetsStack[--this.targetsStackIndex];
		this.engine.popTarget();
		if(restore) {
			var tinf = this.targetsStack[this.targetsStackIndex - 1];
			var t;
			var startX;
			var startY;
			var width;
			var height;
			var ratioX;
			var ratioY;
			var offsetX;
			var offsetY;
			if(tinf == null) {
				t = null;
				startX = 0;
				startY = 0;
				width = this.scene.width;
				height = this.scene.height;
				ratioX = this.scene.ratioX;
				ratioY = this.scene.ratioY;
				offsetX = this.scene.offsetX;
				offsetY = this.scene.offsetY;
			} else {
				t = tinf.t;
				startX = tinf.x;
				startY = tinf.y;
				width = tinf.w;
				height = tinf.h;
				ratioX = 1;
				ratioY = 1;
				offsetX = 0;
				offsetY = 0;
			}
			this.initShaders(this.baseShaderList);
			var _this = this.baseShader.halfPixelInverse__;
			var x = 0.5 / (t == null ? this.engine.width : t.width);
			var y = 0.5 / (t == null ? this.engine.height : t.height);
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			var _this1 = this.baseShader.viewport__;
			var x1 = -width * 0.5 - startX - offsetX;
			var y1 = -height * 0.5 - startY - offsetY;
			var z = 2 / width * ratioX;
			var w = -2 * (t == null ? this.baseFlipY : this.targetFlipY) / height * ratioY;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z;
			_this1.w = w;
			this.curX = startX;
			this.curY = startY;
			this.curWidth = width;
			this.curHeight = height;
		}
		if(pinf.hasRZ) {
			this.setRenderZone(pinf.rzX,pinf.rzY,pinf.rzW,pinf.rzH);
		}
	}
	,setRenderZone: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.engine.width * this.scene.ratioX / this.scene.width;
		var scaleY = this.engine.height * this.scene.ratioY / this.scene.height;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone((x - this.curX + this.scene.viewportX) * scaleX + 1e-10 | 0,(y - this.curY + this.scene.viewportY) * scaleY + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	,beginDrawObject: function(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this1 = this.baseShader.color__;
			var x1 = this.globalAlpha;
			var y1 = this.globalAlpha;
			var z1 = this.globalAlpha;
			var w1 = this.globalAlpha;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = w1;
		} else {
			var _this2 = this.baseShader.color__;
			var x2 = obj.color.x;
			var y2 = obj.color.y;
			var z2 = obj.color.z;
			var w2 = obj.color.w * this.globalAlpha;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = z2;
			_this2.w = w2;
		}
		var _this3 = this.baseShader.absoluteMatrixA__;
		var x3 = obj.matA;
		var y3 = obj.matC;
		var z3 = obj.absX;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this3.x = x3;
		_this3.y = y3;
		_this3.z = z3;
		_this3.w = 1.;
		var _this4 = this.baseShader.absoluteMatrixB__;
		var x4 = obj.matB;
		var y4 = obj.matD;
		var z4 = obj.absY;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		_this4.x = x4;
		_this4.y = y4;
		_this4.z = z4;
		_this4.w = 1.;
		this.beforeDraw();
		return true;
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			matA = obj.matA * f1.x + obj.matB * f1.y;
			matB = obj.matA * f2.x + obj.matB * f2.y;
			matC = obj.matC * f1.x + obj.matD * f1.y;
			matD = obj.matC * f2.x + obj.matD * f2.y;
			absX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			absY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
		} else {
			matA = obj.matA;
			matB = obj.matB;
			matC = obj.matC;
			matD = obj.matD;
			absX = obj.absX;
			absY = obj.absY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var f = obj.matA;
			var a = f < 0 ? -f : f;
			var f3 = obj.matD;
			var b = f3 < 0 ? -f3 : f3;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA - this.curX;
			var cy = absY + ty * matD - this.curY;
			if(cx < -tr || cy < -tr || cx - tr > this.curWidth || cy - tr > this.curHeight) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px1 = (x + tile.dx) * matA + tile.dy * matC;
			var py1 = (x + tile.dx) * matB + tile.dy * matD;
			if(px1 < xMin) {
				xMin = px1;
			}
			if(px1 > xMax) {
				xMax = px1;
			}
			if(py1 < yMin) {
				yMin = py1;
			}
			if(py1 > yMax) {
				yMax = py1;
			}
			var y = tile.height;
			var px2 = tile.dx * matA + (y + tile.dy) * matC;
			var py2 = tile.dx * matB + (y + tile.dy) * matD;
			if(px2 < xMin) {
				xMin = px2;
			}
			if(px2 > xMax) {
				xMax = px2;
			}
			if(py2 < yMin) {
				yMin = py2;
			}
			if(py2 > yMax) {
				yMax = py2;
			}
			var x1 = tile.width;
			var y1 = tile.height;
			var px3 = (x1 + tile.dx) * matA + (y1 + tile.dy) * matC;
			var py3 = (x1 + tile.dx) * matB + (y1 + tile.dy) * matD;
			if(px3 < xMin) {
				xMin = px3;
			}
			if(px3 > xMax) {
				xMax = px3;
			}
			if(py3 < yMin) {
				yMin = py3;
			}
			if(py3 > yMax) {
				yMax = py3;
			}
			var cx1 = absX - this.curX;
			var cy1 = absY - this.curY;
			if(cx1 + xMax < 0 || cy1 + yMax < 0 || cx1 + xMin > this.curWidth || cy1 + yMin > this.curHeight) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x2 = obj.color.x;
			var y2 = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this.x = x2;
			_this.y = y2;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this1 = this.baseShader.color__;
			var x3 = this.globalAlpha;
			var y3 = this.globalAlpha;
			var z1 = this.globalAlpha;
			var w1 = this.globalAlpha;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			_this1.x = x3;
			_this1.y = y3;
			_this1.z = z1;
			_this1.w = w1;
		} else {
			var _this2 = this.baseShader.color__;
			var x4 = obj.color.x;
			var y4 = obj.color.y;
			var z2 = obj.color.z;
			var w2 = obj.color.w * this.globalAlpha;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			_this2.x = x4;
			_this2.y = y4;
			_this2.z = z2;
			_this2.w = w2;
		}
		var _this3 = this.baseShader.absoluteMatrixA__;
		var x5 = tile.width * obj.matA;
		var y5 = tile.height * obj.matC;
		var z3 = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		_this3.x = x5;
		_this3.y = y5;
		_this3.z = z3;
		_this3.w = 1.;
		var _this4 = this.baseShader.absoluteMatrixB__;
		var x6 = tile.width * obj.matB;
		var y6 = tile.height * obj.matD;
		var z4 = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		_this4.x = x6;
		_this4.y = y6;
		_this4.z = z4;
		_this4.w = 1.;
		var _this5 = this.baseShader.uvPos__;
		var x7 = tile.u;
		var y7 = tile.v;
		var z5 = tile.u2 - tile.u;
		var w3 = tile.v2 - tile.v;
		if(w3 == null) {
			w3 = 1.;
		}
		if(z5 == null) {
			z5 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		_this5.x = x7;
		_this5.y = y7;
		_this5.z = z5;
		_this5.w = w3;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.isDisposed()) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			var k = this1;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v1 = 0;
			if(k.pos == k.array.length) {
				var newSize1 = k.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(k.array);
				k.array = newArray1;
			}
			k.array[k.pos++] = v1;
			var v2 = 0;
			if(k.pos == k.array.length) {
				var newSize2 = k.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(k.array);
				k.array = newArray2;
			}
			k.array[k.pos++] = v2;
			var v3 = 0;
			if(k.pos == k.array.length) {
				var newSize3 = k.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(k.array);
				k.array = newArray3;
			}
			k.array[k.pos++] = v3;
			var v4 = 1;
			if(k.pos == k.array.length) {
				var newSize4 = k.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(k.array);
				k.array = newArray4;
			}
			k.array[k.pos++] = v4;
			var v5 = 1;
			if(k.pos == k.array.length) {
				var newSize5 = k.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(k.array);
				k.array = newArray5;
			}
			k.array[k.pos++] = v5;
			var v6 = 1;
			if(k.pos == k.array.length) {
				var newSize6 = k.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(k.array);
				k.array = newArray6;
			}
			k.array[k.pos++] = v6;
			var v7 = 1;
			if(k.pos == k.array.length) {
				var newSize7 = k.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(k.array);
				k.array = newArray7;
			}
			k.array[k.pos++] = v7;
			var v8 = 0;
			if(k.pos == k.array.length) {
				var newSize8 = k.array.length << 1;
				if(newSize8 < 128) {
					newSize8 = 128;
				}
				var newArray8 = new Float32Array(newSize8);
				newArray8.set(k.array);
				k.array = newArray8;
			}
			k.array[k.pos++] = v8;
			var v9 = 1;
			if(k.pos == k.array.length) {
				var newSize9 = k.array.length << 1;
				if(newSize9 < 128) {
					newSize9 = 128;
				}
				var newArray9 = new Float32Array(newSize9);
				newArray9.set(k.array);
				k.array = newArray9;
			}
			k.array[k.pos++] = v9;
			var v10 = 0;
			if(k.pos == k.array.length) {
				var newSize10 = k.array.length << 1;
				if(newSize10 < 128) {
					newSize10 = 128;
				}
				var newArray10 = new Float32Array(newSize10);
				newArray10.set(k.array);
				k.array = newArray10;
			}
			k.array[k.pos++] = v10;
			var v11 = 1;
			if(k.pos == k.array.length) {
				var newSize11 = k.array.length << 1;
				if(newSize11 < 128) {
					newSize11 = 128;
				}
				var newArray11 = new Float32Array(newSize11);
				newArray11.set(k.array);
				k.array = newArray11;
			}
			k.array[k.pos++] = v11;
			var v12 = 1;
			if(k.pos == k.array.length) {
				var newSize12 = k.array.length << 1;
				if(newSize12 < 128) {
					newSize12 = 128;
				}
				var newArray12 = new Float32Array(newSize12);
				newArray12.set(k.array);
				k.array = newArray12;
			}
			k.array[k.pos++] = v12;
			var v13 = 1;
			if(k.pos == k.array.length) {
				var newSize13 = k.array.length << 1;
				if(newSize13 < 128) {
					newSize13 = 128;
				}
				var newArray13 = new Float32Array(newSize13);
				newArray13.set(k.array);
				k.array = newArray13;
			}
			k.array[k.pos++] = v13;
			var v14 = 1;
			if(k.pos == k.array.length) {
				var newSize14 = k.array.length << 1;
				if(newSize14 < 128) {
					newSize14 = 128;
				}
				var newArray14 = new Float32Array(newSize14);
				newArray14.set(k.array);
				k.array = newArray14;
			}
			k.array[k.pos++] = v14;
			var v15 = 1;
			if(k.pos == k.array.length) {
				var newSize15 = k.array.length << 1;
				if(newSize15 < 128) {
					newSize15 = 128;
				}
				var newArray15 = new Float32Array(newSize15);
				newArray15.set(k.array);
				k.array = newArray15;
			}
			k.array[k.pos++] = v15;
			var v16 = 1;
			if(k.pos == k.array.length) {
				var newSize16 = k.array.length << 1;
				if(newSize16 < 128) {
					newSize16 = 128;
				}
				var newArray16 = new Float32Array(newSize16);
				newArray16.set(k.array);
				k.array = newArray16;
			}
			k.array[k.pos++] = v16;
			var v17 = 0;
			if(k.pos == k.array.length) {
				var newSize17 = k.array.length << 1;
				if(newSize17 < 128) {
					newSize17 = 128;
				}
				var newArray17 = new Float32Array(newSize17);
				newArray17.set(k.array);
				k.array = newArray17;
			}
			k.array[k.pos++] = v17;
			var v18 = 1;
			if(k.pos == k.array.length) {
				var newSize18 = k.array.length << 1;
				if(newSize18 < 128) {
					newSize18 = 128;
				}
				var newArray18 = new Float32Array(newSize18);
				newArray18.set(k.array);
				k.array = newArray18;
			}
			k.array[k.pos++] = v18;
			var v19 = 0;
			if(k.pos == k.array.length) {
				var newSize19 = k.array.length << 1;
				if(newSize19 < 128) {
					newSize19 = 128;
				}
				var newArray19 = new Float32Array(newSize19);
				newArray19.set(k.array);
				k.array = newArray19;
			}
			k.array[k.pos++] = v19;
			var v20 = 1;
			if(k.pos == k.array.length) {
				var newSize20 = k.array.length << 1;
				if(newSize20 < 128) {
					newSize20 = 128;
				}
				var newArray20 = new Float32Array(newSize20);
				newArray20.set(k.array);
				k.array = newArray20;
			}
			k.array[k.pos++] = v20;
			var v21 = 1;
			if(k.pos == k.array.length) {
				var newSize21 = k.array.length << 1;
				if(newSize21 < 128) {
					newSize21 = 128;
				}
				var newArray21 = new Float32Array(newSize21);
				newArray21.set(k.array);
				k.array = newArray21;
			}
			k.array[k.pos++] = v21;
			var v22 = 1;
			if(k.pos == k.array.length) {
				var newSize22 = k.array.length << 1;
				if(newSize22 < 128) {
					newSize22 = 128;
				}
				var newArray22 = new Float32Array(newSize22);
				newArray22.set(k.array);
				k.array = newArray22;
			}
			k.array[k.pos++] = v22;
			var v23 = 1;
			if(k.pos == k.array.length) {
				var newSize23 = k.array.length << 1;
				if(newSize23 < 128) {
					newSize23 = 128;
				}
				var newArray23 = new Float32Array(newSize23);
				newArray23.set(k.array);
				k.array = newArray23;
			}
			k.array[k.pos++] = v23;
			var v24 = 1;
			if(k.pos == k.array.length) {
				var newSize24 = k.array.length << 1;
				if(newSize24 < 128) {
					newSize24 = 128;
				}
				var newArray24 = new Float32Array(newSize24);
				newArray24.set(k.array);
				k.array = newArray24;
			}
			k.array[k.pos++] = v24;
			var v25 = 1;
			if(k.pos == k.array.length) {
				var newSize25 = k.array.length << 1;
				if(newSize25 < 128) {
					newSize25 = 128;
				}
				var newArray25 = new Float32Array(newSize25);
				newArray25.set(k.array);
				k.array = newArray25;
			}
			k.array[k.pos++] = v25;
			var v26 = 1;
			if(k.pos == k.array.length) {
				var newSize26 = k.array.length << 1;
				if(newSize26 < 128) {
					newSize26 = 128;
				}
				var newArray26 = new Float32Array(newSize26);
				newArray26.set(k.array);
				k.array = newArray26;
			}
			k.array[k.pos++] = v26;
			var v27 = 1;
			if(k.pos == k.array.length) {
				var newSize27 = k.array.length << 1;
				if(newSize27 < 128) {
					newSize27 = 128;
				}
				var newArray27 = new Float32Array(newSize27);
				newArray27.set(k.array);
				k.array = newArray27;
			}
			k.array[k.pos++] = v27;
			var v28 = 1;
			if(k.pos == k.array.length) {
				var newSize28 = k.array.length << 1;
				if(newSize28 < 128) {
					newSize28 = 128;
				}
				var newArray28 = new Float32Array(newSize28);
				newArray28.set(k.array);
				k.array = newArray28;
			}
			k.array[k.pos++] = v28;
			var v29 = 1;
			if(k.pos == k.array.length) {
				var newSize29 = k.array.length << 1;
				if(newSize29 < 128) {
					newSize29 = 128;
				}
				var newArray29 = new Float32Array(newSize29);
				newArray29.set(k.array);
				k.array = newArray29;
			}
			k.array[k.pos++] = v29;
			var v30 = 1;
			if(k.pos == k.array.length) {
				var newSize30 = k.array.length << 1;
				if(newSize30 < 128) {
					newSize30 = 128;
				}
				var newArray30 = new Float32Array(newSize30);
				newArray30.set(k.array);
				k.array = newArray30;
			}
			k.array[k.pos++] = v30;
			var v31 = 1;
			if(k.pos == k.array.length) {
				var newSize31 = k.array.length << 1;
				if(newSize31 < 128) {
					newSize31 = 128;
				}
				var newArray31 = new Float32Array(newSize31);
				newArray31.set(k.array);
				k.array = newArray31;
			}
			k.array[k.pos++] = v31;
			this.fixedBuffer.uploadVector(k,0,4);
		}
		var _this6 = this.engine;
		_this6.renderBuffer(this.fixedBuffer,_this6.mem.quadIndexes,2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this1 = this.baseShader;
			_this1.constModified = true;
			_this1.isRelative__ = isRelative;
			var _this2 = this.baseShader;
			_this2.constModified = true;
			_this2.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw new js__$Boot_HaxeError("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__ : "h2d.ScaleModeAlign", __constructs__ : ["Left","Right","Center","Top","Bottom"]
	,Left: {_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__ : "h2d.ScaleMode", __constructs__ : ["Resize","Stretch","LetterBox","Fixed","Zoom","AutoZoom"]
	,Resize: {_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this.width = e.width;
	this.height = e.height;
	this.offsetX = 0;
	this.offsetY = 0;
	this.ratioX = 1;
	this.ratioY = 1;
	this.viewportX = 0;
	this.viewportY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_Point();
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 1:
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 2:
			var verticalAlign = _g.verticalAlign;
			var horizontalAlign = _g.horizontalAlign;
			var integerScale = _g.integerScale;
			var _height1 = _g.height;
			var _width1 = _g.width;
			if(_width1 != _gthis.width || _height1 != _gthis.height) {
				_gthis.width = _width1;
				_gthis.height = _height1;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width1;
			var b = engine.height / _height1;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			_gthis.ratioX = _gthis.width * zoom / engine.width;
			_gthis.ratioY = _gthis.height * zoom / engine.height;
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom) / (2 * zoom);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / (2 * zoom));
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / zoom;
				break;
			default:
				_gthis.offsetX = 0;
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / (2 * zoom);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom) / (2 * zoom);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / (2 * zoom));
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / zoom;
				break;
			default:
				_gthis.offsetY = 0;
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / (2 * zoom);
			}
			break;
		case 3:
			var verticalAlign1 = _g.verticalAlign;
			var horizontalAlign1 = _g.horizontalAlign;
			var zoom1 = _g.zoom;
			var _height2 = _g.height;
			var _width2 = _g.width;
			if(_width2 != _gthis.width || _height2 != _gthis.height) {
				_gthis.width = _width2;
				_gthis.height = _height2;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom1 / engine.width;
			_gthis.ratioY = _gthis.height * zoom1 / engine.height;
			var horizontal1 = horizontalAlign1;
			var vertical1 = verticalAlign1;
			if(horizontal1 == null) {
				horizontal1 = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal1._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom1) / (2 * zoom1);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom1) / (2 * zoom1));
				_gthis.viewportX = (engine.width - _gthis.width * zoom1) / zoom1;
				break;
			default:
				_gthis.offsetX = 0;
				_gthis.viewportX = (engine.width - _gthis.width * zoom1) / (2 * zoom1);
			}
			if(vertical1 == null) {
				vertical1 = h2d_ScaleModeAlign.Center;
			}
			switch(vertical1._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom1) / (2 * zoom1);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom1) / (2 * zoom1));
				_gthis.viewportY = (engine.height - _gthis.height * zoom1) / zoom1;
				break;
			default:
				_gthis.offsetY = 0;
				_gthis.viewportY = (engine.height - _gthis.height * zoom1) / (2 * zoom1);
			}
			break;
		case 4:
			var level = _g.level;
			var w1 = Math.ceil(engine.width / level);
			var h1 = Math.ceil(engine.height / level);
			if(w1 != _gthis.width || h1 != _gthis.height) {
				_gthis.width = w1;
				_gthis.height = h1;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * level / engine.width;
			_gthis.ratioY = _gthis.height * level / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 5:
			var integerScaling = _g.integerScaling;
			var minHeight = _g.minHeight;
			var minWidth = _g.minWidth;
			var a1 = engine.width / minWidth;
			var b1 = engine.height / minHeight;
			var zoom2 = a1 > b1 ? b1 : a1;
			if(integerScaling) {
				zoom2 = zoom2 | 0;
				if(zoom2 == 0) {
					zoom2 = 1;
				}
			}
			var w2 = Math.ceil(engine.width / zoom2);
			var h2 = Math.ceil(engine.height / zoom2);
			if(w2 != _gthis.width || h2 != _gthis.height) {
				_gthis.width = w2;
				_gthis.height = h2;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom2 / engine.width;
			_gthis.ratioY = _gthis.height * zoom2 / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		}
	}
	,dispatchListeners: function(event) {
		this.screenToLocal(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,screenToLocal: function(e) {
		var x = e.relX * this.width / (this.window.get_width() * this.ratioX * this.scaleX) - this.x - this.viewportX;
		var y = e.relY * this.height / (this.window.get_height() * this.ratioY * this.scaleY) - this.y - this.viewportY;
		var rx = x * this.matA + y * this.matB + this.absX;
		var ry = x * this.matC + y * this.matD + this.absY;
		e.relX = rx;
		e.relY = ry;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToLocal(event);
		var rx = event.relX;
		var ry = event.relY;
		var dx = rx - i.absX;
		var dy = ry - i.absY;
		var w1 = i.width * i.matA;
		var h1 = i.width * i.matC;
		var ky = h1 * dx + w1 * dy;
		var w2 = i.height * i.matB;
		var h2 = i.height * i.matD;
		var kx = w2 * dy + h2 * dx;
		var max = w1 * h2 - h1 * w2;
		event.relX = kx / max * i.width;
		event.relY = ky / max * i.height;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToLocal(event);
		var rx = event.relX;
		var ry = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			var dx = rx - i.absX;
			var dy = ry - i.absY;
			if(i.shape != null) {
				pt.x = (dx * i.matD - dy * i.matC) * i.invDet + i.shapeX;
				pt.y = (-dx * i.matB + dy * i.matA) * i.invDet + i.shapeY;
				if(!i.shape.contains(pt)) {
					continue;
				}
				dx = pt.x - i.shapeX;
				dy = pt.y - i.shapeY;
			} else {
				var w1 = i.width * i.matA;
				var h1 = i.width * i.matC;
				var ky = h1 * dx + w1 * dy;
				if(ky < 0) {
					continue;
				}
				var w2 = i.height * i.matB;
				var h2 = i.height * i.matD;
				var kx = w2 * dy + h2 * dx;
				if(kx < 0) {
					continue;
				}
				var max = w1 * h2 - h1 * w2;
				if(ky >= max || kx >= max) {
					continue;
				}
				dx = kx / max * i.width;
				dy = ky / max * i.height;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = dx;
			event.relY = dy;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i11 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv2 = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv2;
			}
			var lv21 = lv2;
			var p1 = i11;
			var p2 = i2;
			while(lv1 > lv21) {
				i11 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv21 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv21;
			}
			while(p1 != p2) {
				i11 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g11 = p1.children.length;
			while(_g2 < _g11) {
				var k = _g2++;
				if(p1.children[k] == i11) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g3 = 0;
			var _g12 = p2.children.length;
			while(_g3 < _g12) {
				var k1 = _g3++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,dispose: function() {
		if(this.allocated) {
			this.onRemove();
		}
		this.ctx.dispose();
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,__class__: h2d_Scene
});
var h2d_Align = $hxEnums["h2d.Align"] = { __ename__ : "h2d.Align", __constructs__ : ["Left","Right","Center","MultilineRight","MultilineCenter"]
	,Left: {_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha,allocPos) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha,allocPos),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.autoCut = function(bmp,width,height,allocPos) {
	bmp.lock();
	if(height == null) {
		height = width;
	}
	var colorBG = bmp.getPixel(bmp.ctx.canvas.width - 1,bmp.ctx.canvas.height - 1);
	var tl = [];
	var w = 1;
	var h = 1;
	while(w < bmp.ctx.canvas.width) w <<= 1;
	while(h < bmp.ctx.canvas.height) h <<= 1;
	var tex = new h3d_mat_Texture(w,h,null,null,allocPos);
	var _g = 0;
	var _g1 = bmp.ctx.canvas.height / height | 0;
	while(_g < _g1) {
		var y = _g++;
		var a = [];
		tl[y] = a;
		var _g2 = 0;
		var _g11 = bmp.ctx.canvas.width / width | 0;
		while(_g2 < _g11) {
			var x = _g2++;
			var sz = h2d_Tile.isEmpty(bmp,x * width,y * height,width,height,colorBG);
			if(sz == null) {
				break;
			}
			a.push(new h2d_Tile(tex,x * width + sz.dx,y * height + sz.dy,sz.w,sz.h,sz.dx,sz.dy));
		}
	}
	bmp.unlock();
	var main = new h2d_Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	main.upload(bmp);
	return { main : main, tiles : tl};
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.isEmpty = function(b,px,py,width,height,bg) {
	var empty = true;
	var xmin = width;
	var ymin = height;
	var xmax = 0;
	var ymax = 0;
	var _g = 0;
	var _g1 = width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g11 = height;
		while(_g2 < _g11) {
			var y = _g2++;
			var color = b.getPixel(x + px,y + py);
			if((color & -16777216) == 0) {
				if(color != 0) {
					b.setPixel(x + px,y + py,0);
				}
				continue;
			}
			if(color != bg) {
				empty = false;
				if(x < xmin) {
					xmin = x;
				}
				if(y < ymin) {
					ymin = y;
				}
				if(x > xmax) {
					xmax = x;
				}
				if(y > ymax) {
					ymax = y;
				}
			}
			if(color == bg && color != 0) {
				b.setPixel(x + px,y + py,0);
			}
		}
	}
	if(empty) {
		return null;
	} else {
		return { dx : xmin, dy : ymin, w : xmax - xmin + 1, h : ymax - ymin + 1};
	}
};
h2d_Tile.prototype = {
	setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,upload: function(bmp) {
		var w = this.innerTex.width;
		var h = this.innerTex.height;
		this.innerTex.uploadBitmap(bmp);
	}
	,__class__: h2d_Tile
};
var h2d_TileLayerContent = function() {
	h3d_prim_Primitive.call(this);
	this.clear();
};
$hxClasses["h2d.TileLayerContent"] = h2d_TileLayerContent;
h2d_TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		if(this.buffer != null) {
			this.buffer.dispose();
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.totalVertices() >> 1;
		}
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = sy;
		var this3 = this.tmp;
		var v = t.u;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = v;
		var this4 = this.tmp;
		var v1 = t.v;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v1;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = r;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = g;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = b;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = a;
		var this9 = this.tmp;
		var v2 = sx + t.width;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = v2;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = sy;
		var this11 = this.tmp;
		var v3 = t.u2;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = v3;
		var this12 = this.tmp;
		var v4 = t.v;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = v4;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = r;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = g;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = b;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = a;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = sx;
		var this18 = this.tmp;
		var v5 = sy + t.height;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = v5;
		var this19 = this.tmp;
		var v6 = t.u;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = v6;
		var this20 = this.tmp;
		var v7 = t.v2;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = v7;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = r;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = g;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = b;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = a;
		var this25 = this.tmp;
		var v8 = sx + t.width;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = v8;
		var this26 = this.tmp;
		var v9 = sy + t.height;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = v9;
		var this27 = this.tmp;
		var v10 = t.u2;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = v10;
		var this28 = this.tmp;
		var v11 = t.v2;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = v11;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = r;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = g;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = b;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,doRender: function(engine,min,len) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
		if(this.buffer != null) {
			var start = min;
			var max = len;
			if(max == null) {
				max = -1;
			}
			if(start == null) {
				start = 0;
			}
			engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,start,max);
		}
	}
	,__class__: h2d_TileLayerContent
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	this.curColor = new h3d_Vector(1,1,1,1);
	this.content = new h2d_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = "h2d.TileGroup";
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,setDefaultColor: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		this.curColor.x = (rgb >> 16 & 255) / 255;
		this.curColor.y = (rgb >> 8 & 255) / 255;
		this.curColor.z = (rgb & 255) / 255;
		this.curColor.w = alpha;
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawObject(obj,this.tile.innerTex)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		this.content.doRender(ctx.engine,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.prototype = {
	__class__: h2d_col_Bounds
};
var h2d_col_Collider = function() { };
$hxClasses["h2d.col.Collider"] = h2d_col_Collider;
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.__isInterface__ = true;
h2d_col_Collider.prototype = {
	__class__: h2d_col_Collider
};
var h2d_col_IBounds = function() {
	this.xMin = 2147483647;
	this.yMin = 2147483647;
	this.xMax = -2147483648;
	this.yMax = -2147483648;
};
$hxClasses["h2d.col.IBounds"] = h2d_col_IBounds;
h2d_col_IBounds.__name__ = "h2d.col.IBounds";
h2d_col_IBounds.prototype = {
	__class__: h2d_col_IBounds
};
var h2d_col_Matrix = function() {
	this.a = 1;
	this.b = 0;
	this.c = 0;
	this.d = 1;
	this.x = 0;
	this.y = 0;
};
$hxClasses["h2d.col.Matrix"] = h2d_col_Matrix;
h2d_col_Matrix.__name__ = "h2d.col.Matrix";
h2d_col_Matrix.prototype = {
	invert: function() {
		this.inverse(this);
	}
	,inverse: function(m) {
		var a = m.a;
		var b = m.b;
		var c = m.c;
		var d = m.d;
		var x = m.x;
		var y = m.y;
		var invDet = 1 / (this.a * this.d - this.b * this.c);
		this.a = d * invDet;
		this.b = -b * invDet;
		this.c = -c * invDet;
		this.d = a * invDet;
		this.x = (-x * d + c * y) * invDet;
		this.y = (x * b - a * y) * invDet;
	}
	,multiply: function(a,b) {
		var aa = a.a;
		var ab = a.b;
		var ac = a.c;
		var ad = a.d;
		var ax = a.x;
		var ay = a.y;
		var ba = b.a;
		var bb = b.b;
		var bc = b.c;
		var bd = b.d;
		var bx = b.x;
		var by = b.y;
		this.a = aa * ba + ab * bc;
		this.b = aa * bb + ab * bd;
		this.c = ac * ba + ad * bc;
		this.d = ac * bb + ad * bd;
		this.x = ax * ba + ay * bc + bx;
		this.y = ax * bb + ay * bd + by;
	}
	,__class__: h2d_col_Matrix
};
var h2d_col_Point = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.Point"] = h2d_col_Point;
h2d_col_Point.__name__ = "h2d.col.Point";
h2d_col_Point.prototype = {
	__class__: h2d_col_Point
};
var h2d_filter_Filter = function() {
	this.enable = true;
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	get_enable: function() {
		return this.enable;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds) {
		s.getBounds(s,bounds);
		bounds.xMin -= this.boundsExtend;
		bounds.yMin -= this.boundsExtend;
		bounds.xMax += this.boundsExtend;
		bounds.yMax += this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h2d_filter_Hide = function() {
	h2d_filter_Filter.call(this);
	this.boundsExtend = 1;
};
$hxClasses["h2d.filter.Hide"] = h2d_filter_Hide;
h2d_filter_Hide.__name__ = "h2d.filter.Hide";
h2d_filter_Hide.__super__ = h2d_filter_Filter;
h2d_filter_Hide.prototype = $extend(h2d_filter_Filter.prototype,{
	draw: function(ctx,input) {
		this.frame = ctx.frame;
		this.input = input;
		if(this.maskVisible) {
			return input;
		} else {
			return null;
		}
	}
	,__class__: h2d_filter_Hide
});
var h2d_filter_AbstractMask = function(mask) {
	this.bindCount = 0;
	h2d_filter_Filter.call(this);
	this.hide = new h2d_filter_Hide();
	this.set_mask(mask);
	this.maskMatrix = new h2d_col_Matrix();
	this.tmpMatrix = new h2d_col_Matrix();
};
$hxClasses["h2d.filter.AbstractMask"] = h2d_filter_AbstractMask;
h2d_filter_AbstractMask.__name__ = "h2d.filter.AbstractMask";
h2d_filter_AbstractMask.__super__ = h2d_filter_Filter;
h2d_filter_AbstractMask.prototype = $extend(h2d_filter_Filter.prototype,{
	set_maskVisible: function(b) {
		this.hide.maskVisible = b;
		return this.maskVisible = b;
	}
	,bind: function(s) {
		this.bindCount++;
		if(this.bindCount == 1) {
			this.set_mask(this.mask);
		}
	}
	,unbind: function(s) {
		this.bindCount--;
		if(this.bindCount == 0) {
			this.set_mask(this.mask);
		}
	}
	,set_mask: function(m) {
		if(this.mask != null) {
			if(this.mask.filter == this.hide) {
				this.mask.set_filter(null);
			}
		}
		this.mask = m;
		if(m != null && this.bindCount > 0) {
			if(m.filter != null) {
				if(((m.filter) instanceof h2d_filter_Hide)) {
					throw new js__$Boot_HaxeError("Same mask can't be part of several filters");
				}
				throw new js__$Boot_HaxeError("Can't set mask with filter " + Std.string(m.filter));
			}
			m.set_filter(this.hide);
		}
		this.hide.input = null;
		return m;
	}
	,getMaskTexture: function(tile) {
		var t = this.hide.input == null ? null : this.hide.input.innerTex;
		if(t == null) {
			return null;
		}
		this.mask.getMatrix(this.maskMatrix);
		var _this = this.maskMatrix;
		var x = this.hide.input.dx;
		var y = this.hide.input.dy;
		_this.x += _this.a * x + _this.c * y;
		_this.y += _this.b * x + _this.d * y;
		this.maskMatrix.invert();
		this.obj.getMatrix(this.tmpMatrix);
		var _this1 = this.tmpMatrix;
		var x1 = tile.dx;
		var y1 = tile.dy;
		_this1.x += _this1.a * x1 + _this1.c * y1;
		_this1.y += _this1.b * x1 + _this1.d * y1;
		this.maskMatrix.multiply(this.tmpMatrix,this.maskMatrix);
		this.maskMatrix.x /= tile.width;
		this.maskMatrix.y /= tile.height;
		var _this2 = this.maskMatrix;
		var sx = tile.width / t.width;
		var sy = tile.height / t.height;
		_this2.a *= sx;
		_this2.c *= sx;
		_this2.x *= sx;
		_this2.b *= sy;
		_this2.d *= sy;
		_this2.y *= sy;
		t.set_filter(this.smooth ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		return t;
	}
	,sync: function(ctx,obj) {
		this.obj = obj;
		if(this.mask == null || this.hide.frame != ctx.frame) {
			var p = obj;
			while(p != null) {
				if(p == this.mask) {
					throw new js__$Boot_HaxeError("You can't mask with one of the object parents");
				}
				p = p.parent;
			}
			this.hide.input = null;
		}
	}
	,__class__: h2d_filter_AbstractMask
});
var h2d_filter_ColorMatrix = function(m) {
	h2d_filter_Filter.call(this);
	this.pass = new h3d_pass_ColorMatrix(m);
	var _this = this.pass.shader;
	_this.constModified = true;
	_this.useAlpha__ = true;
};
$hxClasses["h2d.filter.ColorMatrix"] = h2d_filter_ColorMatrix;
h2d_filter_ColorMatrix.__name__ = "h2d.filter.ColorMatrix";
h2d_filter_ColorMatrix.__super__ = h2d_filter_Filter;
h2d_filter_ColorMatrix.prototype = $extend(h2d_filter_Filter.prototype,{
	draw: function(ctx,t) {
		var tout = ctx.textures.allocTileTarget("colorMatrixOut",t);
		this.pass.apply(t.innerTex,tout);
		return h2d_Tile.fromTexture(tout);
	}
	,__class__: h2d_filter_ColorMatrix
});
var h2d_filter_Group = function(filters) {
	h2d_filter_Filter.call(this);
	this.filters = filters == null ? [] : filters;
};
$hxClasses["h2d.filter.Group"] = h2d_filter_Group;
h2d_filter_Group.__name__ = "h2d.filter.Group";
h2d_filter_Group.__super__ = h2d_filter_Filter;
h2d_filter_Group.prototype = $extend(h2d_filter_Filter.prototype,{
	get_enable: function() {
		if(!this.enable) {
			return false;
		}
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(this.enable) {
				return true;
			}
		}
		return false;
	}
	,bind: function(s) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.bind(s);
		}
	}
	,unbind: function(s) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.unbind(s);
		}
	}
	,sync: function(ctx,s) {
		this.autoBounds = true;
		this.boundsExtend = 0;
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.sync(ctx,s);
			if(f.boundsExtend > 0) {
				this.boundsExtend += f.boundsExtend;
			}
			if(!f.autoBounds) {
				this.autoBounds = false;
			}
		}
	}
	,getBounds: function(s,bounds) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(!f.autoBounds) {
				f.getBounds(s,bounds);
			}
		}
	}
	,draw: function(ctx,input) {
		var xMin = input.dx;
		var yMin = input.dy;
		var start = input;
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var prev = input;
			input = f.draw(ctx,input);
			if(input == null) {
				return null;
			}
			if(input != prev) {
				input.dx += xMin;
				input.dy += yMin;
			}
		}
		if(start != input) {
			input.dx -= xMin;
			input.dy -= yMin;
		}
		return input;
	}
	,__class__: h2d_filter_Group
});
var h2d_filter__$Mask_MaskShader = function() {
	this.maskMatB__ = new h3d_Vector();
	this.maskMatA__ = new h3d_Vector();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h2d.filter._Mask.MaskShader"] = h2d_filter__$Mask_MaskShader;
h2d_filter__$Mask_MaskShader.__name__ = "h2d.filter._Mask.MaskShader";
h2d_filter__$Mask_MaskShader.__super__ = h3d_shader_ScreenShader;
h2d_filter__$Mask_MaskShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.smoothAlpha__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mask__;
		case 3:
			return this.maskMatA__;
		case 4:
			return this.maskMatB__;
		case 5:
			return this.smoothAlpha__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h2d_filter__$Mask_MaskShader
});
var h2d_filter_Mask = function(mask,maskVisible,smoothAlpha) {
	if(smoothAlpha == null) {
		smoothAlpha = false;
	}
	if(maskVisible == null) {
		maskVisible = false;
	}
	h2d_filter_AbstractMask.call(this,mask);
	this.pass = new h3d_pass_ScreenFx(new h2d_filter__$Mask_MaskShader());
	this.set_maskVisible(maskVisible);
	this.set_smoothAlpha(smoothAlpha);
};
$hxClasses["h2d.filter.Mask"] = h2d_filter_Mask;
h2d_filter_Mask.__name__ = "h2d.filter.Mask";
h2d_filter_Mask.__super__ = h2d_filter_AbstractMask;
h2d_filter_Mask.prototype = $extend(h2d_filter_AbstractMask.prototype,{
	set_smoothAlpha: function(v) {
		var _this = this.pass.shader;
		_this.constModified = true;
		return _this.smoothAlpha__ = v;
	}
	,draw: function(ctx,t) {
		var mask = this.getMaskTexture(t);
		if(mask == null) {
			if(this.mask == null) {
				throw new js__$Boot_HaxeError("Mask filter has no mask object");
			}
			return null;
		}
		var out = ctx.textures.allocTileTarget("maskTmp",t);
		ctx.engine.pushTarget(out);
		this.pass.shader.texture__ = t.innerTex;
		this.pass.shader.mask__ = this.getMaskTexture(t);
		var _this = this.pass.shader.maskMatA__;
		var x = this.maskMatrix.a;
		var y = this.maskMatrix.c;
		var z = this.maskMatrix.x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this1 = this.pass.shader.maskMatB__;
		var x1 = this.maskMatrix.b;
		var y1 = this.maskMatrix.d;
		var z1 = this.maskMatrix.y;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
		_this1.w = 1.;
		this.pass.render();
		ctx.engine.popTarget();
		return h2d_Tile.fromTexture(out);
	}
	,__class__: h2d_filter_Mask
});
var h2d_filter_Shader = function(shader,textureParam) {
	if(textureParam == null) {
		textureParam = "texture";
	}
	h2d_filter_Filter.call(this);
	var found = false;
	var _g = 0;
	var _g1 = shader.shader.data.vars;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		if(v.name == textureParam) {
			found = true;
			break;
		}
	}
	if(!found) {
		throw new js__$Boot_HaxeError("Shader does not have '" + textureParam + "' variable");
	}
	this.textureParam = textureParam;
	this.pass = new h3d_pass_ScreenFx(shader);
};
$hxClasses["h2d.filter.Shader"] = h2d_filter_Shader;
h2d_filter_Shader.__name__ = "h2d.filter.Shader";
h2d_filter_Shader.__super__ = h2d_filter_Filter;
h2d_filter_Shader.prototype = $extend(h2d_filter_Filter.prototype,{
	get_shader: function() {
		return this.pass.shader;
	}
	,draw: function(ctx,t) {
		var out = ctx.textures.allocTileTarget("shaderTmp",t);
		ctx.engine.pushTarget(out);
		this.get_shader()[this.textureParam + "__"] = t.innerTex;
		if(this.nearest) {
			t.innerTex.set_filter(h3d_mat_Filter.Nearest);
		}
		this.pass.render();
		ctx.engine.popTarget();
		return h2d_Tile.fromTexture(out);
	}
	,__class__: h2d_filter_Shader
});
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__ : "h3d.BufferFlag", __constructs__ : ["Dynamic","Triangles","Quads","Managed","RawFormat","NoAlloc","UniformBuffer"]
	,Dynamic: {_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,Triangles: {_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,Quads: {_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,Managed: {_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,RawFormat: {_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_index:6,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer];
var h3d_Buffer = function(vertices,stride,flags,allocPos) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,stride,flags,allocPos) {
	var nvert = v.pos / stride | 0;
	var b = new h3d_Buffer(nvert,stride,flags,allocPos);
	b.uploadVector(v,0,nvert);
	return b;
};
h3d_Buffer.prototype = {
	isDisposed: function() {
		if(this.buffer != null) {
			return this.buffer.vbuf == null;
		} else {
			return true;
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	,totalVertices: function() {
		var count = 0;
		var b = this;
		while(b != null) {
			count += b.vertices;
			b = b.next;
		}
		return count;
	}
	,uploadVector: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	,__class__: h3d_Buffer
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	this.pos = new h3d_Vector(2,3,4);
	this.up = new h3d_Vector(0,0,1);
	this.target = new h3d_Vector(0,0,0);
	this.m = new h3d_Matrix();
	this.mcam = new h3d_Matrix();
	this.mproj = new h3d_Matrix();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,unproject: function(screenX,screenY,camZ) {
		var p = new h3d_Vector(screenX,screenY,camZ);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	,update: function() {
		if(this.follow != null) {
			var _this = this.pos;
			var x = 0;
			var y = 0;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			var _this1 = this.target;
			var x1 = 0;
			var y1 = 0;
			var z1 = 0;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = 1.;
			this.follow.pos.localToGlobal(this.pos);
			this.follow.target.localToGlobal(this.target);
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.miview != null) {
			this.miview._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,getFrustumCorners: function(zMax) {
		if(zMax == null) {
			zMax = 1.;
		}
		return [this.unproject(-1,1,0),this.unproject(1,1,0),this.unproject(1,-1,0),this.unproject(-1,-1,0),this.unproject(-1,1,zMax),this.unproject(1,1,zMax),this.unproject(1,-1,zMax),this.unproject(-1,-1,zMax)];
	}
	,makeCameraMatrix: function(m) {
		var _this = this.target;
		var v = this.pos;
		var x = _this.x - v.x;
		var y = _this.y - v.y;
		var z = _this.z - v.z;
		var w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var az_x = x;
		var az_y = y;
		var az_z = z;
		var az_w = w;
		if(this.rightHanded) {
			az_x *= -1;
			az_y *= -1;
			az_z *= -1;
		}
		var k = 1. / Math.sqrt(az_x * az_x + az_y * az_y + az_z * az_z);
		az_x *= k;
		az_y *= k;
		az_z *= k;
		var _this1 = this.up;
		var x1 = _this1.y * az_z - _this1.z * az_y;
		var y1 = _this1.z * az_x - _this1.x * az_z;
		var z1 = _this1.x * az_y - _this1.y * az_x;
		var w1 = 1;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ax_x = x1;
		var ax_y = y1;
		var ax_z = z1;
		var ax_w = w1;
		var k1 = 1. / Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z);
		ax_x *= k1;
		ax_y *= k1;
		ax_z *= k1;
		if(Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z) == 0) {
			ax_x = az_y;
			ax_y = az_z;
			ax_z = az_x;
		}
		var x2 = az_y * ax_z - az_z * ax_y;
		var y2 = az_z * ax_x - az_x * ax_z;
		var z2 = az_x * ax_y - az_y * ax_x;
		var w2 = 1;
		if(w2 == null) {
			w2 = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var ay_x = x2;
		var ay_y = y2;
		var ay_z = z2;
		var ay_w = w2;
		m._11 = ax_x;
		m._12 = ay_x;
		m._13 = az_x;
		m._14 = 0;
		m._21 = ax_y;
		m._22 = ay_y;
		m._23 = az_y;
		m._24 = 0;
		m._31 = ax_z;
		m._32 = ay_z;
		m._33 = az_z;
		m._34 = 0;
		var v1 = this.pos;
		m._41 = -(ax_x * v1.x + ax_y * v1.y + ax_z * v1.z);
		var v2 = this.pos;
		m._42 = -(ay_x * v2.x + ay_y * v2.y + ay_z * v2.z);
		var v3 = this.pos;
		m._43 = -(az_x * v3.x + az_y * v3.y + az_z * v3.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector();
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = Date.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	this.driver = new h3d_impl_GlDriver(this.antiAlias);
	h3d_Engine.CURRENT = this;
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.prototype = {
	init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.isDisposed()) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			var ntri = b.vertices / vertPerTri | 0;
			var pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw new js__$Boot_HaxeError("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		var maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,end: function() {
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null;
		}
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw new js__$Boot_HaxeError("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.textures != null) {
				this.driver.setRenderTargets(t.textures);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = Date.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	this.mem = h3d_Engine.CURRENT.mem;
	this.count = count;
	this.is32 = is32;
	this.mem.allocIndexes(this);
};
$hxClasses["h3d.Indexes"] = h3d_Indexes;
h3d_Indexes.__name__ = "h3d.Indexes";
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = new h3d_Indexes(length);
	idx.upload(i,0,length);
	return idx;
};
h3d_Indexes.prototype = {
	isDisposed: function() {
		return this.ibuf == null;
	}
	,upload: function(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	,dispose: function() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	,__class__: h3d_Indexes
};
var h3d_Matrix = function() {
};
$hxClasses["h3d.Matrix"] = h3d_Matrix;
h3d_Matrix.__name__ = "h3d.Matrix";
h3d_Matrix.L = function(a) {
	var m = new h3d_Matrix();
	m.loadValues(a);
	return m;
};
h3d_Matrix.prototype = {
	zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,colorSaturate: function(sat) {
		++sat;
		var is = 1 - sat;
		var r = is * 0.212671;
		var g = is * 0.71516;
		var b = is * 0.072169;
		var tmp = h3d_Matrix.tmp;
		tmp._11 = r + sat;
		tmp._12 = r;
		tmp._13 = r;
		tmp._21 = g;
		tmp._22 = g + sat;
		tmp._23 = g;
		tmp._31 = b;
		tmp._32 = b;
		tmp._33 = b + sat;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorContrast: function(contrast) {
		var tmp = h3d_Matrix.tmp;
		var v = contrast + 1;
		tmp._11 = v;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = v;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = v;
		tmp._41 = -contrast * 0.5;
		tmp._42 = -contrast * 0.5;
		tmp._43 = -contrast * 0.5;
		this.multiply3x4(this,tmp);
	}
	,__class__: h3d_Matrix
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	toMatrix: function(m) {
		if(m == null) {
			m = new h3d_Matrix();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,__class__: h3d_Quat
};
var h3d_Vector = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector"] = h3d_Vector;
h3d_Vector.__name__ = "h3d.Vector";
h3d_Vector.prototype = {
	normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,__class__: h3d_Vector
};
var h3d_anim_AnimatedObject = function() { };
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_anim_Animation.prototype = {
	getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw new js__$Boot_HaxeError("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw new js__$Boot_HaxeError("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g11 = this.events[f];
					while(_g2 < _g11.length) {
						var e = _g11[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,__class__: h3d_anim_Animation
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.__isInterface__ = true;
h3d_col_Collider.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.__interfaces__ = [h3d_col_Collider];
h3d_col_Bounds.prototype = {
	inFrustum: function(f,m) {
		if(m != null) {
			throw new js__$Boot_HaxeError("Not implemented");
		}
		return f.hasBounds(this);
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a1 = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a1 < realMinTz ? realMinTz : a1;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a2 = a.yMin;
		var b2 = b.yMin;
		var yMin = a2 < b2 ? b2 : a2;
		var a3 = a.zMin;
		var b3 = b.zMin;
		var zMin = a3 < b3 ? b3 : a3;
		var a4 = a.xMax;
		var b4 = b.xMax;
		var xMax = a4 > b4 ? b4 : a4;
		var a5 = a.yMax;
		var b5 = b.yMax;
		var yMax = a5 > b5 ? b5 : a5;
		var a6 = a.zMax;
		var b6 = b.zMax;
		var zMax = a6 > b6 ? b6 : a6;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,__class__: h3d_col_Bounds
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this1 = this.pright;
		var p_nx1 = mvp._14 - mvp._11;
		var p_ny1 = mvp._24 - mvp._21;
		var p_nz1 = mvp._34 - mvp._31;
		var p_d1 = mvp._41 - mvp._44;
		_this1.nx = p_nx1;
		_this1.ny = p_ny1;
		_this1.nz = p_nz1;
		_this1.d = p_d1;
		var _this2 = this.ptop;
		var p_nx2 = mvp._14 - mvp._12;
		var p_ny2 = mvp._24 - mvp._22;
		var p_nz2 = mvp._34 - mvp._32;
		var p_d2 = mvp._42 - mvp._44;
		_this2.nx = p_nx2;
		_this2.ny = p_ny2;
		_this2.nz = p_nz2;
		_this2.d = p_d2;
		var _this3 = this.pbottom;
		var p_nx3 = mvp._14 + mvp._12;
		var p_ny3 = mvp._24 + mvp._22;
		var p_nz3 = mvp._34 + mvp._32;
		var p_d3 = -(mvp._44 + mvp._42);
		_this3.nx = p_nx3;
		_this3.ny = p_ny3;
		_this3.nz = p_nz3;
		_this3.d = p_d3;
		var _this4 = this.pnear;
		var p_nx4 = mvp._13;
		var p_ny4 = mvp._23;
		var p_nz4 = mvp._33;
		var p_d4 = -mvp._43;
		_this4.nx = p_nx4;
		_this4.ny = p_ny4;
		_this4.nz = p_nz4;
		_this4.d = p_d4;
		var _this5 = this.pfar;
		var p_nx5 = mvp._14 - mvp._13;
		var p_ny5 = mvp._24 - mvp._23;
		var p_nz5 = mvp._34 - mvp._33;
		var p_d5 = mvp._43 - mvp._44;
		_this5.nx = p_nx5;
		_this5.ny = p_ny5;
		_this5.nz = p_nz5;
		_this5.d = p_d5;
		var _this6 = this.pleft;
		var len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		var _this7 = this.pright;
		var len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		var _this8 = this.ptop;
		var len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		var _this9 = this.pbottom;
		var len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		var _this10 = this.pnear;
		var len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		var _this11 = this.pfar;
		var len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this1 = this.pright;
		if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
			return false;
		}
		var _this2 = this.ptop;
		if(_this2.nx * p_x + _this2.ny * p_y + _this2.nz * p_z - _this2.d < -s.r) {
			return false;
		}
		var _this3 = this.pbottom;
		if(_this3.nx * p_x + _this3.ny * p_y + _this3.nz * p_z - _this3.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this4 = this.pnear;
			if(_this4.nx * p_x + _this4.ny * p_y + _this4.nz * p_z - _this4.d < -s.r) {
				return false;
			}
			var _this5 = this.pfar;
			if(_this5.nx * p_x + _this5.ny * p_y + _this5.nz * p_z - _this5.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p1 = this.pright;
		var a1 = p1.nx;
		var b2 = p1.ny;
		var c1 = p1.nz;
		var dd1 = a1 * (b.xMax + b.xMin) + b2 * (b.yMax + b.yMin) + c1 * (b.zMax + b.zMin);
		if(a1 < 0) {
			a1 = -a1;
		}
		if(b2 < 0) {
			b2 = -b2;
		}
		if(c1 < 0) {
			c1 = -c1;
		}
		var rr1 = a1 * (b.xMax - b.xMin) + b2 * (b.yMax - b.yMin) + c1 * (b.zMax - b.zMin);
		if(dd1 + rr1 - p1.d * 2 < 0) {
			return false;
		}
		var p2 = this.ptop;
		var a2 = p2.nx;
		var b3 = p2.ny;
		var c2 = p2.nz;
		var dd2 = a2 * (b.xMax + b.xMin) + b3 * (b.yMax + b.yMin) + c2 * (b.zMax + b.zMin);
		if(a2 < 0) {
			a2 = -a2;
		}
		if(b3 < 0) {
			b3 = -b3;
		}
		if(c2 < 0) {
			c2 = -c2;
		}
		var rr2 = a2 * (b.xMax - b.xMin) + b3 * (b.yMax - b.yMin) + c2 * (b.zMax - b.zMin);
		if(dd2 + rr2 - p2.d * 2 < 0) {
			return false;
		}
		var p3 = this.ptop;
		var a3 = p3.nx;
		var b4 = p3.ny;
		var c3 = p3.nz;
		var dd3 = a3 * (b.xMax + b.xMin) + b4 * (b.yMax + b.yMin) + c3 * (b.zMax + b.zMin);
		if(a3 < 0) {
			a3 = -a3;
		}
		if(b4 < 0) {
			b4 = -b4;
		}
		if(c3 < 0) {
			c3 = -c3;
		}
		var rr3 = a3 * (b.xMax - b.xMin) + b4 * (b.yMax - b.yMin) + c3 * (b.zMax - b.zMin);
		if(dd3 + rr3 - p3.d * 2 < 0) {
			return false;
		}
		var p4 = this.pnear;
		var a4 = p4.nx;
		var b5 = p4.ny;
		var c4 = p4.nz;
		var dd4 = a4 * (b.xMax + b.xMin) + b5 * (b.yMax + b.yMin) + c4 * (b.zMax + b.zMin);
		if(a4 < 0) {
			a4 = -a4;
		}
		if(b5 < 0) {
			b5 = -b5;
		}
		if(c4 < 0) {
			c4 = -c4;
		}
		var rr4 = a4 * (b.xMax - b.xMin) + b5 * (b.yMax - b.yMin) + c4 * (b.zMax - b.zMin);
		if(dd4 + rr4 - p4.d * 2 < 0) {
			return false;
		}
		var p5 = this.pfar;
		var a5 = p5.nx;
		var b6 = p5.ny;
		var c5 = p5.nz;
		var dd5 = a5 * (b.xMax + b.xMin) + b6 * (b.yMax + b.yMin) + c5 * (b.zMax + b.zMin);
		if(a5 < 0) {
			a5 = -a5;
		}
		if(b6 < 0) {
			b6 = -b6;
		}
		if(c5 < 0) {
			c5 = -c5;
		}
		var rr5 = a5 * (b.xMax - b.xMin) + b6 * (b.yMax - b.yMin) + c5 * (b.zMax - b.zMin);
		if(dd5 + rr5 - p5.d * 2 < 0) {
			return false;
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.prototype = {
	normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,__class__: h3d_col_Ray
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.prototype = {
	__class__: h3d_col_Plane
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__interfaces__ = [h3d_col_Collider];
h3d_col_Sphere.prototype = {
	rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,inFrustum: function(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	,inFrustumMatrix: function(f,m) {
		var oldX = this.x;
		var oldY = this.y;
		var oldZ = this.z;
		var oldR = this.r;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		var v = null;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(m._11 * m._11 + m._12 * m._12 + m._13 * m._13);
		v.y = Math.sqrt(m._21 * m._21 + m._22 * m._22 + m._23 * m._23);
		v.z = Math.sqrt(m._31 * m._31 + m._32 * m._32 + m._33 * m._33);
		if(m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var scale = v;
		this.r *= Math.max(Math.max(scale.x,scale.y),scale.z);
		var res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	,__class__: h3d_col_Sphere
};
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__ : "h3d.impl.Feature", __constructs__ : ["StandardDerivatives","FloatTextures","AllocDepthBuffer","HardwareAccelerated","MultipleRenderTargets","Queries","SRGBTextures","ShaderModel3","BottomLeftCoords","Wireframe"]
	,StandardDerivatives: {_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__ : "h3d.impl.RenderFlag", __constructs__ : ["CameraHandness"]
	,CameraHandness: {_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var h3d_impl_InputNames = function(names) {
	this.id = h3d_impl_InputNames.UID++;
	this.names = names;
};
$hxClasses["h3d.impl.InputNames"] = h3d_impl_InputNames;
h3d_impl_InputNames.__name__ = "h3d.impl.InputNames";
h3d_impl_InputNames.get = function(names) {
	var key = names.join("|");
	var i = h3d_impl_InputNames.CACHE.h[key];
	if(i == null) {
		i = new h3d_impl_InputNames(names.slice());
		h3d_impl_InputNames.CACHE.h[key] = i;
	}
	return i;
};
h3d_impl_InputNames.prototype = {
	__class__: h3d_impl_InputNames
};
var h3d_impl_Driver = function() { };
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,begin: function(frame) {
	}
	,generateMipMaps: function(texture) {
		throw new js__$Boot_HaxeError("Mipmaps auto generation is not supported on this platform");
	}
	,clear: function(color,depth,stencil) {
	}
	,capturePixels: function(tex,layer,mipLevel,region) {
		throw new js__$Boot_HaxeError("Can't capture pixels on this platform");
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,selectBuffer: function(buffer) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,setRenderTargets: function(textures) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocIndexes: function(count,is32) {
		return null;
	}
	,allocVertexes: function(m) {
		return null;
	}
	,disposeTexture: function(t) {
	}
	,disposeIndexes: function(i) {
	}
	,disposeVertexes: function(v) {
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,vertex,shader) {
	this.s = s;
	this.vertex = vertex;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw new js__$Boot_HaxeError("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg1 = new EReg("[0-9]+\\.[0-9]+","");
	var v1 = this.gl.getParameter(35724);
	if(reg1.match(v1)) {
		this.glES = parseFloat(reg1.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg1.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log1 = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log1,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw new js__$Boot_HaxeError("An error occurred compiling the shaders: " + log1 + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	,initShader: function(p,s,shader) {
		var prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var tmp;
			if(tt._hx_index == 17) {
				var _g = tt.size;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				tt = hxsl_Type.TSampler2D;
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			s.textures.push({ u : this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]"), t : curT, mode : mode});
			++index;
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			var _g1 = [];
			var _g11 = 0;
			var _g2 = shader.bufferCount;
			while(_g11 < _g2) {
				var i = _g11++;
				_g1.push(this.gl.getUniformBlockIndex(p.p,"uniform_buffer" + i));
			}
			s.buffers = _g1;
			var _g3 = 0;
			var _g4 = shader.bufferCount;
			while(_g3 < _g4) {
				var i1 = _g3++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i1],i1);
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = new hxsl_GlslOut();
			glout.glES = this.glES;
			glout.version = this.shaderVersion;
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( e ) {
				throw new js__$Boot_HaxeError("Shader linkage error: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw new js__$Boot_HaxeError("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex);
			this.initShader(p,p.fragment,shader.fragment);
			var attribNames = [];
			p.attribs = [];
			p.hasAttribIndex = [];
			p.stride = 0;
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = 5126;
					var size;
					var _g2 = v.type;
					switch(_g2._hx_index) {
					case 3:
						size = 1;
						break;
					case 5:
						var _g21 = _g2.t;
						var n = _g2.size;
						size = n;
						break;
					case 9:
						var n1 = _g2.size;
						t = 5120;
						size = n1;
						break;
					default:
						throw new js__$Boot_HaxeError("assert " + Std.string(v.type));
					}
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						p.stride += size;
						continue;
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g4 = 0;
						var _g5 = v.qualifiers;
						while(_g4 < _g5.length) {
							var q = _g5[_g4];
							++_g4;
							if(q._hx_index == 9) {
								var n2 = q.v;
								a.divisor = n2;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex[a.index] = true;
					attribNames.push(v.name);
					p.stride += size;
				}
			}
			p.inputs = h3d_impl_InputNames.get(attribNames);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.gl.useProgram(p.p);
		var _g3 = 0;
		var _g11 = p.attribs;
		while(_g3 < _g11.length) {
			var a1 = _g11[_g3];
			++_g3;
			if(!this.curAttribs[a1.index]) {
				this.gl.enableVertexAttribArray(a1.index);
				this.curAttribs[a1.index] = true;
				if(this.maxIdxCurAttribs < a1.index) {
					this.maxIdxCurAttribs = a1.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g22 = 0;
		var _g31 = this.maxIdxCurAttribs + 1;
		while(_g22 < _g31) {
			var i = _g22++;
			if(this.curAttribs[i] && !p.hasAttribIndex[i]) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g41 = 0;
		var _g51 = this.boundTextures.length;
		while(_g41 < _g51) {
			var i1 = _g41++;
			this.boundTextures[i1] = null;
		}
		return true;
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a1 = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a1);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || t.t == null && t.realloc == null) {
					switch(pt.t._hx_index) {
					case 10:
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d_mat_Texture.defaultCubeTexture();
						break;
					default:
						throw new js__$Boot_HaxeError("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					t.alloc();
					t.realloc();
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.vertex ? i : this.curShader.vertex.textures.length + i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					var mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw new js__$Boot_HaxeError("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					var mode1 = pt.mode;
					this.gl.texParameteri(mode1,10240,flags[0]);
					this.gl.texParameteri(mode1,10241,flags[1]);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode1,10242,w);
					this.gl.texParameteri(mode1,10243,w);
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var _g2 = 0;
				var _g11 = s.buffers.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					this.gl.bindBufferBase(35345,i1,buf.buffers[i1].buffer.vbuf.b);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			this.canvas.style.width = (width / window.devicePixelRatio | 0) + "px";
			this.canvas.style.height = (height / window.devicePixelRatio | 0) + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32856:
			return 32993;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33327:case 33328:
			return 33319;
		case 33777:case 33778:case 33779:
			return 6408;
		case 34837:case 34843:
			return 6407;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 34836:case 34842:case 35906:case 35907:
			return 6408;
		default:
			throw new js__$Boot_HaxeError("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 18:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		var isCube = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 15:
			tt1.internalFmt = 35907;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw new js__$Boot_HaxeError("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var _g2 = 0;
			while(_g2 < 6) {
				var i = _g2++;
				this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
				var tmp;
				if(!h3d_impl_GlDriver.outOfMemoryCheck) {
					tmp = false;
				} else {
					var err = _gthis.gl.getError();
					if(err == 1285) {
						outOfMem = true;
						tmp = true;
					} else {
						if(err != 0) {
							throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
						}
						tmp = false;
					}
				}
				if(tmp) {
					break;
				}
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.texImage3D(35866,0,tt1.internalFmt,tt1.width,tt1.height,t.get_layerCount(),0,this.getChannels(tt1),tt1.pixelFmt,null);
			if(!(!h3d_impl_GlDriver.outOfMemoryCheck)) {
				var err1 = _gthis.gl.getError();
				if(err1 == 1285) {
					outOfMem = true;
				} else if(err1 != 0) {
					throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err1 + ")");
				}
			}
		} else {
			var _g21 = t.format;
			var tmp1;
			if(_g21._hx_index == 18) {
				var _g3 = _g21.v;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				this.gl.texImage2D(bind,0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
			}
			if(!(!h3d_impl_GlDriver.outOfMemoryCheck)) {
				var err2 = _gthis.gl.getError();
				if(err2 == 1285) {
					outOfMem = true;
				} else if(err2 != 0) {
					throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err2 + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(b) {
		var r = this.gl.createRenderbuffer();
		if(b.format == null) {
			b.format = this.glES >= 3 ? h3d_mat_DepthFormat.Depth24Stencil8 : h3d_mat_DepthFormat.Depth16;
		}
		var format;
		switch(b.format._hx_index) {
		case 0:
			format = 33189;
			break;
		case 1:
			if(this.glES >= 3) {
				format = 33190;
			} else {
				throw new js__$Boot_HaxeError("Unsupported depth format " + Std.string(b.format));
			}
			break;
		case 2:
			format = 34041;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported depth format " + Std.string(b.format));
		}
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,format,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	,disposeDepthBuffer: function(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(0,0);
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,allocVertexes: function(m) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	,allocIndexes: function(count,is32) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		var size = is32 ? 4 : 2;
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * size,35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, is32 : is32};
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeIndexes: function(i) {
		this.gl.deleteBuffer(i.b);
	}
	,disposeVertexes: function(v) {
		this.gl.deleteBuffer(v.b);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texImage2D(3553,mipLevel,t.t.internalFmt,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var bind = this.getBindType(t);
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			throw new js__$Boot_HaxeError("TODO:texImage3D");
		}
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		pixels.setFlip(false);
		var bufLen = pixels.stride * pixels.height;
		var buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 1);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,bufLen);
		}
		var _g1 = t.format;
		var tmp;
		if(_g1._hx_index == 18) {
			var _g2 = _g1.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.gl.compressedTexImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,buffer);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,selectBuffer: function(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0 == ((this.curBuffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw new js__$Boot_HaxeError("No shader selected");
		}
		this.curBuffer = v;
		var m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw new js__$Boot_HaxeError("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0) {
			var _g = 0;
			var _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		} else {
			var offset = 8;
			var _g2 = 0;
			var _g11 = this.curShader.attribs.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var a1 = this.curShader.attribs[i];
				var pos1;
				var _g3 = this.curShader.inputs.names[i];
				switch(_g3) {
				case "normal":
					if(m.stride < 6) {
						throw new js__$Boot_HaxeError("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos1 = 3;
					break;
				case "position":
					pos1 = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw new js__$Boot_HaxeError("Buffer is missing UV data, set it to RAW format ?");
					}
					pos1 = 6;
					break;
				default:
					var s = _g3;
					pos1 = offset;
					offset += a1.size;
					if(offset > m.stride) {
						throw new js__$Boot_HaxeError("Buffer is missing '" + s + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a1.index,a1.size,a1.type,false,m.stride * 4,pos1 * 4);
				if(this.currentDivisor[a1.index] != a1.divisor) {
					this.currentDivisor[a1.index] = a1.divisor;
					this.gl.vertexAttribDivisor(a1.index,a1.divisor);
				}
			}
		}
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		if(ibuf.is32) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,end: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,capturePixels: function(tex,layer,mipLevel,region) {
		var pixels;
		var x;
		var y;
		if(region != null) {
			if(region.xMax > tex.width) {
				region.xMax = tex.width;
			}
			if(region.yMax > tex.height) {
				region.yMax = tex.height;
			}
			if(region.xMin < 0) {
				region.xMin = 0;
			}
			if(region.yMin < 0) {
				region.yMin = 0;
			}
			pixels = hxd_Pixels.alloc(region.xMax - region.xMin >> mipLevel,region.yMax - region.yMin >> mipLevel,tex.format);
			x = region.xMin;
			y = region.yMin;
		} else {
			pixels = hxd_Pixels.alloc(tex.width >> mipLevel,tex.height >> mipLevel,tex.format);
			x = 0;
			y = 0;
		}
		var old = this.curTarget;
		var oldCount = this.numTargets;
		var oldLayer = this.curTargetLayer;
		var oldMip = this.curTargetMip;
		if(oldCount > 1) {
			this.numTargets = 1;
			var _g = 1;
			var _g1 = oldCount;
			while(_g < _g1) {
				var i = _g++;
				if(this.curTargets[i] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i,3553,null,0);
				}
			}
		}
		this.setRenderTarget(tex,layer,mipLevel);
		this.captureSubRenderBuffer(pixels,x,y);
		this.setRenderTarget(old,oldLayer,oldMip);
		if(oldCount > 1) {
			var _g2 = 1;
			var _g11 = oldCount;
			while(_g2 < _g11) {
				var i1 = _g2++;
				if(this.curTargets[i1] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i1,3553,tex.t.t,0);
				}
			}
			this.setDrawBuffers(oldCount);
			this.numTargets = oldCount;
		}
		return pixels;
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw new js__$Boot_HaxeError("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw new js__$Boot_HaxeError("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null) {
			this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
			this.gl.framebufferRenderbuffer(36160,36128,36161,tex.depthBuffer.hasStencil() ? tex.depthBuffer.b.r : null);
		} else {
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
			this.gl.framebufferRenderbuffer(36160,36128,36161,null);
		}
		this.gl.viewport(0,0,tex.width >> mipLevel,tex.height >> mipLevel);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw new js__$Boot_HaxeError("Invalid frame buffer: " + code);
			}
		}
	}
	,setRenderTargets: function(textures) {
		this.unbindTargets();
		this.setRenderTarget(textures[0]);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var _g = 1;
		var _g1 = textures.length;
		while(_g < _g1) {
			var i = _g++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
		this.setDrawBuffers(textures.length);
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		var ready = false;
		if(window.document.readyState == "complete") {
			var f = onCreate;
			haxe_Timer.delay(function() {
				f(false);
			},1);
		} else {
			window.addEventListener("load",function(_) {
				if(!ready) {
					ready = true;
					onCreate(false);
				}
			});
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
		}
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		default:
			return false;
		}
	}
	,captureSubRenderBuffer: function(pixels,x,y) {
		if(this.curTarget == null) {
			throw new js__$Boot_HaxeError("Can't capture main render buffer in GL");
		}
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var buffer = pixels.bytes.b;
		switch(this.curTarget.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(buffer.buffer);
			break;
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(buffer.buffer);
			break;
		case 16:case 17:
			buffer = new Uint32Array(buffer.buffer);
			break;
		default:
		}
		this.gl.readPixels(x,y,pixels.width,pixels.height,this.getChannels(this.curTarget.t),this.curTarget.t.pixelFmt,buffer);
		var error = this.gl.getError();
		if(error != 0) {
			throw new js__$Boot_HaxeError("Failed to capture pixels (error " + error + ")");
		}
		pixels.set_innerFormat(this.curTarget.format);
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl__$ManagedBuffer_FreeCell = function(pos,count,next) {
	this.pos = pos;
	this.count = count;
	this.next = next;
};
$hxClasses["h3d.impl._ManagedBuffer.FreeCell"] = h3d_impl__$ManagedBuffer_FreeCell;
h3d_impl__$ManagedBuffer_FreeCell.__name__ = "h3d.impl._ManagedBuffer.FreeCell";
h3d_impl__$ManagedBuffer_FreeCell.prototype = {
	__class__: h3d_impl__$ManagedBuffer_FreeCell
};
var h3d_impl_ManagedBuffer = function(stride,size,flags) {
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.size = size;
	this.stride = stride;
	this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
	this.mem = h3d_Engine.CURRENT.mem;
	this.mem.allocManaged(this);
};
$hxClasses["h3d.impl.ManagedBuffer"] = h3d_impl_ManagedBuffer;
h3d_impl_ManagedBuffer.__name__ = "h3d.impl.ManagedBuffer";
h3d_impl_ManagedBuffer.prototype = {
	uploadVertexBuffer: function(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	,allocPosition: function(nvert,align) {
		var free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				var d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		var pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	,allocBuffer: function(b) {
		var align = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : 1;
		var p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	,freeBuffer: function(b) {
		var prev = null;
		var f = this.freeList;
		var nvert = b.vertices;
		var end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					var n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			this.dispose();
		}
	}
	,dispose: function() {
		this.mem.freeManaged(this);
	}
	,__class__: h3d_impl_ManagedBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.bufferCount = 0;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var this1 = new Array(0);
		var indices = this1;
		var _g = 0;
		while(_g < 65533) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		var this2 = new Array(0);
		var indices1 = this2;
		var p = 0;
		var _g1 = 0;
		var _g2 = 16383;
		while(_g1 < _g2) {
			var i1 = _g1++;
			var k = i1 << 2;
			indices1.push(k);
			indices1.push(k + 1);
			indices1.push(k + 2);
			indices1.push(k + 2);
			indices1.push(k + 1);
			indices1.push(k + 3);
		}
		indices1.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices1);
	}
	,garbage: function() {
	}
	,cleanManagedBuffers: function() {
		var _g = 1;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			var b = this.buffers[i];
			var prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	,allocManaged: function(m) {
		if(m.vbuf != null) {
			return;
		}
		var mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw new js__$Boot_HaxeError("Too many buffers");
				}
				throw new js__$Boot_HaxeError("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	,freeManaged: function(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
		if((m.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var c = this.buffers[0];
			var prev = null;
			while(c != null) {
				if(c == m) {
					if(prev == null) {
						this.buffers[0] = m.next;
					} else {
						prev.next = m.next;
					}
					break;
				}
				prev = c;
				c = c.next;
			}
		}
	}
	,allocBuffer: function(b,stride) {
		var max = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 65532 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 65533 : 65534;
		if(b.vertices > max) {
			if(max == 65534) {
				throw new js__$Boot_HaxeError("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			var rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			var n = b;
			while(n.next != null) n = n.next;
			var flags = [];
			var _g = 0;
			var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if((b.flags & 1 << f._hx_index) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var flags1 = null;
			if((b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0) {
				if(flags1 == null) {
					flags1 = [];
				}
				flags1.push(h3d_BufferFlag.Dynamic);
			}
			if((b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) != 0) {
				if(flags1 == null) {
					flags1 = [];
				}
				flags1.push(h3d_BufferFlag.UniformBuffer);
			}
			var m = new h3d_impl_ManagedBuffer(stride,b.vertices,flags1);
			m.next = this.buffers[0];
			this.buffers[0] = m;
			if(!m.allocBuffer(b)) {
				throw new js__$Boot_HaxeError("assert");
			}
			return;
		}
		var m1 = this.buffers[stride];
		var prev = null;
		while(m1 != null) {
			if(m1.allocBuffer(b)) {
				return;
			}
			prev = m1;
			m1 = m1.next;
		}
		var align = (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : 0;
		if(m1 == null && align > 0) {
			var total = b.vertices;
			var size = total;
			while(size > 2048) {
				m1 = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m1 != null) {
					if(m1.allocBuffer(b)) {
						var flags2 = [];
						var _g2 = 0;
						var _g11 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g2 < _g11.length) {
							var f1 = _g11[_g2];
							++_g2;
							if((b.flags & 1 << f1._hx_index) != 0) {
								flags2.push(f1);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags2);
						return;
					}
					m1 = m1.next;
				}
			}
			b.vertices = total;
		}
		m1 = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m1;
		} else {
			prev.next = m1;
		}
		if(!m1.allocBuffer(b)) {
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,deleteIndexes: function(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * (i.is32 ? 4 : 2);
	}
	,allocIndexes: function(i) {
		i.ibuf = this.driver.allocIndexes(i.count,i.is32);
		this.indexes.push(i);
		this.usedMemory += i.count * (i.is32 ? 4 : 2);
	}
	,bpp: function(t) {
		return 4;
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && t.realloc == null) {
				continue;
			}
			if(force || t.get_lastFrame() < hxd_Timer.frameCount - 3600) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1.get_lastFrame() - t2.get_lastFrame();
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= t.width * t.height * this.bpp(t);
	}
	,allocTexture: function(t) {
		var free = this.cleanTextures(false);
		t.t = this.driver.allocTexture(t);
		if(t.t == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocTexture(t);
			return;
		}
		this.textures.push(t);
		this.texMemory += t.width * t.height * this.bpp(t);
	}
	,allocDepth: function(b) {
		var free = this.cleanTextures(false);
		b.b = this.driver.allocDepthBuffer(b);
		if(b.b == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocDepth(b);
			return;
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	,deleteDepth: function(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes != null) {
			this.triIndexes.dispose();
		}
		if(this.quadIndexes != null) {
			this.quadIndexes.dispose();
		}
		this.triIndexes = null;
		this.quadIndexes = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g2 = 0;
		var _g3 = this.depths.slice();
		while(_g2 < _g3.length) {
			var b = _g3[_g2];
			++_g2;
			b.dispose();
		}
		var _g4 = 0;
		var _g5 = this.buffers.slice();
		while(_g4 < _g5.length) {
			var b1 = _g5[_g4];
			++_g4;
			var b2 = b1;
			while(b2 != null) {
				b2.dispose();
				b2 = b2.next;
			}
		}
		var _g6 = 0;
		var _g7 = this.indexes.slice();
		while(_g6 < _g7.length) {
			var i = _g7[_g6];
			++_g6;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,freeMemorySize: function() {
		var size = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				var free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_RendererFX = function() { };
$hxClasses["h3d.impl.RendererFX"] = h3d_impl_RendererFX;
h3d_impl_RendererFX.__name__ = "h3d.impl.RendererFX";
h3d_impl_RendererFX.__isInterface__ = true;
h3d_impl_RendererFX.prototype = {
	__class__: h3d_impl_RendererFX
};
var h3d_impl_TextureCache = function(ctx) {
	this.position = 0;
	this.ctx = ctx;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,isCube) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format && isCube == ((t2.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		var flags = [h3d_mat_TextureFlags.Target];
		if(isCube) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,isCube) {
		if(isCube == null) {
			isCube = false;
		}
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format || isCube != ((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
			t = this.lookupTarget(name,width,height,format,isCube);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,allocTileTarget: function(name,tile,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = false;
		}
		return this.allocTarget(name,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y),defaultDepth,format);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.cache;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		this.cache = [];
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
$hxClasses["hxd.impl.AnyProps"] = hxd_impl_AnyProps;
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__ : "h3d.mat.Face", __constructs__ : ["None","Back","Front","Both"]
	,None: {_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__ : "h3d.mat.Blend", __constructs__ : ["One","Zero","SrcAlpha","SrcColor","DstAlpha","DstColor","OneMinusSrcAlpha","OneMinusSrcColor","OneMinusDstAlpha","OneMinusDstColor","ConstantColor","ConstantAlpha","OneMinusConstantColor","OneMinusConstantAlpha","SrcAlphaSaturate"]
	,One: {_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__ : "h3d.mat.Compare", __constructs__ : ["Always","Never","Equal","NotEqual","Greater","GreaterEqual","Less","LessEqual"]
	,Always: {_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__ : "h3d.mat.StencilOp", __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"]
	,Keep: {_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__ : "h3d.mat.MipMap", __constructs__ : ["None","Nearest","Linear"]
	,None: {_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__ : "h3d.mat.Filter", __constructs__ : ["Nearest","Linear"]
	,Nearest: {_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__ : "h3d.mat.Wrap", __constructs__ : ["Clamp","Repeat"]
	,Clamp: {_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__ : "h3d.mat.Operation", __constructs__ : ["Add","Sub","ReverseSub","Min","Max"]
	,Add: {_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__ : "h3d.mat.TextureFlags", __constructs__ : ["Target","Cube","MipMapped","ManualMipMapGen","IsNPOT","NoAlloc","Dynamic","AlphaPremultiplied","WasCleared","Loading","Serialize","IsArray"]
	,Target: {_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
var h3d_mat_DepthFormat = $hxEnums["h3d.mat.DepthFormat"] = { __ename__ : "h3d.mat.DepthFormat", __constructs__ : ["Depth16","Depth24","Depth24Stencil8"]
	,Depth16: {_hx_index:0,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24: {_hx_index:1,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24Stencil8: {_hx_index:2,__enum__:"h3d.mat.DepthFormat",toString:$estr}
};
h3d_mat_DepthFormat.__empty_constructs__ = [h3d_mat_DepthFormat.Depth16,h3d_mat_DepthFormat.Depth24,h3d_mat_DepthFormat.Depth24Stencil8];
var h3d_mat_DepthBuffer = function(width,height,format) {
	this.width = width;
	this.height = height;
	this.format = format;
	if(width > 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.DepthBuffer"] = h3d_mat_DepthBuffer;
h3d_mat_DepthBuffer.__name__ = "h3d.mat.DepthBuffer";
h3d_mat_DepthBuffer.getDefault = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_DepthBuffer.prototype = {
	hasStencil: function() {
		switch(this.format._hx_index) {
		case 0:case 1:
			return false;
		case 2:
			return true;
		}
	}
	,alloc: function() {
		h3d_Engine.CURRENT.mem.allocDepth(this);
	}
	,dispose: function() {
		if(this.b != null) {
			h3d_Engine.CURRENT.mem.deleteDepth(this);
			this.b = null;
		}
	}
	,isDisposed: function() {
		return this.b == null;
	}
	,__class__: h3d_mat_DepthBuffer
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function() {
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Pass.prototype = {
	setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,setBlendMode: function(b) {
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 1:
			var src1 = h3d_mat_Blend.SrcAlpha;
			var dst1 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src1);
			this.set_blendAlphaSrc(src1);
			this.set_blendDst(dst1);
			this.set_blendAlphaDst(dst1);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 2:
			var src2 = h3d_mat_Blend.SrcAlpha;
			var dst2 = h3d_mat_Blend.One;
			this.set_blendSrc(src2);
			this.set_blendAlphaSrc(src2);
			this.set_blendDst(dst2);
			this.set_blendAlphaDst(dst2);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 3:
			var src3 = h3d_mat_Blend.One;
			var dst3 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src3);
			this.set_blendAlphaSrc(src3);
			this.set_blendDst(dst3);
			this.set_blendAlphaDst(dst3);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 4:
			var src4 = h3d_mat_Blend.OneMinusDstColor;
			var dst4 = h3d_mat_Blend.One;
			this.set_blendSrc(src4);
			this.set_blendAlphaSrc(src4);
			this.set_blendDst(dst4);
			this.set_blendAlphaDst(dst4);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 5:
			var src5 = h3d_mat_Blend.DstColor;
			var dst5 = h3d_mat_Blend.Zero;
			this.set_blendSrc(src5);
			this.set_blendAlphaSrc(src5);
			this.set_blendDst(dst5);
			this.set_blendAlphaDst(dst5);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 6:
			var src6 = h3d_mat_Blend.DstColor;
			var dst6 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src6);
			this.set_blendAlphaSrc(src6);
			this.set_blendDst(dst6);
			this.set_blendAlphaDst(dst6);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 7:
			var src7 = h3d_mat_Blend.Zero;
			var dst7 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src7);
			this.set_blendAlphaSrc(src7);
			this.set_blendDst(dst7);
			this.set_blendAlphaDst(dst7);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 8:
			var src8 = h3d_mat_Blend.One;
			var dst8 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src8);
			this.set_blendAlphaSrc(src8);
			this.set_blendDst(dst8);
			this.set_blendAlphaDst(dst8);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 9:
			var src9 = h3d_mat_Blend.SrcAlpha;
			var dst9 = h3d_mat_Blend.One;
			this.set_blendSrc(src9);
			this.set_blendAlphaSrc(src9);
			this.set_blendDst(dst9);
			this.set_blendAlphaDst(dst9);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Stencil.prototype = {
	setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,__class__: h3d_mat_Stencil
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__ : "hxd.PixelFormat", __constructs__ : ["ARGB","BGRA","RGBA","RGBA16F","RGBA32F","R8","R16F","R32F","RG8","RG16F","RG32F","RGB8","RGB16F","RGB32F","SRGB","SRGB_ALPHA","RGB10A2","RG11B10UF","S3TC"]
	,ARGB: {_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:18,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF];
var h3d_mat_Texture = function(w,h,flags,format,allocPos) {
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) != 0) {
		this.realloc = function() {
		};
	}
	this.width = w;
	this.height = h;
	this.set_mipMap((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 ? h3d_mat_MipMap.Nearest : h3d_mat_MipMap.None);
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Wrap.Clamp);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.fromColor = function(color,alpha,allocPos) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t1 = new h3d_mat_Texture(1,1,null,null,allocPos);
	t1.clear(color,alpha);
	t1.realloc = function() {
		t1.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t1;
	return t1;
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.prototype = {
	set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_lastFrame: function() {
		return this._lastFrame;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,preventAutoDispose: function() {
		this.set_lastFrame(h3d_mat_Texture.PREVENT_AUTO_DISPOSE);
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width != 1 || this.height != 1) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw new js__$Boot_HaxeError("TODO");
			}
			var _g11 = 0;
			var _g2 = this.width * this.height;
			while(_g11 < _g2) {
				var i1 = _g11++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g3 = 0;
				var _g4 = this.get_layerCount();
				while(_g3 < _g4) {
					var i2 = _g3++;
					this.uploadPixels(p,0,i2);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && ((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) == 0 || layer == 5)) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = bmp.ctx.canvas.width;
		var height = bmp.ctx.canvas.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = pixels.width;
		var height = pixels.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,capturePixels: function(face,mipLevel,region) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		var old = this.get_lastFrame();
		this.preventAutoDispose();
		var pix = this.mem.driver.capturePixels(this,face,mipLevel,region);
		this.set_lastFrame(old);
		return pix;
	}
	,__class__: h3d_mat_Texture
};
var h3d_pass_Base = function(name) {
	this.name = name;
};
$hxClasses["h3d.pass.Base"] = h3d_pass_Base;
h3d_pass_Base.__name__ = "h3d.pass.Base";
h3d_pass_Base.prototype = {
	setContext: function(ctx) {
		this.ctx = ctx;
	}
	,dispose: function() {
	}
	,draw: function(passes,sort) {
	}
	,__class__: h3d_pass_Base
};
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.shaders = new hxsl_ShaderList(shader);
	this.manager = new h3d_pass_ShaderManager(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.prototype = {
	get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var rts = this.manager.compileShaders(this.shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,this.shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.primitive.render(this.get_engine());
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,1,0,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g2 = 0;
		var _g3 = this.values.length;
		while(_g2 < _g3) {
			var i3 = _g2++;
			this.values[i3] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g4 = 0;
			var _g5 = this.values.length;
			while(_g4 < _g5) {
				var i4 = _g4++;
				var a1 = this.values[i4];
				this.values[i4] = a1 + this.linear * (m - a1);
				var a2 = this.offsets[i4];
				this.offsets[i4] = a2 + this.linear * ((i4 == 0 ? 0 : (i4 * 2 - 0.5) / (i4 * qadj)) - a2);
			}
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this1 = this.shader;
			_this1.constModified = true;
			_this1.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this2 = this.shader;
			_this2.constModified = true;
			_this2.isCube__ = false;
		}
		var _this3 = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this3.x = x;
		_this3.y = y;
		_this3.z = 0.;
		_this3.w = 1.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this4 = this.shader.pixel__;
		var x1 = 0;
		var y1 = 1 / src.height;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this4.x = x1;
		_this4.y = y1;
		_this4.z = 0.;
		_this4.w = 1.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g2 = 0;
		var _g3 = faceCount;
		while(_g2 < _g3) {
			var i1 = _g2++;
			this.get_engine().pushTarget(output,i1);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i1];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
	var bbuf = this1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize1 = bbuf.array.length << 1;
		if(newSize1 < 128) {
			newSize1 = 128;
		}
		var newArray1 = new Float32Array(newSize1);
		newArray1.set(bbuf.array);
		bbuf.array = newArray1;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize2 = bbuf.array.length << 1;
		if(newSize2 < 128) {
			newSize2 = 128;
		}
		var newArray2 = new Float32Array(newSize2);
		newArray2.set(bbuf.array);
		bbuf.array = newArray2;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize3 = bbuf.array.length << 1;
		if(newSize3 < 128) {
			newSize3 = 128;
		}
		var newArray3 = new Float32Array(newSize3);
		newArray3.set(bbuf.array);
		bbuf.array = newArray3;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize4 = bbuf.array.length << 1;
		if(newSize4 < 128) {
			newSize4 = 128;
		}
		var newArray4 = new Float32Array(newSize4);
		newArray4.set(bbuf.array);
		bbuf.array = newArray4;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize5 = bbuf.array.length << 1;
		if(newSize5 < 128) {
			newSize5 = 128;
		}
		var newArray5 = new Float32Array(newSize5);
		newArray5.set(bbuf.array);
		bbuf.array = newArray5;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize6 = bbuf.array.length << 1;
		if(newSize6 < 128) {
			newSize6 = 128;
		}
		var newArray6 = new Float32Array(newSize6);
		newArray6.set(bbuf.array);
		bbuf.array = newArray6;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize7 = bbuf.array.length << 1;
		if(newSize7 < 128) {
			newSize7 = 128;
		}
		var newArray7 = new Float32Array(newSize7);
		newArray7.set(bbuf.array);
		bbuf.array = newArray7;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize8 = bbuf.array.length << 1;
		if(newSize8 < 128) {
			newSize8 = 128;
		}
		var newArray8 = new Float32Array(newSize8);
		newArray8.set(bbuf.array);
		bbuf.array = newArray8;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize9 = bbuf.array.length << 1;
		if(newSize9 < 128) {
			newSize9 = 128;
		}
		var newArray9 = new Float32Array(newSize9);
		newArray9.set(bbuf.array);
		bbuf.array = newArray9;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize10 = bbuf.array.length << 1;
		if(newSize10 < 128) {
			newSize10 = 128;
		}
		var newArray10 = new Float32Array(newSize10);
		newArray10.set(bbuf.array);
		bbuf.array = newArray10;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize11 = bbuf.array.length << 1;
		if(newSize11 < 128) {
			newSize11 = 128;
		}
		var newArray11 = new Float32Array(newSize11);
		newArray11.set(bbuf.array);
		bbuf.array = newArray11;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize12 = bbuf.array.length << 1;
		if(newSize12 < 128) {
			newSize12 = 128;
		}
		var newArray12 = new Float32Array(newSize12);
		newArray12.set(bbuf.array);
		bbuf.array = newArray12;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize13 = bbuf.array.length << 1;
		if(newSize13 < 128) {
			newSize13 = 128;
		}
		var newArray13 = new Float32Array(newSize13);
		newArray13.set(bbuf.array);
		bbuf.array = newArray13;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize14 = bbuf.array.length << 1;
		if(newSize14 < 128) {
			newSize14 = 128;
		}
		var newArray14 = new Float32Array(newSize14);
		newArray14.set(bbuf.array);
		bbuf.array = newArray14;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize15 = bbuf.array.length << 1;
		if(newSize15 < 128) {
			newSize15 = 128;
		}
		var newArray15 = new Float32Array(newSize15);
		newArray15.set(bbuf.array);
		bbuf.array = newArray15;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize16 = bbuf.array.length << 1;
		if(newSize16 < 128) {
			newSize16 = 128;
		}
		var newArray16 = new Float32Array(newSize16);
		newArray16.set(bbuf.array);
		bbuf.array = newArray16;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize17 = bbuf.array.length << 1;
		if(newSize17 < 128) {
			newSize17 = 128;
		}
		var newArray17 = new Float32Array(newSize17);
		newArray17.set(bbuf.array);
		bbuf.array = newArray17;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize18 = bbuf.array.length << 1;
		if(newSize18 < 128) {
			newSize18 = 128;
		}
		var newArray18 = new Float32Array(newSize18);
		newArray18.set(bbuf.array);
		bbuf.array = newArray18;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize19 = bbuf.array.length << 1;
		if(newSize19 < 128) {
			newSize19 = 128;
		}
		var newArray19 = new Float32Array(newSize19);
		newArray19.set(bbuf.array);
		bbuf.array = newArray19;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize20 = bbuf.array.length << 1;
		if(newSize20 < 128) {
			newSize20 = 128;
		}
		var newArray20 = new Float32Array(newSize20);
		newArray20.set(bbuf.array);
		bbuf.array = newArray20;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize21 = bbuf.array.length << 1;
		if(newSize21 < 128) {
			newSize21 = 128;
		}
		var newArray21 = new Float32Array(newSize21);
		newArray21.set(bbuf.array);
		bbuf.array = newArray21;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize22 = bbuf.array.length << 1;
		if(newSize22 < 128) {
			newSize22 = 128;
		}
		var newArray22 = new Float32Array(newSize22);
		newArray22.set(bbuf.array);
		bbuf.array = newArray22;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize23 = bbuf.array.length << 1;
		if(newSize23 < 128) {
			newSize23 = 128;
		}
		var newArray23 = new Float32Array(newSize23);
		newArray23.set(bbuf.array);
		bbuf.array = newArray23;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize24 = bbuf.array.length << 1;
		if(newSize24 < 128) {
			newSize24 = 128;
		}
		var newArray24 = new Float32Array(newSize24);
		newArray24.set(bbuf.array);
		bbuf.array = newArray24;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize25 = bbuf.array.length << 1;
		if(newSize25 < 128) {
			newSize25 = 128;
		}
		var newArray25 = new Float32Array(newSize25);
		newArray25.set(bbuf.array);
		bbuf.array = newArray25;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize26 = bbuf.array.length << 1;
		if(newSize26 < 128) {
			newSize26 = 128;
		}
		var newArray26 = new Float32Array(newSize26);
		newArray26.set(bbuf.array);
		bbuf.array = newArray26;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize27 = bbuf.array.length << 1;
		if(newSize27 < 128) {
			newSize27 = 128;
		}
		var newArray27 = new Float32Array(newSize27);
		newArray27.set(bbuf.array);
		bbuf.array = newArray27;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize28 = bbuf.array.length << 1;
		if(newSize28 < 128) {
			newSize28 = 128;
		}
		var newArray28 = new Float32Array(newSize28);
		newArray28.set(bbuf.array);
		bbuf.array = newArray28;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize29 = bbuf.array.length << 1;
		if(newSize29 < 128) {
			newSize29 = 128;
		}
		var newArray29 = new Float32Array(newSize29);
		newArray29.set(bbuf.array);
		bbuf.array = newArray29;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize30 = bbuf.array.length << 1;
		if(newSize30 < 128) {
			newSize30 = 128;
		}
		var newArray30 = new Float32Array(newSize30);
		newArray30.set(bbuf.array);
		bbuf.array = newArray30;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize31 = bbuf.array.length << 1;
		if(newSize31 < 128) {
			newSize31 = 128;
		}
		var newArray31 = new Float32Array(newSize31);
		newArray31.set(bbuf.array);
		bbuf.array = newArray31;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	dispose: function() {
		h3d_pass_ScreenFx.prototype.dispose.call(this);
		this.primitive.dispose();
	}
	,__class__: h3d_pass_Border
});
var h3d_pass_ColorMatrixShader = function() {
	this.maskChannel__ = new h3d_Vector();
	this.maskPower__ = 0;
	this.maskMatB__ = new h3d_Vector();
	this.maskMatA__ = new h3d_Vector();
	this.matrix2__ = new h3d_Matrix();
	this.matrix__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass.ColorMatrixShader"] = h3d_pass_ColorMatrixShader;
h3d_pass_ColorMatrixShader.__name__ = "h3d.pass.ColorMatrixShader";
h3d_pass_ColorMatrixShader.__super__ = h3d_shader_ScreenShader;
h3d_pass_ColorMatrixShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useAlpha__) {
			this.constBits |= 1;
		}
		if(this.useMask__) {
			this.constBits |= 2;
		}
		if(this.maskInvert__) {
			this.constBits |= 4;
		}
		if(this.hasSecondMatrix__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.matrix__;
		case 3:
			return this.useAlpha__;
		case 4:
			return this.useMask__;
		case 5:
			return this.maskInvert__;
		case 6:
			return this.hasSecondMatrix__;
		case 7:
			return this.matrix2__;
		case 8:
			return this.mask__;
		case 9:
			return this.maskMatA__;
		case 10:
			return this.maskMatB__;
		case 11:
			return this.maskPower__;
		case 12:
			return this.maskChannel__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 11:
			return this.maskPower__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_pass_ColorMatrixShader
});
var h3d_pass_ColorMatrix = function(m) {
	h3d_pass_ScreenFx.call(this,new h3d_pass_ColorMatrixShader());
	if(m != null) {
		this.shader.matrix__ = m;
	} else {
		this.shader.matrix__.identity();
	}
	this.shader.maskPower__ = 1;
	var _this = this.shader.maskChannel__;
	var x = 1;
	var y = 0;
	var z = 0;
	var w = 0;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.ColorMatrix"] = h3d_pass_ColorMatrix;
h3d_pass_ColorMatrix.__name__ = "h3d.pass.ColorMatrix";
h3d_pass_ColorMatrix.__super__ = h3d_pass_ScreenFx;
h3d_pass_ColorMatrix.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(src,out,mask,maskMatrix) {
		this.get_engine().pushTarget(out);
		this.shader.texture__ = src;
		var _this = this.shader;
		_this.constModified = true;
		_this.useMask__ = mask != null;
		if(mask != null) {
			this.shader.mask__ = mask;
			if(maskMatrix == null) {
				var _this1 = this.shader.maskMatA__;
				var x = 1;
				var y = 0;
				var z = 0;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this1.x = x;
				_this1.y = y;
				_this1.z = z;
				_this1.w = 1.;
				var _this2 = this.shader.maskMatB__;
				var x1 = 0;
				var y1 = 1;
				var z1 = 0;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				_this2.x = x1;
				_this2.y = y1;
				_this2.z = z1;
				_this2.w = 1.;
			} else {
				var _this3 = this.shader.maskMatA__;
				var x2 = maskMatrix.a;
				var y2 = maskMatrix.c;
				var z2 = maskMatrix.x;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				_this3.x = x2;
				_this3.y = y2;
				_this3.z = z2;
				_this3.w = 1.;
				var _this4 = this.shader.maskMatB__;
				var x3 = maskMatrix.b;
				var y3 = maskMatrix.d;
				var z3 = maskMatrix.y;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				_this4.x = x3;
				_this4.y = y3;
				_this4.z = z3;
				_this4.w = 1.;
			}
		}
		this.render();
		this.get_engine().popTarget();
	}
	,__class__: h3d_pass_ColorMatrix
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass);
	return;
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			var old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			var h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d_pass__$CubeCopy_CubeCopyShader;
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
var h3d_pass_Default = function(name) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	h3d_pass_Base.call(this,name);
	this.manager = new h3d_pass_ShaderManager(this.getOutputs());
	this.initGlobals();
};
$hxClasses["h3d.pass.Default"] = h3d_pass_Default;
h3d_pass_Default.__name__ = "h3d.pass.Default";
h3d_pass_Default.__super__ = h3d_pass_Base;
h3d_pass_Default.prototype = $extend(h3d_pass_Base.prototype,{
	getOutputs: function() {
		return [hxsl_Output.Value("output.color")];
	}
	,processShaders: function(p,shaders) {
		var p1 = this.ctx.extraShaders;
		while(p1 != null) {
			shaders = this.ctx.allocShaderList(p1.s,shaders);
			p1 = p1.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.manager.compileShaders(shaders,p.pass.batchMode);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			if(t == null) {
				p.texture = 0;
			} else {
				var _this = this.manager;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw new js__$Boot_HaxeError("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					var _g = t.type;
					var t2;
					if(_g._hx_index == 17) {
						var _g1 = _g.size;
						t2 = true;
					} else {
						t2 = false;
					}
					t1 = t2 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw new js__$Boot_HaxeError("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
		this.setGlobals();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		this.ctx.currentManager = this.manager;
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g2_o = passes.current;
		while(_g2_o != null) {
			var tmp = _g2_o;
			_g2_o = _g2_o.next;
			var p = tmp;
			var v = p.obj.absPos;
			this.manager.globals.map.h[this.globalModelView_id] = v;
			if(p.shader.globals.h.hasOwnProperty(this.globalModelViewInverse_id)) {
				var v1 = p.obj.getInvPos();
				this.manager.globals.map.h[this.globalModelViewInverse_id] = v1;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				this.ctx.engine.selectShader(p.shader);
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d_shader_Buffers(p.shader);
				} else {
					var s = p.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.manager.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,initGlobals: function() {
		var this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		var this2 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this2;
		var this3 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this3;
		var this4 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this4;
		var this5 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this5;
		var this6 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this6;
		var this7 = hxsl_Globals.allocID("camera.projFlip");
		this.cameraProjFlip_id = this7;
		var this8 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this8;
		var this9 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this9;
		var this10 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this10;
		var this11 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this11;
		var this12 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this12;
		var this13 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this13;
	}
	,setGlobals: function() {
		var v = this.ctx.camera.mcam;
		this.manager.globals.map.h[this.cameraView_id] = v;
		var v1 = this.ctx.camera.zNear;
		this.manager.globals.map.h[this.cameraNear_id] = v1;
		var v2 = this.ctx.camera.zFar;
		this.manager.globals.map.h[this.cameraFar_id] = v2;
		var v3 = this.ctx.camera.mproj;
		this.manager.globals.map.h[this.cameraProj_id] = v3;
		var v4 = this.ctx.camera.pos;
		this.manager.globals.map.h[this.cameraPos_id] = v4;
		var v5 = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.h[this.cameraProjDiag_id] = v5;
		var v6 = this.ctx.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.ctx.engine.getCurrentTarget() != null ? -1 : 1;
		this.manager.globals.map.h[this.cameraProjFlip_id] = v6;
		var v7 = this.ctx.camera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v7;
		var v8 = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v8;
		var v9 = this.ctx.time;
		this.manager.globals.map.h[this.globalTime_id] = v9;
		var v10 = new h3d_Vector(2 / this.ctx.engine.width,2 / this.ctx.engine.height);
		this.manager.globals.map.h[this.pixelSize_id] = v10;
	}
	,__class__: h3d_pass_Default
});
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Default.call(this,"shadow");
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
$hxClasses["h3d.pass.Shadows"] = h3d_pass_Shadows;
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Default;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Default.prototype,{
	set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,dispose: function() {
		h3d_pass_Default.prototype.dispose.call(this);
		this.blur.dispose();
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		var _gthis = this;
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				break;
			case 3:
				var tmp1;
				if(this.staticTexture != null) {
					var _this1 = this.staticTexture;
					tmp1 = _this1.t == null && _this1.realloc == null;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				break;
			}
		}
		switch(this.mode._hx_index) {
		case 0:
			passes.clear();
			break;
		case 1:
			if(this.ctx.computingStatic) {
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
			} else {
				passes.clear();
			}
			break;
		case 2:
			if(this.ctx.computingStatic) {
				passes.clear();
			}
			break;
		case 3:
			var head1 = null;
			var prev1 = null;
			var disc1 = passes.discarded;
			var discQueue1 = passes.lastDisc;
			var cur1 = passes.current;
			while(cur1 != null) {
				if(cur1.pass.isStatic == _gthis.ctx.computingStatic) {
					if(head1 == null) {
						prev1 = cur1;
						head1 = prev1;
					} else {
						prev1.next = cur1;
						prev1 = cur1;
					}
				} else if(disc1 == null) {
					discQueue1 = cur1;
					disc1 = discQueue1;
				} else {
					discQueue1.next = cur1;
					discQueue1 = cur1;
				}
				cur1 = cur1.next;
			}
			if(prev1 != null) {
				prev1.next = null;
			}
			if(discQueue1 != null) {
				discQueue1.next = null;
			}
			passes.current = head1;
			passes.discarded = disc1;
			passes.lastDisc = discQueue1;
			break;
		}
		return true;
	}
	,__class__: h3d_pass_Shadows
});
var h3d_pass_DirShadowMap = function(light) {
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
	this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
	if(!this.customDepth) {
		this.depth = h3d_mat_DepthBuffer.getDefault();
	}
};
$hxClasses["h3d.pass.DirShadowMap"] = h3d_pass_DirShadowMap;
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,dispose: function() {
		h3d_pass_Shadows.prototype.dispose.call(this);
		if(this.customDepth && this.depth != null) {
			this.depth.dispose();
		}
		this.border.dispose();
	}
	,calcShadowBounds: function(camera) {
		var bounds = camera.orthoBounds;
		var mtmp = new h3d_Matrix();
		this.ctx.scene.iterVisibleMeshes(function(m) {
			if(m.primitive == null || !m.material.castShadows) {
				return;
			}
			var b = m.primitive.getBounds();
			if(b.xMin > b.xMax) {
				return;
			}
			var tmp = m.getAbsPos();
			mtmp.multiply3x4(tmp,camera.mcam);
			var x = b.xMin;
			var y = b.yMin;
			var z = b.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x1 = b.xMin;
			var y1 = b.yMin;
			var z1 = b.zMax;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p_x1 = x1;
			var p_y1 = y1;
			var p_z1 = z1;
			var px1 = p_x1 * mtmp._11 + p_y1 * mtmp._21 + p_z1 * mtmp._31 + mtmp._41;
			var py1 = p_x1 * mtmp._12 + p_y1 * mtmp._22 + p_z1 * mtmp._32 + mtmp._42;
			var pz1 = p_x1 * mtmp._13 + p_y1 * mtmp._23 + p_z1 * mtmp._33 + mtmp._43;
			p_x1 = px1;
			p_y1 = py1;
			p_z1 = pz1;
			if(p_x1 < bounds.xMin) {
				bounds.xMin = p_x1;
			}
			if(p_x1 > bounds.xMax) {
				bounds.xMax = p_x1;
			}
			if(p_y1 < bounds.yMin) {
				bounds.yMin = p_y1;
			}
			if(p_y1 > bounds.yMax) {
				bounds.yMax = p_y1;
			}
			if(p_z1 < bounds.zMin) {
				bounds.zMin = p_z1;
			}
			if(p_z1 > bounds.zMax) {
				bounds.zMax = p_z1;
			}
			var x2 = b.xMin;
			var y2 = b.yMax;
			var z2 = b.zMin;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p_x2 = x2;
			var p_y2 = y2;
			var p_z2 = z2;
			var px2 = p_x2 * mtmp._11 + p_y2 * mtmp._21 + p_z2 * mtmp._31 + mtmp._41;
			var py2 = p_x2 * mtmp._12 + p_y2 * mtmp._22 + p_z2 * mtmp._32 + mtmp._42;
			var pz2 = p_x2 * mtmp._13 + p_y2 * mtmp._23 + p_z2 * mtmp._33 + mtmp._43;
			p_x2 = px2;
			p_y2 = py2;
			p_z2 = pz2;
			if(p_x2 < bounds.xMin) {
				bounds.xMin = p_x2;
			}
			if(p_x2 > bounds.xMax) {
				bounds.xMax = p_x2;
			}
			if(p_y2 < bounds.yMin) {
				bounds.yMin = p_y2;
			}
			if(p_y2 > bounds.yMax) {
				bounds.yMax = p_y2;
			}
			if(p_z2 < bounds.zMin) {
				bounds.zMin = p_z2;
			}
			if(p_z2 > bounds.zMax) {
				bounds.zMax = p_z2;
			}
			var x3 = b.xMin;
			var y3 = b.yMax;
			var z3 = b.zMax;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var p_x3 = x3;
			var p_y3 = y3;
			var p_z3 = z3;
			var px3 = p_x3 * mtmp._11 + p_y3 * mtmp._21 + p_z3 * mtmp._31 + mtmp._41;
			var py3 = p_x3 * mtmp._12 + p_y3 * mtmp._22 + p_z3 * mtmp._32 + mtmp._42;
			var pz3 = p_x3 * mtmp._13 + p_y3 * mtmp._23 + p_z3 * mtmp._33 + mtmp._43;
			p_x3 = px3;
			p_y3 = py3;
			p_z3 = pz3;
			if(p_x3 < bounds.xMin) {
				bounds.xMin = p_x3;
			}
			if(p_x3 > bounds.xMax) {
				bounds.xMax = p_x3;
			}
			if(p_y3 < bounds.yMin) {
				bounds.yMin = p_y3;
			}
			if(p_y3 > bounds.yMax) {
				bounds.yMax = p_y3;
			}
			if(p_z3 < bounds.zMin) {
				bounds.zMin = p_z3;
			}
			if(p_z3 > bounds.zMax) {
				bounds.zMax = p_z3;
			}
			var x4 = b.xMax;
			var y4 = b.yMin;
			var z4 = b.zMin;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var p_x4 = x4;
			var p_y4 = y4;
			var p_z4 = z4;
			var px4 = p_x4 * mtmp._11 + p_y4 * mtmp._21 + p_z4 * mtmp._31 + mtmp._41;
			var py4 = p_x4 * mtmp._12 + p_y4 * mtmp._22 + p_z4 * mtmp._32 + mtmp._42;
			var pz4 = p_x4 * mtmp._13 + p_y4 * mtmp._23 + p_z4 * mtmp._33 + mtmp._43;
			p_x4 = px4;
			p_y4 = py4;
			p_z4 = pz4;
			if(p_x4 < bounds.xMin) {
				bounds.xMin = p_x4;
			}
			if(p_x4 > bounds.xMax) {
				bounds.xMax = p_x4;
			}
			if(p_y4 < bounds.yMin) {
				bounds.yMin = p_y4;
			}
			if(p_y4 > bounds.yMax) {
				bounds.yMax = p_y4;
			}
			if(p_z4 < bounds.zMin) {
				bounds.zMin = p_z4;
			}
			if(p_z4 > bounds.zMax) {
				bounds.zMax = p_z4;
			}
			var x5 = b.xMax;
			var y5 = b.yMin;
			var z5 = b.zMax;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var p_x5 = x5;
			var p_y5 = y5;
			var p_z5 = z5;
			var px5 = p_x5 * mtmp._11 + p_y5 * mtmp._21 + p_z5 * mtmp._31 + mtmp._41;
			var py5 = p_x5 * mtmp._12 + p_y5 * mtmp._22 + p_z5 * mtmp._32 + mtmp._42;
			var pz5 = p_x5 * mtmp._13 + p_y5 * mtmp._23 + p_z5 * mtmp._33 + mtmp._43;
			p_x5 = px5;
			p_y5 = py5;
			p_z5 = pz5;
			if(p_x5 < bounds.xMin) {
				bounds.xMin = p_x5;
			}
			if(p_x5 > bounds.xMax) {
				bounds.xMax = p_x5;
			}
			if(p_y5 < bounds.yMin) {
				bounds.yMin = p_y5;
			}
			if(p_y5 > bounds.yMax) {
				bounds.yMax = p_y5;
			}
			if(p_z5 < bounds.zMin) {
				bounds.zMin = p_z5;
			}
			if(p_z5 > bounds.zMax) {
				bounds.zMax = p_z5;
			}
			var x6 = b.xMax;
			var y6 = b.yMax;
			var z6 = b.zMin;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var p_x6 = x6;
			var p_y6 = y6;
			var p_z6 = z6;
			var px6 = p_x6 * mtmp._11 + p_y6 * mtmp._21 + p_z6 * mtmp._31 + mtmp._41;
			var py6 = p_x6 * mtmp._12 + p_y6 * mtmp._22 + p_z6 * mtmp._32 + mtmp._42;
			var pz6 = p_x6 * mtmp._13 + p_y6 * mtmp._23 + p_z6 * mtmp._33 + mtmp._43;
			p_x6 = px6;
			p_y6 = py6;
			p_z6 = pz6;
			if(p_x6 < bounds.xMin) {
				bounds.xMin = p_x6;
			}
			if(p_x6 > bounds.xMax) {
				bounds.xMax = p_x6;
			}
			if(p_y6 < bounds.yMin) {
				bounds.yMin = p_y6;
			}
			if(p_y6 > bounds.yMax) {
				bounds.yMax = p_y6;
			}
			if(p_z6 < bounds.zMin) {
				bounds.zMin = p_z6;
			}
			if(p_z6 > bounds.zMax) {
				bounds.zMax = p_z6;
			}
			var x7 = b.xMax;
			var y7 = b.yMax;
			var z7 = b.zMax;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var p_x7 = x7;
			var p_y7 = y7;
			var p_z7 = z7;
			var px7 = p_x7 * mtmp._11 + p_y7 * mtmp._21 + p_z7 * mtmp._31 + mtmp._41;
			var py7 = p_x7 * mtmp._12 + p_y7 * mtmp._22 + p_z7 * mtmp._32 + mtmp._42;
			var pz7 = p_x7 * mtmp._13 + p_y7 * mtmp._23 + p_z7 * mtmp._33 + mtmp._43;
			p_x7 = px7;
			p_y7 = py7;
			p_z7 = pz7;
			if(p_x7 < bounds.xMin) {
				bounds.xMin = p_x7;
			}
			if(p_x7 > bounds.xMax) {
				bounds.xMax = p_x7;
			}
			if(p_y7 < bounds.yMin) {
				bounds.yMin = p_y7;
			}
			if(p_y7 > bounds.yMax) {
				bounds.yMax = p_y7;
			}
			if(p_z7 < bounds.zMin) {
				bounds.zMin = p_z7;
			}
			if(p_z7 > bounds.zMax) {
				bounds.zMax = p_z7;
			}
		});
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var _g = 0;
			var _g1 = this.ctx.camera.getFrustumCorners();
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				var m1 = camera.mcam;
				var px8 = pt.x * m1._11 + pt.y * m1._21 + pt.z * m1._31 + pt.w * m1._41;
				var py8 = pt.x * m1._12 + pt.y * m1._22 + pt.z * m1._32 + pt.w * m1._42;
				var pz8 = pt.x * m1._13 + pt.y * m1._23 + pt.z * m1._33 + pt.w * m1._43;
				var pw = pt.x * m1._14 + pt.y * m1._24 + pt.z * m1._34 + pt.w * m1._44;
				pt.x = px8;
				pt.y = py8;
				pt.z = pz8;
				pt.w = pw;
				var x8 = pt.x;
				var y8 = pt.y;
				var z8 = pt.z;
				if(x8 < cameraBounds.xMin) {
					cameraBounds.xMin = x8;
				}
				if(x8 > cameraBounds.xMax) {
					cameraBounds.xMax = x8;
				}
				if(y8 < cameraBounds.yMin) {
					cameraBounds.yMin = y8;
				}
				if(y8 > cameraBounds.yMax) {
					cameraBounds.yMax = y8;
				}
				if(z8 < cameraBounds.zMin) {
					cameraBounds.zMin = z8;
				}
				if(z8 > cameraBounds.zMax) {
					cameraBounds.zMax = z8;
				}
			}
			cameraBounds.zMin = bounds.zMin;
			bounds.intersection(bounds,cameraBounds);
		}
		bounds.scaleCenter(1.01);
	}
	,setGlobals: function() {
		h3d_pass_Shadows.prototype.setGlobals.call(this);
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			this.calcShadowBounds(this.lightCamera);
			this.lightCamera.update();
		}
		var v = this.getShadowProj();
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this1 = this.dshader;
		_this1.constModified = true;
		_this1.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this2 = this.dshader;
		_this2.constModified = true;
		_this2.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this3 = this.dshader;
		_this3.constModified = true;
		_this3.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this4 = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this4.x = x;
		_this4.y = y;
		_this4.z = 0.;
		_this4.w = 1.;
		this.dshader.pcfScale__ = this.pcfScale;
		var _this5 = this.dshader;
		_this5.constModified = true;
		_this5.pcfQuality__ = this.pcfQuality;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col1 = cur.obj.cullingCollider;
			var tmp;
			if(col1 == null) {
				tmp = true;
			} else {
				if(col1 != prevCollider) {
					prevCollider = col1;
					prevResult = f(col1);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
			} else {
				var _this1 = this.lightCamera.target;
				var x1 = ldir.x;
				var y1 = ldir.y;
				var z1 = ldir.z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				_this1.x = x1;
				_this1.y = y1;
				_this1.z = z1;
				_this1.w = 1.;
				this.lightCamera.target.normalize();
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this2 = this.lightCamera.pos;
			_this2.x = ct.x;
			_this2.y = ct.y;
			_this2.z = ct.z;
			_this2.w = ct.w;
			this.lightCamera.update();
		}
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = texture;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			texture = merge;
		}
		if(this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !this.ctx.computingStatic)) {
			this.blur.apply(this.ctx,texture);
		}
		this.syncShader(texture);
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_Vector();
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d_pass_DefaultShadowMap;
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.setGlobalID(this.shadowMapId,{ texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R});
		this.ctx.setGlobalID(this.shadowProjId,this.getShadowProj());
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass__$HardwarePick_FixedColor = function() {
	this.viewport__ = new h3d_Vector();
	this.colorID__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._HardwarePick.FixedColor"] = h3d_pass__$HardwarePick_FixedColor;
h3d_pass__$HardwarePick_FixedColor.__name__ = "h3d.pass._HardwarePick.FixedColor";
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
h3d_pass__$HardwarePick_FixedColor.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_pass__$HardwarePick_FixedColor
});
var h3d_pass_HardwarePick = function() {
	this.pickedIndex = -1;
	this.fixedColor = new h3d_pass__$HardwarePick_FixedColor();
	h3d_pass_Default.call(this,"hwpick");
	this.material = new h3d_mat_Pass("");
	var _this = this.material;
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	_this.set_blendSrc(src);
	_this.set_blendAlphaSrc(src);
	_this.set_blendDst(dst);
	_this.set_blendAlphaDst(dst);
	this.texOut = new h3d_mat_Texture(3,3,[h3d_mat_TextureFlags.Target]);
	this.texOut.depthBuffer = new h3d_mat_DepthBuffer(3,3);
};
$hxClasses["h3d.pass.HardwarePick"] = h3d_pass_HardwarePick;
h3d_pass_HardwarePick.__name__ = "h3d.pass.HardwarePick";
h3d_pass_HardwarePick.__super__ = h3d_pass_Default;
h3d_pass_HardwarePick.prototype = $extend(h3d_pass_Default.prototype,{
	dispose: function() {
		h3d_pass_Default.prototype.dispose.call(this);
		this.texOut.dispose();
		this.texOut.depthBuffer.dispose();
	}
	,getOutputs: function() {
		return [hxsl_Output.Value("output.colorID")];
	}
	,drawObject: function(p) {
		h3d_pass_Default.prototype.drawObject.call(this,p);
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
	}
	,draw: function(passes,sort) {
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var cur = tmp;
			var mask = 268435392;
			cur.pass.bits &= ~mask;
			cur.pass.bits |= this.material.bits & mask;
		}
		this.colorID = 0;
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		var _this1 = this.fixedColor.viewport__;
		var x = -(this.pickX * 2 / this.ctx.engine.width - 1);
		var y = this.pickY * 2 / this.ctx.engine.height - 1;
		var z = this.ctx.engine.width / this.texOut.width;
		var w = this.ctx.engine.height / this.texOut.height;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = z;
		_this1.w = w;
		this.ctx.engine.pushTarget(this.texOut);
		this.ctx.engine.clear(-16777216,1);
		this.ctx.extraShaders = this.ctx.allocShaderList(this.fixedColor);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.extraShaders = null;
		this.ctx.engine.popTarget();
		var _g1_o = passes.current;
		while(_g1_o != null) {
			var tmp1 = _g1_o;
			_g1_o = _g1_o.next;
			var cur1 = tmp1;
			cur1.pass.set_blendSrc(cur1.pass.blendSrc);
			cur1.pass.set_blendDst(cur1.pass.blendDst);
			cur1.pass.set_blendOp(cur1.pass.blendOp);
			cur1.pass.set_blendAlphaSrc(cur1.pass.blendAlphaSrc);
			cur1.pass.set_blendAlphaDst(cur1.pass.blendAlphaDst);
			cur1.pass.set_blendAlphaOp(cur1.pass.blendAlphaOp);
			cur1.pass.colorMask = cur1.pass.colorMask;
		}
		this.ctx.engine.clear(null,null,0);
		var pix = this.texOut.capturePixels();
		this.pickedIndex = (pix.getPixel(pix.width >> 1,pix.height >> 1) & 16777215) - 1;
	}
	,__class__: h3d_pass_HardwarePick
});
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
$hxClasses["h3d.pass.PassList"] = h3d_pass_PassList;
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	clear: function() {
		if(this.current == null) {
			return;
		}
		if(this.discarded == null) {
			this.discarded = this.current;
		} else {
			this.lastDisc.next = this.current;
		}
		var p = this.current;
		while(p.next != null) p = p.next;
		this.lastDisc = p;
		this.current = null;
	}
	,__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.PassObject"] = h3d_pass_PassObject;
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	__class__: h3d_pass_PassObject
};
var h3d_pass_ShaderManager = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.globals = new hxsl_Globals();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.ShaderManager"] = h3d_pass_ShaderManager;
h3d_pass_ShaderManager.__name__ = "h3d.pass.ShaderManager";
h3d_pass_ShaderManager.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _g1 = type.t;
			var n = type.size;
			var v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(n) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return n;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m1 = v;
			out[pos++] = m1._11;
			out[pos++] = m1._21;
			out[pos++] = m1._31;
			out[pos++] = m1._41;
			out[pos++] = m1._12;
			out[pos++] = m1._22;
			out[pos++] = m1._32;
			out[pos++] = m1._42;
			out[pos++] = m1._13;
			out[pos++] = m1._23;
			out[pos++] = m1._33;
			out[pos++] = m1._43;
			out[pos++] = m1._14;
			out[pos++] = m1._24;
			out[pos++] = m1._34;
			out[pos++] = m1._44;
			return 16;
		case 8:
			var m2 = v;
			out[pos++] = m2._11;
			out[pos++] = m2._21;
			out[pos++] = m2._31;
			out[pos++] = m2._41;
			out[pos++] = m2._12;
			out[pos++] = m2._22;
			out[pos++] = m2._32;
			out[pos++] = m2._42;
			out[pos++] = m2._13;
			out[pos++] = m2._23;
			out[pos++] = m2._33;
			out[pos++] = m2._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _g4 = type.size;
			var _g3 = type.t;
			switch(_g3._hx_index) {
			case 3:
				if(_g4._hx_index == 0) {
					var len = _g4.v;
					var v2 = v;
					var size = 0;
					var count = v2.length < len ? v2.length : len;
					var _g2 = 0;
					var _g11 = count;
					while(_g2 < _g11) {
						var i = _g2++;
						out[pos++] = v2[i];
					}
					return len;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g3.size == 4) {
					if(_g3.t._hx_index == 1) {
						if(_g4._hx_index == 0) {
							var len1 = _g4.v;
							var v3 = v;
							var _g5 = 0;
							var _g12 = len1;
							while(_g5 < _g12) {
								var i1 = _g5++;
								var n1 = v3[i1];
								if(n1 == null) {
									break;
								}
								out[pos++] = n1.x;
								out[pos++] = n1.y;
								out[pos++] = n1.z;
								out[pos++] = n1.w;
							}
							return len1 * 4;
						} else {
							throw new js__$Boot_HaxeError("assert " + Std.string(type));
						}
					} else if(_g4._hx_index == 0) {
						var len2 = _g4.v;
						var t = _g3;
						var v4 = v;
						var size1 = 0;
						var _g6 = 0;
						var _g13 = len2;
						while(_g6 < _g13) {
							var i2 = _g6++;
							var n2 = v4[i2];
							if(n2 == null) {
								break;
							}
							size1 = this.fillRec(n2,t,out,pos);
							pos += size1;
						}
						return len2 * size1;
					} else {
						throw new js__$Boot_HaxeError("assert " + Std.string(type));
					}
				} else if(_g4._hx_index == 0) {
					var len3 = _g4.v;
					var t1 = _g3;
					var v5 = v;
					var size2 = 0;
					var _g7 = 0;
					var _g14 = len3;
					while(_g7 < _g14) {
						var i3 = _g7++;
						var n3 = v5[i3];
						if(n3 == null) {
							break;
						}
						size2 = this.fillRec(n3,t1,out,pos);
						pos += size2;
					}
					return len3 * size2;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g4._hx_index == 0) {
					var len4 = _g4.v;
					var v6 = v;
					var _g8 = 0;
					var _g15 = len4;
					while(_g8 < _g15) {
						var i4 = _g8++;
						var m3 = v6[i4];
						if(m3 == null) {
							break;
						}
						out[pos++] = m3._11;
						out[pos++] = m3._21;
						out[pos++] = m3._31;
						out[pos++] = m3._41;
						out[pos++] = m3._12;
						out[pos++] = m3._22;
						out[pos++] = m3._32;
						out[pos++] = m3._42;
						out[pos++] = m3._13;
						out[pos++] = m3._23;
						out[pos++] = m3._33;
						out[pos++] = m3._43;
					}
					return len4 * 12;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			default:
				if(_g4._hx_index == 0) {
					var len5 = _g4.v;
					var t2 = _g3;
					var v7 = v;
					var size3 = 0;
					var _g9 = 0;
					var _g16 = len5;
					while(_g9 < _g16) {
						var i5 = _g9++;
						var n4 = v7[i5];
						if(n4 == null) {
							break;
						}
						size3 = this.fillRec(n4,t2,out,pos);
						pos += size3;
					}
					return len5 * size3;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var s1 = s.vertex;
		var g = s1.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		var s2 = s.fragment;
		var g1 = s2.globals;
		var ptr1 = buf.fragment.globals;
		while(g1 != null) {
			var v1 = _gthis.globals.map.h[g1.gid];
			if(v1 == null) {
				if(g1.path == "__consts__") {
					_gthis.fillRec(s2.consts,g1.type,ptr1,g1.pos);
					g1 = g1.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g1.path);
			}
			_gthis.fillRec(v1,g1.type,ptr1,g1.pos);
			g1 = g1.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var si2 = shaders;
				var n = p.instance;
				while(--n > 0) si2 = si2.next;
				var v4 = si2.s.getParamValue(p.index);
				if(v4 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si2.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p1 = s1.textures;
		while(p1 != null) {
			var this1 = buf1.tex;
			var index2 = tid++;
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var val;
			if(p1.perObjectGlobal != null) {
				var v5 = _gthis.globals.map.h[p1.perObjectGlobal.gid];
				if(v5 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p1.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p1.perObjectGlobal.path));
				}
				var _g2 = p1.type;
				var val1;
				if(_g2._hx_index == 17) {
					var _g11 = _g2.size;
					val1 = true;
				} else {
					val1 = false;
				}
				val = val1 ? v5.texture : v5;
			} else {
				var si3 = shaders;
				var n1 = p1.instance;
				while(--n1 > 0) si3 = si3.next;
				var v6 = si3.s.getParamValue(p1.index);
				if(v6 == null && !opt) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si3.s) + "." + p1.name);
				}
				val = v6;
			}
			this1[index2] = val;
			p1 = p1.next;
		}
		var p2 = s1.buffers;
		var bid = 0;
		while(p2 != null) {
			var opt1 = !h3d_pass_ShaderManager.STRICT;
			if(opt1 == null) {
				opt1 = false;
			}
			var b;
			if(p2.perObjectGlobal != null) {
				var v7 = _gthis.globals.map.h[p2.perObjectGlobal.gid];
				if(v7 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p2.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p2.perObjectGlobal.path));
				}
				var _g3 = p2.type;
				var b1;
				if(_g3._hx_index == 17) {
					var _g12 = _g3.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v7.texture : v7;
			} else {
				var si4 = shaders;
				var n2 = p2.instance;
				while(--n2 > 0) si4 = si4.next;
				var v8 = si4.s.getParamValue(p2.index);
				if(v8 == null && !opt1) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si4.s) + "." + p2.name);
				}
				b = v8;
			}
			buf1.buffers[bid++] = b;
			p2 = p2.next;
		}
		var buf2 = buf.fragment;
		var s2 = s.fragment;
		var p3 = s2.params;
		var ptr1 = buf2.params;
		while(p3 != null) {
			var v9;
			if(p3.perObjectGlobal == null) {
				if(p3.type == hxsl_Type.TFloat) {
					var index3 = p3.instance;
					var i1;
					if(curInstance == index3) {
						i1 = curInstanceValue;
					} else {
						var si5 = shaders;
						curInstance = index3;
						while(--index3 > 0) si5 = si5.next;
						curInstanceValue = si5.s;
						i1 = curInstanceValue;
					}
					ptr1[p3.pos] = i1.getParamFloatValue(p3.index);
					p3 = p3.next;
					continue;
				}
				var index4 = p3.instance;
				var v10;
				if(curInstance == index4) {
					v10 = curInstanceValue;
				} else {
					var si6 = shaders;
					curInstance = index4;
					while(--index4 > 0) si6 = si6.next;
					curInstanceValue = si6.s;
					v10 = curInstanceValue;
				}
				v9 = v10.getParamValue(p3.index);
				if(v9 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(curInstanceValue) + "." + p3.name);
				}
			} else if(p3.perObjectGlobal != null) {
				var v11 = _gthis.globals.map.h[p3.perObjectGlobal.gid];
				if(v11 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p3.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p3.perObjectGlobal.path));
				}
				var _g4 = p3.type;
				var v12;
				if(_g4._hx_index == 17) {
					var _g13 = _g4.size;
					v12 = true;
				} else {
					v12 = false;
				}
				v9 = v12 ? v11.texture : v11;
			} else {
				var si7 = shaders;
				var n3 = p3.instance;
				while(--n3 > 0) si7 = si7.next;
				var v13 = si7.s.getParamValue(p3.index);
				if(v13 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si7.s) + "." + p3.name);
				}
				v9 = v13;
			}
			_gthis.fillRec(v9,p3.type,ptr1,p3.pos);
			p3 = p3.next;
		}
		var tid1 = 0;
		var p4 = s2.textures;
		while(p4 != null) {
			var this2 = buf2.tex;
			var index5 = tid1++;
			var opt2 = !h3d_pass_ShaderManager.STRICT;
			if(opt2 == null) {
				opt2 = false;
			}
			var val2;
			if(p4.perObjectGlobal != null) {
				var v14 = _gthis.globals.map.h[p4.perObjectGlobal.gid];
				if(v14 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p4.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p4.perObjectGlobal.path));
				}
				var _g5 = p4.type;
				var val3;
				if(_g5._hx_index == 17) {
					var _g14 = _g5.size;
					val3 = true;
				} else {
					val3 = false;
				}
				val2 = val3 ? v14.texture : v14;
			} else {
				var si8 = shaders;
				var n4 = p4.instance;
				while(--n4 > 0) si8 = si8.next;
				var v15 = si8.s.getParamValue(p4.index);
				if(v15 == null && !opt2) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si8.s) + "." + p4.name);
				}
				val2 = v15;
			}
			this2[index5] = val2;
			p4 = p4.next;
		}
		var p5 = s2.buffers;
		var bid1 = 0;
		while(p5 != null) {
			var opt3 = !h3d_pass_ShaderManager.STRICT;
			if(opt3 == null) {
				opt3 = false;
			}
			var b2;
			if(p5.perObjectGlobal != null) {
				var v16 = _gthis.globals.map.h[p5.perObjectGlobal.gid];
				if(v16 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p5.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p5.perObjectGlobal.path));
				}
				var _g6 = p5.type;
				var b3;
				if(_g6._hx_index == 17) {
					var _g15 = _g6.size;
					b3 = true;
				} else {
					b3 = false;
				}
				b2 = b3 ? v16.texture : v16;
			} else {
				var si9 = shaders;
				var n5 = p5.instance;
				while(--n5 > 0) si9 = si9.next;
				var v17 = si9.s.getParamValue(p5.index);
				if(v17 == null && !opt3) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si9.s) + "." + p5.name);
				}
				b2 = v17;
			}
			buf2.buffers[bid1++] = b2;
			p5 = p5.next;
		}
	}
	,compileShaders: function(shaders,batchMode) {
		if(batchMode == null) {
			batchMode = false;
		}
		this.globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		var s2 = this.shaderCache.link(this.currentOutput,batchMode);
		this.currentOutput.next = null;
		return s2;
	}
	,__class__: h3d_pass_ShaderManager
};
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__ : "h3d.pass.RenderMode", __constructs__ : ["None","Static","Dynamic","Mixed"]
	,None: {_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__ : "h3d.pass.ShadowSamplingKind", __constructs__ : ["None","PCF","ESM"]
	,None: {_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
$hxClasses["h3d.pass.SortByMaterial"] = h3d_pass_SortByMaterial;
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp1;
		if(list == null) {
			tmp1 = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p1;
			var q;
			var e;
			var tail;
			while(true) {
				p1 = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p1 != null) {
					++nmerges;
					q = p1;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp2;
							if(!(qsize == 0 || q == null)) {
								var d = _gthis.shaderIdMap[p1.shader.id] - _gthis.shaderIdMap[q.shader.id];
								tmp2 = (d != 0 ? d : _gthis.textureIdMap[p1.texture] - _gthis.textureIdMap[q.texture]) <= 0;
							} else {
								tmp2 = true;
							}
							if(tmp2) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p1 = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp1 = list;
		}
		passes.current = tmp1;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plane2D"] = h3d_prim_Plane2D;
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var v = this1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize1 = v.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(v.array);
			v.array = newArray1;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize2 = v.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(v.array);
			v.array = newArray2;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize3 = v.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(v.array);
			v.array = newArray3;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize4 = v.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(v.array);
			v.array = newArray4;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize5 = v.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(v.array);
			v.array = newArray5;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize6 = v.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(v.array);
			v.array = newArray6;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize7 = v.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(v.array);
			v.array = newArray7;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize8 = v.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(v.array);
			v.array = newArray8;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize9 = v.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(v.array);
			v.array = newArray9;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize10 = v.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(v.array);
			v.array = newArray10;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize11 = v.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(v.array);
			v.array = newArray11;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize12 = v.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(v.array);
			v.array = newArray12;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize13 = v.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(v.array);
			v.array = newArray13;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize14 = v.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(v.array);
			v.array = newArray14;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize15 = v.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(v.array);
			v.array = newArray15;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw new js__$Boot_HaxeError("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		var flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw new js__$Boot_HaxeError("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_scene_Object = function(parent) {
	var this1 = 0;
	this.flags = this1;
	this.absPos = new h3d_Matrix();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f1 = 1;
	var b1 = true;
	if(b1) {
		this.flags |= f1;
	} else {
		this.flags &= ~f1;
	}
	this.z = 0;
	var f2 = 1;
	var b2 = true;
	if(b2) {
		this.flags |= f2;
	} else {
		this.flags &= ~f2;
	}
	this.scaleX = 1;
	var f3 = 1;
	var b3 = true;
	if(b3) {
		this.flags |= f3;
	} else {
		this.flags &= ~f3;
	}
	this.scaleY = 1;
	var f4 = 1;
	var b4 = true;
	if(b4) {
		this.flags |= f4;
	} else {
		this.flags &= ~f4;
	}
	this.scaleZ = 1;
	var f5 = 1;
	var b5 = true;
	if(b5) {
		this.flags |= f5;
	} else {
		this.flags &= ~f5;
	}
	this.qRot = new h3d_Quat();
	var f6 = 1;
	var b6 = this.follow != null;
	if(b6) {
		this.flags |= f6;
	} else {
		this.flags &= ~f6;
	}
	var f7 = 2;
	this.flags |= f7;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_scene_Object.prototype = {
	localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_Vector();
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f1 = 32;
			if(old) {
				o.flags |= f1;
			} else {
				o.flags &= ~f1;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f2 = 1;
		var b = true;
		if(b) {
			o.flags |= f2;
		} else {
			o.flags &= ~f2;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h3d_scene_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,draw: function(ctx) {
	}
	,calcAbsPos: function() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this1 = this.absPos;
			var a1 = this.absPos;
			var b1 = this.parent.absPos;
			var m111 = a1._11;
			var m121 = a1._12;
			var m131 = a1._13;
			var m211 = a1._21;
			var m221 = a1._22;
			var m231 = a1._23;
			var a311 = a1._31;
			var a321 = a1._32;
			var a331 = a1._33;
			var a411 = a1._41;
			var a421 = a1._42;
			var a431 = a1._43;
			var b111 = b1._11;
			var b121 = b1._12;
			var b131 = b1._13;
			var b211 = b1._21;
			var b221 = b1._22;
			var b231 = b1._23;
			var b311 = b1._31;
			var b321 = b1._32;
			var b331 = b1._33;
			var b411 = b1._41;
			var b421 = b1._42;
			var b431 = b1._43;
			_this1._11 = m111 * b111 + m121 * b211 + m131 * b311;
			_this1._12 = m111 * b121 + m121 * b221 + m131 * b321;
			_this1._13 = m111 * b131 + m121 * b231 + m131 * b331;
			_this1._14 = 0;
			_this1._21 = m211 * b111 + m221 * b211 + m231 * b311;
			_this1._22 = m211 * b121 + m221 * b221 + m231 * b321;
			_this1._23 = m211 * b131 + m221 * b231 + m231 * b331;
			_this1._24 = 0;
			_this1._31 = a311 * b111 + a321 * b211 + a331 * b311;
			_this1._32 = a311 * b121 + a321 * b221 + a331 * b321;
			_this1._33 = a311 * b131 + a321 * b231 + a331 * b331;
			_this1._34 = 0;
			_this1._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
			_this1._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
			_this1._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
			_this1._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this2 = this.absPos;
			var a2 = this.defaultTransform;
			var b2 = this.absPos;
			var m112 = a2._11;
			var m122 = a2._12;
			var m132 = a2._13;
			var m212 = a2._21;
			var m222 = a2._22;
			var m232 = a2._23;
			var a312 = a2._31;
			var a322 = a2._32;
			var a332 = a2._33;
			var a412 = a2._41;
			var a422 = a2._42;
			var a432 = a2._43;
			var b112 = b2._11;
			var b122 = b2._12;
			var b132 = b2._13;
			var b212 = b2._21;
			var b222 = b2._22;
			var b232 = b2._23;
			var b312 = b2._31;
			var b322 = b2._32;
			var b332 = b2._33;
			var b412 = b2._41;
			var b422 = b2._42;
			var b432 = b2._43;
			_this2._11 = m112 * b112 + m122 * b212 + m132 * b312;
			_this2._12 = m112 * b122 + m122 * b222 + m132 * b322;
			_this2._13 = m112 * b132 + m122 * b232 + m132 * b332;
			_this2._14 = 0;
			_this2._21 = m212 * b112 + m222 * b212 + m232 * b312;
			_this2._22 = m212 * b122 + m222 * b222 + m232 * b322;
			_this2._23 = m212 * b132 + m222 * b232 + m232 * b332;
			_this2._24 = 0;
			_this2._31 = a312 * b112 + a322 * b212 + a332 * b312;
			_this2._32 = a312 * b122 + a322 * b222 + a332 * b322;
			_this2._33 = a312 * b132 + a322 * b232 + a332 * b332;
			_this2._34 = 0;
			_this2._41 = a412 * b112 + a422 * b212 + a432 * b312 + b412;
			_this2._42 = a412 * b122 + a422 * b222 + a432 * b322 + b422;
			_this2._43 = a412 * b132 + a422 * b232 + a432 * b332 + b432;
			_this2._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		var old1 = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		this.sync(ctx);
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f1 = 1;
					var b1 = true;
					if(b1) {
						c.flags |= f1;
					} else {
						c.flags &= ~f1;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old1;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			c1.emitRec(ctx);
		}
	}
	,__class__: h3d_scene_Object
};
var h3d_scene_Mesh = function(primitive,material,parent) {
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector();
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_LightSystem = function() {
	this.ambientLight = new h3d_Vector(1,1,1);
};
$hxClasses["h3d.scene.LightSystem"] = h3d_scene_LightSystem;
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	initGlobals: function(globals) {
	}
	,cullLights: function() {
		var l = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(l != null) {
			s.x = l.absPos._41;
			s.y = l.absPos._42;
			s.z = l.absPos._43;
			s.r = l.cullingDistance;
			if(l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = l.next;
				} else {
					prev.next = l.next;
				}
				l = l.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = l;
			l = l.next;
		}
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d_scene__$RenderContext_SharedGlobal;
h3d_scene__$RenderContext_SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	start: function() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = null;
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	,setGlobalID: function(gid,value) {
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	,emitPass: function(pass,obj) {
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		o.next = this.passes;
		this.passes = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = null;
		this.lights = null;
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_Renderer = function() {
	this.effects = [];
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var f = $bind(this,this.depthSort);
	this.frontToBack = function(passes) {
		f(true,passes);
	};
	var f1 = $bind(this,this.depthSort);
	this.backToFront = function(passes1) {
		f1(false,passes1);
	};
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	dispose: function() {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.dispose();
		}
		var _g2 = 0;
		var _g3 = this.effects;
		while(_g2 < _g3.length) {
			var f = _g3[_g2];
			++_g2;
			f.dispose();
		}
		this.passObjects = new haxe_ds_StringMap();
	}
	,depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp1;
			if(list == null) {
				tmp1 = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p1;
				var q;
				var e;
				var tail;
				while(true) {
					p1 = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p1 != null) {
						++nmerges;
						q = p1;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p1.pass.layer == q.pass.layer ? p1.depth > q.depth ? 1 : -1 : p1.pass.layer - q.pass.layer) <= 0) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p1 = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp1 = list;
			}
			passes.current = tmp1;
		} else {
			var list1 = passes.current;
			var tmp2;
			if(list1 == null) {
				tmp2 = null;
			} else {
				var insize1 = 1;
				var nmerges1;
				var psize1 = 0;
				var qsize1 = 0;
				var p2;
				var q1;
				var e1;
				var tail1;
				while(true) {
					p2 = list1;
					list1 = null;
					tail1 = null;
					nmerges1 = 0;
					while(p2 != null) {
						++nmerges1;
						q1 = p2;
						psize1 = 0;
						var _g2 = 0;
						var _g11 = insize1;
						while(_g2 < _g11) {
							var i1 = _g2++;
							++psize1;
							q1 = q1.next;
							if(q1 == null) {
								break;
							}
						}
						qsize1 = insize1;
						while(psize1 > 0 || qsize1 > 0 && q1 != null) {
							if(psize1 == 0) {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							} else if(qsize1 == 0 || q1 == null || (p2.pass.layer == q1.pass.layer ? p2.depth > q1.depth ? -1 : 1 : p2.pass.layer - q1.pass.layer) <= 0) {
								e1 = p2;
								p2 = p2.next;
								--psize1;
							} else {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							}
							if(tail1 != null) {
								tail1.next = e1;
							} else {
								list1 = e1;
							}
							tail1 = e1;
						}
						p2 = q1;
					}
					tail1.next = null;
					if(nmerges1 <= 1) {
						break;
					}
					insize1 *= 2;
				}
				tmp2 = list1;
			}
			passes.current = tmp2;
		}
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		return this.passObjects.h[name] != null;
	}
	,get: function(name) {
		var p = this.passObjects.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,render: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,computeStatic: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,start: function() {
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g2 = 0;
		while(_g2 < passes.length) {
			var p1 = passes[_g2];
			++_g2;
			this.passObjects.h[p1.name] = p1;
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g3 = 0;
		while(_g3 < passes.length) {
			var p2 = passes[_g3];
			++_g3;
			this.passObjects.h[p2.name] = null;
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p1_x = x;
			var p1_y = y;
			var p1_z = z;
			var x1 = p1.x;
			var y1 = p1.y;
			var z1 = p1.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p2_x = x1;
			var p2_y = y1;
			var p2_z = z1;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				var minv = i.getInvPos();
				var x2 = r1.px;
				var y2 = r1.py;
				var z2 = r1.pz;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var p_x = x2;
				var p_y = y2;
				var p_z = z2;
				var p_w = 1.;
				var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + p_w * minv._41;
				var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + p_w * minv._42;
				var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + p_w * minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r1.px = p_x;
				r1.py = p_y;
				r1.pz = p_z;
				var x3 = r1.lx;
				var y3 = r1.ly;
				var z3 = r1.lz;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var l_x = x3;
				var l_y = y3;
				var l_z = z3;
				var l_w = 1.;
				var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r1.lx = l_x;
				r1.ly = l_y;
				r1.lz = l_z;
				r1.normalize();
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x4 = r1.px + hit * r1.lx;
				var y4 = r1.py + hit * r1.ly;
				var z4 = r1.pz + hit * r1.lz;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var hitPoint_x = x4;
				var hitPoint_y = y4;
				var hitPoint_z = z4;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g2 = 0;
				var _g3 = this.hitInteractives;
				while(_g2 < _g3.length) {
					var i1 = _g3[_g2];
					++_g2;
					var m = i1.invPos;
					var wfactor = 0.;
					if(i1.preciseShape != null) {
						var x5 = r1.px;
						var y5 = r1.py;
						var z5 = r1.pz;
						if(z5 == null) {
							z5 = 0.;
						}
						if(y5 == null) {
							y5 = 0.;
						}
						if(x5 == null) {
							x5 = 0.;
						}
						var p_x1 = x5;
						var p_y1 = y5;
						var p_z1 = z5;
						var p_w1 = 1.;
						var px2 = p_x1 * m._11 + p_y1 * m._21 + p_z1 * m._31 + p_w1 * m._41;
						var py2 = p_x1 * m._12 + p_y1 * m._22 + p_z1 * m._32 + p_w1 * m._42;
						var pz2 = p_x1 * m._13 + p_y1 * m._23 + p_z1 * m._33 + p_w1 * m._43;
						p_x1 = px2;
						p_y1 = py2;
						p_z1 = pz2;
						r1.px = p_x1;
						r1.py = p_y1;
						r1.pz = p_z1;
						var x6 = r1.lx;
						var y6 = r1.ly;
						var z6 = r1.lz;
						if(z6 == null) {
							z6 = 0.;
						}
						if(y6 == null) {
							y6 = 0.;
						}
						if(x6 == null) {
							x6 = 0.;
						}
						var l_x1 = x6;
						var l_y1 = y6;
						var l_z1 = z6;
						var l_w1 = 1.;
						var px3 = l_x1 * m._11 + l_y1 * m._21 + l_z1 * m._31;
						var py3 = l_x1 * m._12 + l_y1 * m._22 + l_z1 * m._32;
						var pz3 = l_x1 * m._13 + l_y1 * m._23 + l_z1 * m._33;
						l_x1 = px3;
						l_y1 = py3;
						l_z1 = pz3;
						r1.lx = l_x1;
						r1.ly = l_y1;
						r1.lz = l_z1;
						r1.normalize();
						var hit1 = i1.preciseShape.rayIntersection(r1,i1.bestMatch);
						if(hit1 > 0) {
							var x7 = r1.px + hit1 * r1.lx;
							var y7 = r1.py + hit1 * r1.ly;
							var z7 = r1.pz + hit1 * r1.lz;
							if(z7 == null) {
								z7 = 0.;
							}
							if(y7 == null) {
								y7 = 0.;
							}
							if(x7 == null) {
								x7 = 0.;
							}
							var hitPoint_x1 = x7;
							var hitPoint_y1 = y7;
							var hitPoint_z1 = z7;
							i1.hitPoint.x = hitPoint_x1;
							i1.hitPoint.y = hitPoint_y1;
							i1.hitPoint.z = hitPoint_z1;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i1.hitPoint;
					var x8 = _this.x;
					var y8 = _this.y;
					var z8 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z8 == null) {
						z8 = 0.;
					}
					if(y8 == null) {
						y8 = 0.;
					}
					if(x8 == null) {
						x8 = 0.;
					}
					var p_x2 = x8;
					var p_y2 = y8;
					var p_z2 = z8;
					var p_w2 = w;
					p_w2 = 1;
					var m1 = i1.absPos;
					var px4 = p_x2 * m1._11 + p_y2 * m1._21 + p_z2 * m1._31 + p_w2 * m1._41;
					var py4 = p_x2 * m1._12 + p_y2 * m1._22 + p_z2 * m1._32 + p_w2 * m1._42;
					var pz4 = p_x2 * m1._13 + p_y2 * m1._23 + p_z2 * m1._33 + p_w2 * m1._43;
					p_x2 = px4;
					p_y2 = py4;
					p_z2 = pz4;
					var m2 = this.camera.m;
					var px5 = p_x2 * m2._11 + p_y2 * m2._21 + p_z2 * m2._31 + p_w2 * m2._41;
					var py5 = p_x2 * m2._12 + p_y2 * m2._22 + p_z2 * m2._32 + p_w2 * m2._42;
					var pz5 = p_x2 * m2._13 + p_y2 * m2._23 + p_z2 * m2._33 + p_w2 * m2._43;
					var iw = 1 / (p_x2 * m2._14 + p_y2 * m2._24 + p_z2 * m2._34 + p_w2 * m2._44);
					p_x2 = px5 * iw;
					p_y2 = py5 * iw;
					p_z2 = pz5 * iw;
					p_w2 = 1;
					i1.hitPoint.w = p_z2 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i2 = this.hitInteractives.pop();
			if(i2 == null) {
				return null;
			}
			event.relX = i2.hitPoint.x;
			event.relY = i2.hitPoint.y;
			event.relZ = i2.hitPoint.z;
			i2.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i2;
		}
		return null;
	}
	,dispose: function() {
		if((this.flags & 32) != 0) {
			this.onRemove();
		}
		if(this.hardwarePass != null) {
			this.hardwarePass.dispose();
			this.hardwarePass = null;
		}
		this.ctx.dispose();
		if(this.renderer != null) {
			this.renderer.dispose();
			this.set_renderer(new h3d_scene_Renderer());
		}
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var list = this.ctx.passes;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || p.pass.passId - q.pass.passId <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.ctx.passes = tmp;
		var curPass = this.ctx.passes;
		var passes = [];
		var passIndex = -1;
		while(curPass != null) {
			var passId = curPass.pass.passId;
			var p1 = curPass;
			var prev = null;
			while(p1 != null && p1.pass.passId == passId) {
				prev = p1;
				p1 = p1.next;
			}
			prev.next = null;
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
			curPass = p1;
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		var _g2 = 0;
		var _g11 = passIndex;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var p2 = this.ctx.cachedPassObjects[i1];
			p2.name = null;
			var _this1 = p2.passes;
			_this1.current = null;
			_this1.discarded = _this1.lastDisc = null;
		}
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	var _this = this.ambientLight;
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d_scene_fwd_LightSystem;
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var l = this.ctx.lights;
			while(l != null) {
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				l = l.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l1 = this.ctx.lights;
		var i1 = 0;
		while(l1 != null) {
			if(i1++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l1.shader,shaders);
			l1 = l1.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Default.call(this,"depth");
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d_scene_fwd_DepthPass;
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Default.call(this,"normal");
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d_scene_fwd_NormalPass;
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Default("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.fwd.Renderer"] = h3d_scene_fwd_Renderer;
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewport__ = new h3d_Vector();
	this.halfPixelInverse__ = new h3d_Vector();
	this.uvPos__ = new h3d_Vector();
	this.filterMatrixB__ = new h3d_Vector();
	this.filterMatrixA__ = new h3d_Vector();
	this.absoluteMatrixB__ = new h3d_Vector();
	this.absoluteMatrixA__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_Vector();
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this1 = this.specularColor__;
	var x1 = 1;
	var y1 = 1;
	var z1 = 1;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = z1;
	_this1.w = 1.;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_Matrix();
	this.fixedColor__ = new h3d_Vector();
	this.pixel__ = new h3d_Vector();
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	var this1 = new Array(s.texturesCount);
	this.tex = this1;
	var tmp;
	if(s.bufferCount > 0) {
		var this2 = new Array(s.bufferCount);
		tmp = this2;
	} else {
		tmp = null;
	}
	this.buffers = tmp;
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			var this1 = new Array(nt);
			this.tex = this1;
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			var this2 = new Array(nb);
			this.buffers = this2;
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.matrix__ = new h3d_Matrix();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirShadow = function() {
	this.poissonDiskVeryHigh__ = [];
	this.poissonDiskHigh__ = [];
	this.poissonDiskLow__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_Matrix();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_Vector();
	this.pcfScale__ = 0;
	this.pcfQuality__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.poissonDiskLow__ = [new h3d_Vector(-0.942,-0.399),new h3d_Vector(0.945,-0.768),new h3d_Vector(-0.094,-0.929),new h3d_Vector(0.344,0.293)];
	this.poissonDiskHigh__ = [new h3d_Vector(-0.326,-0.406),new h3d_Vector(-0.840,-0.074),new h3d_Vector(-0.696,0.457),new h3d_Vector(-0.203,0.621),new h3d_Vector(0.962,-0.195),new h3d_Vector(0.473,-0.480),new h3d_Vector(0.519,0.767),new h3d_Vector(0.185,-0.893),new h3d_Vector(0.507,0.064),new h3d_Vector(0.896,0.412),new h3d_Vector(-0.322,-0.933),new h3d_Vector(-0.792,-0.598)];
	this.poissonDiskVeryHigh__ = [new h3d_Vector(-0.613392,0.617481),new h3d_Vector(0.170019,-0.040254),new h3d_Vector(-0.299417,0.791925),new h3d_Vector(0.645680,0.493210),new h3d_Vector(-0.651784,0.717887),new h3d_Vector(0.421003,0.027070),new h3d_Vector(-0.817194,-0.271096),new h3d_Vector(-0.705374,-0.668203),new h3d_Vector(0.977050,-0.108615),new h3d_Vector(0.063326,0.142369),new h3d_Vector(0.203528,0.214331),new h3d_Vector(-0.667531,0.326090),new h3d_Vector(-0.098422,-0.295755),new h3d_Vector(-0.885922,0.215369),new h3d_Vector(0.566637,0.605213),new h3d_Vector(0.039766,-0.396100),new h3d_Vector(0.751946,0.453352),new h3d_Vector(0.078707,-0.715323),new h3d_Vector(-0.075838,-0.529344),new h3d_Vector(0.724479,-0.580798),new h3d_Vector(0.222999,-0.215125),new h3d_Vector(-0.467574,-0.405438),new h3d_Vector(-0.248268,-0.814753),new h3d_Vector(0.354411,-0.887570),new h3d_Vector(0.175817,0.382366),new h3d_Vector(0.487472,-0.063082),new h3d_Vector(-0.084078,0.898312),new h3d_Vector(0.488876,-0.783441),new h3d_Vector(0.470016,0.217933),new h3d_Vector(-0.696890,-0.549791),new h3d_Vector(-0.149693,0.605762),new h3d_Vector(0.034211,0.979980),new h3d_Vector(0.503098,-0.308878),new h3d_Vector(-0.016205,-0.872921),new h3d_Vector(0.385784,-0.393902),new h3d_Vector(-0.146886,-0.859249),new h3d_Vector(0.643361,0.164098),new h3d_Vector(0.634388,-0.049471),new h3d_Vector(-0.688894,0.007843),new h3d_Vector(0.464034,-0.188818),new h3d_Vector(-0.440840,0.137486),new h3d_Vector(0.364483,0.511704),new h3d_Vector(0.034028,0.325968),new h3d_Vector(0.099094,-0.308023),new h3d_Vector(0.693960,-0.366253),new h3d_Vector(0.678884,-0.204688),new h3d_Vector(0.001801,0.780328),new h3d_Vector(0.145177,-0.898984),new h3d_Vector(0.062655,-0.611866),new h3d_Vector(0.315226,-0.604297),new h3d_Vector(-0.780145,0.486251),new h3d_Vector(-0.371868,0.882138),new h3d_Vector(0.200476,0.494430),new h3d_Vector(-0.494552,-0.711051),new h3d_Vector(0.612476,0.705252),new h3d_Vector(-0.578845,-0.768792),new h3d_Vector(-0.772454,-0.090976),new h3d_Vector(0.504440,0.372295),new h3d_Vector(0.155736,0.065157),new h3d_Vector(0.391522,0.849605),new h3d_Vector(-0.620106,-0.328104),new h3d_Vector(0.789239,-0.419965),new h3d_Vector(-0.545396,0.538133),new h3d_Vector(-0.178564,-0.596057)];
};
$hxClasses["h3d.shader.DirShadow"] = h3d_shader_DirShadow;
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.pcfQuality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("pcfQuality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw new js__$Boot_HaxeError("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.pcfQuality__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDiskLow__;
		case 11:
			return this.poissonDiskHigh__;
		case 12:
			return this.poissonDiskVeryHigh__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_DirShadow
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.MinMaxShader"] = h3d_shader_MinMaxShader;
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_MinMaxShader
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d_shader_CubeMinMaxShader;
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_CubeMinMaxShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SignedDistanceField = function() {
	this.smoothing__ = 0.041666666666666664;
	this.alphaCutoff__ = 0.5;
	this.channel__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.SignedDistanceField"] = h3d_shader_SignedDistanceField;
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
h3d_shader_SignedDistanceField.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.channel__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("channel" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_SignedDistanceField
});
var h3d_shader_SkinBase = function() {
	this.bonesMatrixes__ = [];
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.SkinBase"] = h3d_shader_SkinBase;
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinBase
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.SkinTangent"] = h3d_shader_SkinTangent;
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_Vector();
	this.uvDelta__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
	var _this1 = this.uvScale__;
	var x1 = sx;
	var y1 = sy;
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = 0.;
	_this1.w = 1.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_Vector();
	this.normal__ = new h3d_Vector();
	this.scale__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this1 = this.tangent__;
	var x1 = 1;
	var y1 = 0;
	var z1 = 0;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = z1;
	_this1.w = 1.;
	var _this2 = this.scale__;
	var x2 = 1 / objectWidth;
	var y2 = 1 / objectHeight;
	if(y2 == null) {
		y2 = 0.;
	}
	if(x2 == null) {
		x2 = 0.;
	}
	_this2.x = x2;
	_this2.y = y2;
	_this2.z = 0.;
	_this2.w = 1.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VolumeDecal
});
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(typeof(window) != "undefined") {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(rqf != null) {
			rqf(haxe_EntryPoint.run);
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick);
		}
	} else if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick);
	}
};
var haxe__$Int32_Int32_$Impl_$ = {};
$hxClasses["haxe._Int32.Int32_Impl_"] = haxe__$Int32_Int32_$Impl_$;
haxe__$Int32_Int32_$Impl_$.__name__ = "haxe._Int32.Int32_Impl_";
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw new js__$Boot_HaxeError("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = Date.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g11 = l;
				while(_g1 < _g11) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v4 = v;
				var _g_head = v4.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = haxe_ds_StringMap.keysIterator(v6.h);
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g2 = 0;
					var _g12 = haxe_Serializer.BASE64.length;
					while(_g2 < _g12) {
						var i3 = _g2++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b11 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b12 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e1 = v;
				this.serializeString($hxEnums[e1.__enum__].__constructs__[e1._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g3 = 0;
			while(_g3 < params.length) {
				var p = params[_g3];
				++_g3;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				h1.h[s1] = value;
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.b[i1] << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_crypto_Sha1 = function() {
};
$hxClasses["haxe.crypto.Sha1"] = haxe_crypto_Sha1;
haxe_crypto_Sha1.__name__ = "haxe.crypto.Sha1";
haxe_crypto_Sha1.encode = function(s) {
	var sh = new haxe_crypto_Sha1();
	var h = sh.doEncode(haxe_crypto_Sha1.str2blks(s));
	return sh.hex(h);
};
haxe_crypto_Sha1.str2blks = function(s) {
	var s1 = haxe_io_Bytes.ofString(s);
	var nblk = (s1.length + 8 >> 6) + 1;
	var blks = [];
	var _g = 0;
	var _g1 = nblk * 16;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var _g2 = 0;
	var _g3 = s1.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		var p = i1 >> 2;
		blks[p] |= s1.b[i1] << 24 - ((i1 & 3) << 3);
	}
	var i2 = s1.length;
	var p1 = i2 >> 2;
	blks[p1] |= 128 << 24 - ((i2 & 3) << 3);
	blks[nblk * 16 - 1] = s1.length * 8;
	return blks;
};
haxe_crypto_Sha1.prototype = {
	doEncode: function(x) {
		var w = [];
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var e = -1009589776;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			var olde = e;
			var j = 0;
			while(j < 80) {
				if(j < 16) {
					w[j] = x[i + j];
				} else {
					var num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = num << 1 | num >>> 31;
				}
				var t = (a << 5 | a >>> 27) + this.ft(j,b,c,d) + e + w[j] + this.kt(j);
				e = d;
				d = c;
				c = b << 30 | b >>> 2;
				b = a;
				a = t;
				++j;
			}
			a += olda;
			b += oldb;
			c += oldc;
			d += oldd;
			e += olde;
			i += 16;
		}
		return [a,b,c,d,e];
	}
	,ft: function(t,b,c,d) {
		if(t < 20) {
			return b & c | ~b & d;
		}
		if(t < 40) {
			return b ^ c ^ d;
		}
		if(t < 60) {
			return b & c | b & d | c & d;
		}
		return b ^ c ^ d;
	}
	,kt: function(t) {
		if(t < 20) {
			return 1518500249;
		}
		if(t < 40) {
			return 1859775393;
		}
		if(t < 60) {
			return -1894007588;
		}
		return -899497514;
	}
	,hex: function(a) {
		var str = "";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += StringTools.hex(num,8);
		}
		return str.toLowerCase();
	}
	,__class__: haxe_crypto_Sha1
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,flush: function() {
	}
	,close: function() {
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths1 = _g;
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g3 = 1;
	var _g11 = paths1.length;
	while(_g3 < _g11) {
		var i = _g3++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : "haxe.macro.Binop", __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : "haxe.macro.Unop", __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_xml__$Access_NodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.NodeAccess_Impl_"] = haxe_xml__$Access_NodeAccess_$Impl_$;
haxe_xml__$Access_NodeAccess_$Impl_$.__name__ = "haxe.xml._Access.NodeAccess_Impl_";
haxe_xml__$Access_NodeAccess_$Impl_$.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw new js__$Boot_HaxeError(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + (x.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(x.nodeType)));
	}
	var this2 = x;
	return this2;
};
var haxe_xml__$Access_AttribAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.AttribAccess_Impl_"] = haxe_xml__$Access_AttribAccess_$Impl_$;
haxe_xml__$Access_AttribAccess_$Impl_$.__name__ = "haxe.xml._Access.AttribAccess_Impl_";
haxe_xml__$Access_AttribAccess_$Impl_$.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(this1.nodeType)));
		}
		throw new js__$Boot_HaxeError(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.HasNodeAccess_Impl_"] = haxe_xml__$Access_HasNodeAccess_$Impl_$;
haxe_xml__$Access_HasNodeAccess_$Impl_$.__name__ = "haxe.xml._Access.HasNodeAccess_Impl_";
haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(parent.nodeType)));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(parent.nodeType)));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
			}
			var _g_current1 = 0;
			var _g_array1 = value.children;
			while(_g_current1 < _g_array1.length) {
				var child1 = _g_array1[_g_current1++];
				this.writeNode(child1,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + (child.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : "haxe.zip.Huffman", __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g2 = t.table;
			var _g1 = t.n;
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g2 = 0;
		var _g3 = nlengths;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g4 = 1;
		var _g5 = maxbits - 1;
		while(_g4 < _g5) {
			var i2 = _g4++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g6 = 0;
		var _g7 = nlengths;
		while(_g6 < _g7) {
			var i3 = _g6++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : "haxe.zip._InflateImpl.State", __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n1 = h.n;
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g2 = hclen;
				var _g3 = 19;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g4 = 0;
				var _g5 = hlit + hdist;
				while(_g4 < _g5) {
					var i2 = _g4++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.prototype = {
	lock: function() {
		if(this.lockImage == null) {
			this.lockImage = this.ctx.getImageData(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
		}
	}
	,unlock: function() {
		if(this.lockImage != null) {
			this.ctx.putImageData(this.lockImage,0,0);
			this.lockImage = null;
		}
	}
	,getPixel: function(x,y) {
		var i = this.lockImage;
		var a;
		if(i != null) {
			a = x + y * i.width << 2;
		} else {
			a = 0;
			i = this.ctx.getImageData(x,y,1,1);
		}
		return i.data[a] << 16 | i.data[a | 1] << 8 | i.data[a | 2] | i.data[a | 3] << 24;
	}
	,setPixel: function(x,y,c) {
		var i = this.lockImage;
		if(i != null) {
			var a = x + y * i.width << 2;
			i.data[a] = c >> 16 & 255;
			i.data[a | 1] = c >> 8 & 255;
			i.data[a | 2] = c & 255;
			i.data[a | 3] = c >>> 24 & 255;
			return;
		}
		var i1 = this.pixel;
		if(i1 == null) {
			i1 = this.ctx.createImageData(1,1);
			this.pixel = i1;
		}
		i1.data[0] = c >> 16 & 255;
		i1.data[1] = c >> 8 & 255;
		i1.data[2] = c & 255;
		i1.data[3] = c >>> 24 & 255;
		this.ctx.putImageData(i1,x,y);
	}
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,setPixels: function(pixels) {
		if(pixels.width != this.ctx.canvas.width || pixels.height != this.ctx.canvas.height) {
			throw new js__$Boot_HaxeError("Invalid pixels size");
		}
		pixels.setFlip(false);
		var img = this.ctx.createImageData(pixels.width,pixels.height);
		pixels.convert(hxd_PixelFormat.RGBA);
		var _g = 0;
		var _g1 = pixels.width * pixels.height * 4;
		while(_g < _g1) {
			var i = _g++;
			img.data[i] = pixels.bytes.b[i];
		}
		this.ctx.putImageData(img,0,0);
	}
	,__class__: hxd_BitmapData
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g1 = 192;
	var _g2 = 199;
	while(_g1 < _g2) {
		var i1 = _g1++;
		_gthis.map.h[i1] = 65;
	}
	var _g3 = 224;
	var _g4 = 231;
	while(_g3 < _g4) {
		var i2 = _g3++;
		_gthis.map.h[i2] = 97;
	}
	var _g5 = 200;
	var _g6 = 204;
	while(_g5 < _g6) {
		var i3 = _g5++;
		_gthis.map.h[i3] = 69;
	}
	var _g7 = 232;
	var _g8 = 236;
	while(_g7 < _g8) {
		var i4 = _g7++;
		_gthis.map.h[i4] = 101;
	}
	var _g9 = 204;
	var _g10 = 208;
	while(_g9 < _g10) {
		var i5 = _g9++;
		_gthis.map.h[i5] = 73;
	}
	var _g11 = 236;
	var _g12 = 240;
	while(_g11 < _g12) {
		var i6 = _g11++;
		_gthis.map.h[i6] = 105;
	}
	var _g13 = 210;
	var _g14 = 215;
	while(_g13 < _g14) {
		var i7 = _g13++;
		_gthis.map.h[i7] = 79;
	}
	var _g15 = 242;
	var _g16 = 247;
	while(_g15 < _g16) {
		var i8 = _g15++;
		_gthis.map.h[i8] = 111;
	}
	var _g17 = 217;
	var _g18 = 221;
	while(_g17 < _g18) {
		var i9 = _g17++;
		_gthis.map.h[i9] = 85;
	}
	var _g19 = 249;
	var _g20 = 253;
	while(_g19 < _g20) {
		var i10 = _g19++;
		_gthis.map.h[i10] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = "hxd.Charset";
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(code >= 19968) {
			return code <= 40959;
		} else {
			return false;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__ : "hxd.Cursor", __constructs__ : ["Default","Button","Move","TextInput","Hide","Custom","Callback"]
	,Default: {_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["f"],$_)
};
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.prototype = {
	reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,__class__: hxd_CustomCursor
};
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__ : "hxd.EventKind", __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"]
	,EPush: {_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand_$Impl_$ = {};
$hxClasses["hxd._FloatBuffer.Float32Expand_Impl_"] = hxd__$FloatBuffer_Float32Expand_$Impl_$;
hxd__$FloatBuffer_Float32Expand_$Impl_$.__name__ = "hxd._FloatBuffer.Float32Expand_Impl_";
hxd__$FloatBuffer_Float32Expand_$Impl_$._new = function(length) {
	var this1 = { pos : 0, array : new Float32Array(new ArrayBuffer(length << 2))};
	return this1;
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = "hxd.Key";
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.isPressed = function(code) {
	return hxd_Key.keyPressed[code] == hxd_Timer.frameCount + 1 - 1;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 1;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 1);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 1;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 1;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 1);
		break;
	default:
	}
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__ : "hxd.Flags", __constructs__ : ["ReadOnly","AlphaPremultiplied","FlipY"]
	,ReadOnly: {_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
	,FlipY: {_hx_index:2,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
var hxd__$Pixels_PixelsARGB_$Impl_$ = {};
$hxClasses["hxd._Pixels.PixelsARGB_Impl_"] = hxd__$Pixels_PixelsARGB_$Impl_$;
hxd__$Pixels_PixelsARGB_$Impl_$.__name__ = "hxd._Pixels.PixelsARGB_Impl_";
hxd__$Pixels_PixelsARGB_$Impl_$.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	p.setFlip(false);
	return p;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	var this1 = i;
	this.flags = this1;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 6:
		tmp = 2;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 12:
		tmp = 6;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 18:
		var n = format.v;
		if(n == 1 || n == 4) {
			return width >> 1;
		}
		tmp = 1;
		break;
	}
	return width * tmp;
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(height * hxd_Pixels.calcStride(width,format))),format);
};
hxd_Pixels.prototype = {
	set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw new js__$Boot_HaxeError("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,makeSquare: function(copy) {
		var w = this.width;
		var h = this.height;
		var tw = w == 0 ? 0 : 1;
		var th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		var bpp = this.bytesPerPixel;
		var out = new haxe_io_Bytes(new ArrayBuffer(tw * th * bpp));
		var p = 0;
		var b = this.offset;
		var _g = 0;
		var _g1 = h;
		while(_g < _g1) {
			var y = _g++;
			out.blit(p,this.bytes,b,w * bpp);
			p += w * bpp;
			b += w * bpp;
			var _g2 = 0;
			var _g11 = (tw - w) * bpp >> 2;
			while(_g2 < _g11) {
				var i = _g2++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		var _g21 = 0;
		var _g3 = (th - h) * tw * bpp >> 2;
		while(_g21 < _g3) {
			var i1 = _g21++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd_Pixels(tw,th,out,this.innerFormat);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.stride));
		this.bytes.blit(0,old,this.offset,this.height * this.stride);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,setFlip: function(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 == b) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 1 << hxd_Flags.FlipY._hx_index;
		} else {
			this.flags &= -1 - (1 << hxd_Flags.FlipY._hx_index);
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g11 = this.stride >> 2;
			while(_g2 < _g11) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b1 = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b1);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var this1 = this.bytes.b;
		var bytes = this1;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g11 = this.width * this.height;
				while(_g1 < _g11) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g2 = 0;
				var _g12 = this.width * this.height;
				while(_g2 < _g12) {
					var i1 = _g2++;
					var p1 = (i1 << 2) + this.offset;
					var a1 = bytes[p1];
					var v = bytes[p1 + 1];
					bytes[p1] = v;
					var v1 = bytes[p1 + 2];
					bytes[p1 + 1] = v1;
					var v2 = bytes[p1 + 3];
					bytes[p1 + 2] = v2;
					bytes[p1 + 3] = a1;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g3 = 0;
				var _g13 = this.width * this.height;
				while(_g3 < _g13) {
					var i2 = _g3++;
					var p2 = (i2 << 2) + this.offset;
					var a2 = bytes[p2];
					var r1 = bytes[p2 + 1];
					var g1 = bytes[p2 + 2];
					var b1 = bytes[p2 + 3];
					bytes[p2++] = b1;
					bytes[p2++] = g1;
					bytes[p2++] = r1;
					bytes[p2] = a2;
				}
				break;
			case 2:
				var _g4 = 0;
				var _g14 = this.width * this.height;
				while(_g4 < _g14) {
					var i3 = _g4++;
					var p3 = (i3 << 2) + this.offset;
					var b2 = bytes[p3];
					var r2 = bytes[p3 + 2];
					bytes[p3] = r2;
					bytes[p3 + 2] = b2;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g5 = 0;
				var _g15 = this.width * this.height;
				while(_g5 < _g15) {
					var i4 = _g5++;
					var p4 = (i4 << 2) + this.offset;
					var a3 = bytes[p4 + 3];
					var v3 = bytes[p4 + 2];
					bytes[p4 + 3] = v3;
					var v4 = bytes[p4 + 1];
					bytes[p4 + 2] = v4;
					var v5 = bytes[p4];
					bytes[p4 + 1] = v5;
					bytes[p4] = a3;
				}
				break;
			case 1:
				var _g6 = 0;
				var _g16 = this.width * this.height;
				while(_g6 < _g16) {
					var i5 = _g6++;
					var p5 = (i5 << 2) + this.offset;
					var b3 = bytes[p5];
					var r3 = bytes[p5 + 2];
					bytes[p5] = r3;
					bytes[p5 + 2] = b3;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 18) {
				var a4 = _g.v;
				var b4 = target.v;
				if(a4 != b4) {
					throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,getPixel: function(x,y) {
		var p = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y : y) * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 0:
			var v = this.bytes.getInt32(p);
			return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
		case 1:
			return this.bytes.getInt32(p);
		case 2:
			var v1 = this.bytes.getInt32(p);
			return v1 & -16711936 | v1 << 16 & 16711680 | v1 >> 16 & 255;
		default:
			this.invalidFormat();
			return 0;
		}
	}
	,setPixel: function(x,y,color) {
		var p = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y : y) * this.width) * this.bytesPerPixel + this.offset;
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			this.bytes.setInt32(p,color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24);
			break;
		case 1:
			this.bytes.setInt32(p,color);
			break;
		case 2:
			this.bytes.setInt32(p,color & -16711936 | color << 16 & 16711680 | color >> 16 & 255);
			break;
		default:
			this.invalidFormat();
		}
	}
	,dispose: function() {
		this.bytes = null;
	}
	,__class__: hxd_Pixels
};
var hxd_Rand = function(seed) {
	this.init(seed);
};
$hxClasses["hxd.Rand"] = hxd_Rand;
hxd_Rand.__name__ = "hxd.Rand";
hxd_Rand.hash = function(n,seed) {
	if(seed == null) {
		seed = 5381;
	}
	var n1 = n;
	n1 = haxe__$Int32_Int32_$Impl_$._mul(n1,-862048943);
	n1 = n1 << 15 | n1 >>> 17;
	n1 = haxe__$Int32_Int32_$Impl_$._mul(n1,461845907);
	var h = seed;
	h ^= n1;
	h = h << 13 | h >>> 19;
	h = haxe__$Int32_Int32_$Impl_$._mul(h,5) + (-430675100) | 0;
	h ^= h >> 16;
	h = haxe__$Int32_Int32_$Impl_$._mul(h,-2048144789);
	h ^= h >> 13;
	h = haxe__$Int32_Int32_$Impl_$._mul(h,-1028477387);
	return h ^= h >> 16;
};
hxd_Rand.prototype = {
	init: function(seed) {
		this.seed = seed;
		this.seed2 = hxd_Rand.hash(seed);
		if(this.seed == 0) {
			this.seed = 1;
		}
		if(this.seed2 == 0) {
			this.seed2 = 1;
		}
	}
	,__class__: hxd_Rand
};
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = "hxd.Res";
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	var l = hxd_res_Loader.currentInstance;
	if(l == null) {
		throw new js__$Boot_HaxeError("Resource loader not initialized: call to hxd.Res.initXXX() required");
	}
	return l;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_Save = function() { };
$hxClasses["hxd.Save"] = hxd_Save;
hxd_Save.__name__ = "hxd.Save";
hxd_Save.makeCRC = function(data) {
	return HxOverrides.substr(haxe_crypto_Sha1.encode(data + haxe_crypto_Sha1.encode(data + "s*al!t")),4,32);
};
hxd_Save.loadData = function(data,checkSum) {
	if(checkSum) {
		if(HxOverrides.cca(data,data.length - 33) != 35) {
			throw new js__$Boot_HaxeError("Missing CRC");
		}
		var crc = HxOverrides.substr(data,data.length - 32,null);
		data = HxOverrides.substr(data,0,-33);
		if(hxd_Save.makeCRC(data) != crc) {
			throw new js__$Boot_HaxeError("Invalid CRC");
		}
	}
	return haxe_Unserializer.run(data);
};
hxd_Save.saveData = function(value,checkSum) {
	var data = haxe_Serializer.run(value);
	if(checkSum) {
		return data + "#" + hxd_Save.makeCRC(data);
	} else {
		return data;
	}
};
hxd_Save.load = function(defValue,name,checkSum) {
	if(checkSum == null) {
		checkSum = false;
	}
	if(name == null) {
		name = "save";
	}
	try {
		return hxd_Save.loadData(hxd_Save.readSaveData(name),checkSum);
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return defValue;
	}
};
hxd_Save.readSaveData = function(name) {
	return window.localStorage.getItem(name);
};
hxd_Save.writeSaveData = function(name,data) {
	window.localStorage.setItem(name,data);
};
hxd_Save.save = function(val,name,checkSum) {
	if(checkSum == null) {
		checkSum = false;
	}
	if(name == null) {
		name = "save";
	}
	var data = hxd_Save.saveData(val,checkSum);
	try {
		if(hxd_Save.readSaveData(name) == data) {
			return false;
		}
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	hxd_Save.writeSaveData(name,data);
	return true;
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,dispose: function() {
		this.window.removeEventTarget($bind(this,this.onEvent));
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		var _g1 = 0;
		var _g2 = this.scenes;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
									if(!(idx < this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
									if(!(idx > this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					var e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i1 = 0;
				var ev = this.onOver;
				while(true) {
					var info1 = this.overCandidates[i1++];
					ev.relX = info1.x;
					ev.relY = info1.y;
					ev.relZ = info1.z;
					if(info1.s.isInteractiveVisible(info1.i)) {
						info1.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info1.i);
					}
					info1.i = null;
					info1.s = null;
					if(!(i1 < overCandidateCount)) {
						break;
					}
				}
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g3 = 0;
			var _g4 = this.pushList;
			while(_g3 < _g4.length) {
				var i2 = _g4[_g3];
				++_g3;
				if(i2 == null) {
					this.dispatchListeners(event);
				} else {
					var s1 = i2.getInteractiveScene();
					if(s1 == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s1.dispatchEvent(event,i2);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__ : "hxd.Platform", __constructs__ : ["IOS","Android","WebGL","PC","Console","FlashPlayer"]
	,IOS: {_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__ : "hxd.SystemValue", __constructs__ : ["IsTouch","IsWindowed","IsMobile"]
	,IsTouch: {_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = Date.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = Date.now() / 1000;
};
var hxd_Window = function(canvas,globalEvents) {
	this.useScreenPixels = true;
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw new js__$Boot_HaxeError("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var f = $bind(this,this.onFocus);
	var tmp = function() {
		f(false);
	};
	this.element.addEventListener("blur",tmp);
	var f1 = $bind(this,this.onFocus);
	var tmp1 = function() {
		f1(true);
	};
	this.element.addEventListener("focus",tmp1);
	canvas.oncontextmenu = function(e) {
		e.stopPropagation();
		e.preventDefault();
		return false;
	};
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e1) {
			_gthis.onMouseDown(e1);
			e1.stopPropagation();
			e1.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e2) {
			e2.stopPropagation();
			e2.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
$hxClasses["hxd.Window"] = hxd_Window;
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,et)) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,f)) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,onMouseDown: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,set_displayMode: function(m) {
		var doc = window.document;
		var elt = doc.documentElement;
		var fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	,__class__: hxd_Window
};
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = "hxd.System";
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(hxd_System.browserLoop);
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			var _g11 = c.f;
			throw new js__$Boot_HaxeError("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.get_platform = function() {
	var ua = window.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__ : "hxd.DisplayMode", __constructs__ : ["Windowed","Borderless","Fullscreen","FullscreenResize"]
	,Windowed: {_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
var hxd_res_Embed = function() { };
$hxClasses["hxd.res.Embed"] = hxd_res_Embed;
hxd_res_Embed.__name__ = "hxd.res.Embed";
var hxd__$res_R_$fonts_$04B_$03_$_$_$TTF = function() { };
$hxClasses["hxd._res.R_fonts_04B_03___TTF"] = hxd__$res_R_$fonts_$04B_$03_$_$_$TTF;
hxd__$res_R_$fonts_$04B_$03_$_$_$TTF.__name__ = "hxd._res.R_fonts_04B_03___TTF";
hxd__$res_R_$fonts_$04B_$03_$_$_$TTF.__super__ = hxd_res_Embed;
hxd__$res_R_$fonts_$04B_$03_$_$_$TTF.prototype = $extend(hxd_res_Embed.prototype,{
	__class__: hxd__$res_R_$fonts_$04B_$03_$_$_$TTF
});
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = "hxd.earcut.EarNode";
hxd_earcut_EarNode.prototype = {
	__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = "hxd.earcut.Earcut";
hxd_earcut_Earcut.prototype = {
	triangulate_h2d_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g = 0;
		var _g1 = holes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g2 = 0;
		while(_g2 < queue.length) {
			var q = queue[_g2];
			++_g2;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g2 = start;
			var _g3 = end;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g2 = start;
			var _g3 = end;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX = root.x;
			this.minX = maxX;
			var maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		while(true) {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
			if(!(p != root)) {
				break;
			}
		}
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		while(true) {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
			if(!(p != node)) {
				break;
			}
		}
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		while(true) {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
			if(!(again || p != end)) {
				break;
			}
		}
		return end;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x1 = 32767 * (maxTX - this.minX) / this.size | 0;
		var y1 = 32767 * (maxTY - this.minY) / this.size | 0;
		x1 = (x1 | x1 << 8) & 16711935;
		x1 = (x1 | x1 << 4) & 252645135;
		x1 = (x1 | x1 << 2) & 858993459;
		x1 = (x1 | x1 << 1) & 1431655765;
		y1 = (y1 | y1 << 8) & 16711935;
		y1 = (y1 | y1 << 4) & 252645135;
		y1 = (y1 | y1 << 2) & 858993459;
		y1 = (y1 | y1 << 1) & 1431655765;
		var maxZ = x1 | y1 << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp2;
			var tmp3;
			if(p != ear.prev && p != ear.next) {
				var ax1 = a.x;
				var ay1 = a.y;
				var bx1 = b.x;
				var by1 = b.y;
				var cx1 = c.x;
				var cy1 = c.y;
				var px1 = p.x;
				var py1 = p.y;
				tmp3 = (cx1 - px1) * (ay1 - py1) - (ax1 - px1) * (cy1 - py1) >= 0 && (ax1 - px1) * (by1 - py1) - (bx1 - px1) * (ay1 - py1) >= 0 && (bx1 - px1) * (cy1 - py1) - (cx1 - px1) * (by1 - py1) >= 0;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				var p2 = p.prev;
				var r1 = p.next;
				tmp2 = (p.y - p2.y) * (r1.x - p.x) - (p.x - p2.x) * (r1.y - p.y) >= 0;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		while(true) {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		while(true) {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
			if(!(a != start)) {
				break;
			}
		}
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var a2 = n;
		var i1 = b.i;
		var x1 = b.x;
		var y1 = b.y;
		var last1 = null;
		var n1 = this.cache;
		if(n1 == null) {
			n1 = new hxd_earcut_EarNode();
			n1.allocNext = this.allocated;
			this.allocated = n1;
		} else {
			this.cache = n1.next;
		}
		n1.i = i1;
		n1.z = -1;
		n1.x = x1;
		n1.y = y1;
		n1.next = null;
		n1.prev = last1;
		n1.steiner = false;
		n1.prevZ = null;
		n1.nextZ = null;
		if(last1 != null) {
			last1.next = n1;
		}
		var b2 = n1;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = b.prev;
				var r3 = b.next;
				if((b.y - p1.y) * (r3.x - b.x) - (b.x - p1.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		while(true) {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		while(true) {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return false;
	}
	,indexCurve: function(start) {
		var p = start;
		while(true) {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		while(true) {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g = 0;
				var _g1 = inSize;
				while(_g < _g1) {
					var i = _g++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
			if(!(numMerges > 1)) {
				break;
			}
		}
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fmt_bfnt_FontParser = function() { };
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd_fmt_bfnt_FontParser;
hxd_fmt_bfnt_FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd_fmt_bfnt_FontParser.parse = function(bytes,path,resolveTile) {
	var tile = null;
	var font = new h2d_Font(null,0);
	var glyphs = font.glyphs;
	font.baseLine = 0;
	var _g = bytes.getInt32(0);
	switch(_g) {
	case 54938946:
		var bytes1 = new haxe_io_BytesInput(bytes);
		var _g1 = bytes1;
		_g1.set_position(_g1.pos + 4);
		var pageCount = 0;
		while(bytes1.pos < bytes1.totlen) {
			var id = bytes1.readByte();
			var length = bytes1.readInt32();
			var pos = bytes1.pos;
			switch(id) {
			case 1:
				font.size = font.initSize = bytes1.readInt16();
				var _g2 = bytes1;
				_g2.set_position(_g2.pos + 12);
				font.name = bytes1.readUntil(0);
				break;
			case 2:
				font.lineHeight = bytes1.readUInt16();
				font.baseLine = bytes1.readUInt16();
				var _g3 = bytes1;
				_g3.set_position(_g3.pos + 4);
				pageCount = bytes1.readUInt16();
				if(pageCount != 1) {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 224, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
				break;
			case 3:
				var name = bytes1.readUntil(0);
				try {
					font.tilePath = name;
					var tile1 = haxe_io_Path.join([haxe_io_Path.directory(path),name]);
					tile = resolveTile(tile1);
				} catch( e ) {
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					haxe_Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe_io_Path(path).file + ".png";
					var tile2 = haxe_io_Path.withExtension(path,"png");
					tile = resolveTile(tile2);
				}
				break;
			case 4:
				var count = length / 20 | 0;
				while(count > 0) {
					var cid = bytes1.readInt32();
					var t = bytes1.readUInt16();
					var t1 = bytes1.readUInt16();
					var t2 = bytes1.readUInt16();
					var t3 = bytes1.readUInt16();
					var t4 = bytes1.readInt16();
					var t5 = bytes1.readInt16();
					var t6 = tile.sub(t,t1,t2,t3,t4,t5);
					var fc = new h2d_FontChar(t6,bytes1.readInt16());
					glyphs.h[cid] = fc;
					var _g4 = bytes1;
					_g4.set_position(_g4.pos + 2);
					--count;
				}
				break;
			case 5:
				var count1 = length / 10 | 0;
				while(count1 > 0) {
					var first = bytes1.readInt32();
					var key = bytes1.readInt32();
					var fc1 = glyphs.h[key];
					if(fc1 != null) {
						fc1.addKerning(first,bytes1.readInt16());
					} else {
						var _g5 = bytes1;
						_g5.set_position(_g5.pos + 2);
					}
					--count1;
				}
				break;
			}
			bytes1.set_position(pos + length);
		}
		break;
	case 1414415938:
		return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(function(tp) {
			try {
				font.tilePath = tp;
				var tile3 = haxe_io_Path.join([haxe_io_Path.directory(path),tp]);
				tile = resolveTile(tile3);
			} catch( e2 ) {
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				font.tilePath = new haxe_io_Path(path).file + ".png";
				var tile4 = haxe_io_Path.withExtension(path,"png");
				tile = resolveTile(tile4);
			}
			return tile;
		});
	case 1836597052:case 1852794428:
		var xml = Xml.parse(bytes.toString());
		var x = xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Invalid nodeType " + (x.nodeType == null ? "null" : _$Xml_XmlType_$Impl_$.toString(x.nodeType)));
		}
		var this1 = x;
		var xml1 = this1;
		if(haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve(xml1,"info")) {
			var tmp = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"info");
			font.name = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(tmp,"face");
			var tmp1 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"info"),"size");
			font.size = font.initSize = Std.parseInt(tmp1);
			var tmp2 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"common"),"lineHeight");
			font.lineHeight = Std.parseInt(tmp2);
			var tmp3 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"common"),"base");
			font.baseLine = Std.parseInt(tmp3);
			var p = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"pages").elements();
			while(p.hasNext()) {
				var p1 = p.next();
				if(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(p1,"id") == "0") {
					var tilePath = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(p1,"file");
					try {
						font.tilePath = tilePath;
						var tile5 = haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]);
						tile = resolveTile(tile5);
					} catch( e4 ) {
						var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
						haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe_io_Path(path).file + ".png";
						var tile6 = haxe_io_Path.withExtension(path,"png");
						tile = resolveTile(tile6);
					}
				} else {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 66, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
			}
			var chars = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"chars").elements();
			var c = chars;
			while(c.hasNext()) {
				var c1 = c.next();
				var t7 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"x"));
				var t8 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"y"));
				var t9 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"width"));
				var t10 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"height"));
				var t11 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"xoffset"));
				var t12 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"yoffset"));
				var t13 = tile.sub(t7,t8,t9,t10,t11,t12);
				var fc2 = new h2d_FontChar(t13,Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"xadvance")));
				var kerns = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"kernings").elements();
				var k = kerns;
				while(k.hasNext()) {
					var k1 = k.next();
					if(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"second") == haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"id")) {
						fc2.addKerning(Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"first")),Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"amount")));
					}
				}
				var key1 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"id"));
				glyphs.h[key1] = fc2;
			}
		} else {
			font.tilePath = new haxe_io_Path(path).file + ".png";
			var tile7 = haxe_io_Path.withExtension(path,"png");
			tile = resolveTile(tile7);
			font.name = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"family");
			var tmp4 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"size");
			font.size = font.initSize = Std.parseInt(tmp4);
			var tmp5 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"height");
			font.lineHeight = Std.parseInt(tmp5);
			var kernings = [];
			var c2 = xml1.elements();
			while(c2.hasNext()) {
				var c3 = c2.next();
				var r = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"rect").split(" ");
				var o = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"offset").split(" ");
				var t14 = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc3 = new h2d_FontChar(t14,Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"width")) - 1);
				var code = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"code");
				var code1 = StringTools.startsWith(code,"&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
				var k2 = c3.elements();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var code2 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k3,"id");
					var next = StringTools.startsWith(code2,"&#") ? Std.parseInt(HxOverrides.substr(code2,2,code2.length - 3)) : HxOverrides.cca(code2,0);
					var adv = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k3,"advance"));
					if(glyphs.h.hasOwnProperty(next)) {
						glyphs.h[next].addKerning(code1,adv);
					} else {
						kernings.push({ prev : code1, next : next, adv : adv});
					}
				}
				glyphs.h[code1] = fc3;
			}
			var _g6 = 0;
			while(_g6 < kernings.length) {
				var k4 = kernings[_g6];
				++_g6;
				var g = glyphs.h[k4.next];
				if(g == null) {
					continue;
				}
				g.addKerning(k4.prev,k4.adv);
			}
		}
		break;
	case 1868983913:
		var lines = bytes.toString().split("\n");
		var reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
		var idx;
		var pageCount1 = 0;
		var _g7 = 0;
		while(_g7 < lines.length) {
			var line = lines[_g7];
			++_g7;
			idx = line.indexOf(" ");
			switch(HxOverrides.substr(line,0,idx)) {
			case "char":
				var id1 = 0;
				var x1 = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var xoffset = 0;
				var yoffset = 0;
				var xadvance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "height":
						var v = reg.matched(2);
						height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
						break;
					case "id":
						var v1 = reg.matched(2);
						id1 = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
						break;
					case "width":
						var v2 = reg.matched(2);
						width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
						break;
					case "x":
						var v3 = reg.matched(2);
						x1 = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
						break;
					case "xadvance":
						var v4 = reg.matched(2);
						xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
						break;
					case "xoffset":
						var v5 = reg.matched(2);
						xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
						break;
					case "y":
						var v6 = reg.matched(2);
						y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
						break;
					case "yoffset":
						var v7 = reg.matched(2);
						yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
						break;
					}
					var pos1 = reg.matchedPos();
					idx = pos1.pos + pos1.len;
				}
				var t15 = tile.sub(x1,y,width,height,xoffset,yoffset);
				var fc4 = new h2d_FontChar(t15,xadvance);
				glyphs.h[id1] = fc4;
				break;
			case "common":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "base":
						var v8 = reg.matched(2);
						font.baseLine = Std.parseInt(HxOverrides.cca(v8,0) == 34 ? v8.substring(1,v8.length - 1) : v8);
						break;
					case "lineHeight":
						var v9 = reg.matched(2);
						font.lineHeight = Std.parseInt(HxOverrides.cca(v9,0) == 34 ? v9.substring(1,v9.length - 1) : v9);
						break;
					case "pages":
						var v10 = reg.matched(2);
						pageCount1 = Std.parseInt(HxOverrides.cca(v10,0) == 34 ? v10.substring(1,v10.length - 1) : v10);
						if(pageCount1 != 1) {
							haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 157, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						}
						break;
					}
					var pos2 = reg.matchedPos();
					idx = pos2.pos + pos2.len;
				}
				break;
			case "info":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "face":
						var v11 = reg.matched(2);
						font.name = HxOverrides.cca(v11,0) == 34 ? v11.substring(1,v11.length - 1) : v11;
						break;
					case "size":
						var v12 = reg.matched(2);
						font.size = font.initSize = Std.parseInt(HxOverrides.cca(v12,0) == 34 ? v12.substring(1,v12.length - 1) : v12);
						break;
					}
					var pos3 = reg.matchedPos();
					idx = pos3.pos + pos3.len;
				}
				break;
			case "kerning":
				var first1 = 0;
				var second = 0;
				var advance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "amount":
						var v13 = reg.matched(2);
						advance = Std.parseInt(HxOverrides.cca(v13,0) == 34 ? v13.substring(1,v13.length - 1) : v13);
						break;
					case "first":
						var v14 = reg.matched(2);
						first1 = Std.parseInt(HxOverrides.cca(v14,0) == 34 ? v14.substring(1,v14.length - 1) : v14);
						break;
					case "second":
						var v15 = reg.matched(2);
						second = Std.parseInt(HxOverrides.cca(v15,0) == 34 ? v15.substring(1,v15.length - 1) : v15);
						break;
					}
					var pos4 = reg.matchedPos();
					idx = pos4.pos + pos4.len;
				}
				var fc5 = glyphs.h[second];
				if(fc5 != null) {
					fc5.addKerning(first1,advance);
				}
				break;
			case "page":
				while(idx < line.length && reg.matchSub(line,idx)) {
					if(reg.matched(1) == "file") {
						var v16 = reg.matched(2);
						var tilePath1 = HxOverrides.cca(v16,0) == 34 ? v16.substring(1,v16.length - 1) : v16;
						try {
							font.tilePath = tilePath1;
							var tile8 = haxe_io_Path.join([haxe_io_Path.directory(path),tilePath1]);
							tile = resolveTile(tile8);
						} catch( e6 ) {
							var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
							haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath1 + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe_io_Path(path).file + ".png";
							var tile9 = haxe_io_Path.withExtension(path,"png");
							tile = resolveTile(tile9);
						}
					}
					var pos5 = reg.matchedPos();
					idx = pos5.pos + pos5.len;
				}
				break;
			}
		}
		break;
	default:
		var sign = _g;
		throw new js__$Boot_HaxeError("Unknown font signature " + StringTools.hex(sign,8));
	}
	if(glyphs.h[32] == null) {
		var value = new h2d_FontChar(tile.sub(0,0,0,0),font.size >> 1);
		glyphs.h[32] = value;
	}
	font.tile = tile;
	if(font.baseLine == 0) {
		var padding = 0;
		var space = glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		var a = glyphs.h[65];
		if(a == null) {
			a = glyphs.h[97];
		}
		if(a == null) {
			a = glyphs.h[48];
		}
		if(a == null) {
			font.baseLine = font.lineHeight - 2 - padding;
		} else {
			font.baseLine = a.t.dy + a.t.height - padding;
		}
	}
	var fallback = glyphs.h[65533];
	if(fallback == null) {
		fallback = glyphs.h[9633];
	}
	if(fallback == null) {
		fallback = glyphs.h[63];
	}
	if(fallback != null) {
		font.defaultChar = fallback;
	}
	return font;
};
var hxd_fmt_bfnt_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd_fmt_bfnt_Reader;
hxd_fmt_bfnt_Reader.__name__ = "hxd.fmt.bfnt.Reader";
hxd_fmt_bfnt_Reader.prototype = {
	read: function(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw new js__$Boot_HaxeError("Not a BFNT file!");
		}
		var font = null;
		var _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d_Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			var tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			var defaultChar = this.i.readInt32();
			var id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				var t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				var glyph = new h2d_FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				var prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			var ver = _g;
			throw new js__$Boot_HaxeError("Unknown BFNT version: " + ver);
		}
		return font;
	}
	,__class__: hxd_fmt_bfnt_Reader
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	getBytes: function() {
		return null;
	}
	,open: function() {
	}
	,skip: function(nbytes) {
	}
	,readByte: function() {
		return 0;
	}
	,read: function(out,pos,size) {
	}
	,close: function() {
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw new js__$Boot_HaxeError("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw new js__$Boot_HaxeError("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_path: function() {
		throw new js__$Boot_HaxeError("path() not implemented");
	}
	,get_extension: function() {
		var np = this.name.split(".");
		if(np.length == 1) {
			return "";
		} else {
			return np.pop().toLowerCase();
		}
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs__$EmbedFileSystem_EmbedEntry = function(fs,name,relPath,data) {
	this.fs = fs;
	this.name = name;
	this.relPath = relPath;
	this.data = data;
};
$hxClasses["hxd.fs._EmbedFileSystem.EmbedEntry"] = hxd_fs__$EmbedFileSystem_EmbedEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.__name__ = "hxd.fs._EmbedFileSystem.EmbedEntry";
hxd_fs__$EmbedFileSystem_EmbedEntry.__super__ = hxd_fs_FileEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	getBytes: function() {
		if(this.bytes == null) {
			this.open();
		}
		return this.bytes;
	}
	,open: function() {
		if(this.bytes == null) {
			this.bytes = haxe_Resource.getBytes(this.data);
			if(this.bytes == null) {
				throw new js__$Boot_HaxeError("Missing resource " + this.data);
			}
		}
		this.readPos = 0;
	}
	,skip: function(nbytes) {
		this.readPos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.readPos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.readPos,size);
		this.readPos += size;
	}
	,close: function() {
		this.bytes = null;
		this.readPos = 0;
	}
	,load: function(onReady) {
		if(onReady != null) {
			haxe_Timer.delay(onReady,1);
		}
	}
	,loadBitmap: function(onLoaded) {
		var rawData = null;
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(res.name == this.data) {
				rawData = res.data;
				break;
			}
		}
		if(rawData == null) {
			throw new js__$Boot_HaxeError("Missing resource " + this.data);
		}
		var image = new Image();
		image.onload = function(_) {
			var this1 = image;
			onLoaded(this1);
		};
		var extra = "";
		var bytes = rawData.length * 6 >> 3;
		var _g2 = 0;
		var _g3 = (3 - bytes * 4 % 3) % 3;
		while(_g2 < _g3) {
			var i = _g2++;
			extra += "=";
		}
		var tmp = "data:image/" + this.get_extension() + ";base64," + rawData;
		image.src = tmp + extra;
	}
	,get_path: function() {
		if(this.relPath == ".") {
			return "<root>";
		} else {
			return this.relPath;
		}
	}
	,__class__: hxd_fs__$EmbedFileSystem_EmbedEntry
});
var hxd_fs_EmbedFileSystem = function(root) {
	this.root = root;
};
$hxClasses["hxd.fs.EmbedFileSystem"] = hxd_fs_EmbedFileSystem;
hxd_fs_EmbedFileSystem.__name__ = "hxd.fs.EmbedFileSystem";
hxd_fs_EmbedFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_EmbedFileSystem.resolve = function(path) {
	return "R_" + path.replace(hxd_fs_EmbedFileSystem.invalidChars.r,"_");
};
hxd_fs_EmbedFileSystem.prototype = {
	splitPath: function(path) {
		if(path == ".") {
			return [];
		} else {
			return path.split("/");
		}
	}
	,exists: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
			if(r == null) {
				return false;
			}
		}
		return true;
	}
	,get: function(path) {
		if(!this.exists(path)) {
			throw new js__$Boot_HaxeError(new hxd_fs_NotFound(path));
		}
		var id = hxd_fs_EmbedFileSystem.resolve(path);
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,path.split("/").pop(),path,id);
	}
	,__class__: hxd_fs_EmbedFileSystem
};
var hxd_fs_FileInput = function(f) {
	this.f = f;
	f.open();
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	skip: function(nbytes) {
		this.f.skip(nbytes);
	}
	,readByte: function() {
		return this.f.readByte();
	}
	,readBytes: function(b,pos,len) {
		this.f.read(b,pos,len);
		return len;
	}
	,close: function() {
		this.f.close();
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$ = {};
$hxClasses["hxd.fs._LoadedBitmap.LoadedBitmap_Impl_"] = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$;
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.__name__ = "hxd.fs._LoadedBitmap.LoadedBitmap_Impl_";
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl_Allocator = function() {
};
$hxClasses["hxd.impl.Allocator"] = hxd_impl_Allocator;
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
hxd_impl_Allocator.get = function() {
	if(hxd_impl_Allocator.inst == null) {
		hxd_impl_Allocator.inst = new hxd_impl_Allocator();
	}
	return hxd_impl_Allocator.inst;
};
hxd_impl_Allocator.prototype = {
	onContextLost: function() {
	}
	,__class__: hxd_impl_Allocator
};
var hxd_impl_ArrayIterator_$hxd_$snd_$Channel = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_snd_Channel"] = hxd_impl_ArrayIterator_$hxd_$snd_$Channel;
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.__name__ = "hxd.impl.ArrayIterator_hxd_snd_Channel";
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$snd_$Channel
};
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toTile: function() {
		return this.toImage().toTile();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,toSound: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Sound);
	}
	,to: function(c) {
		return this.loader.loadCache(this.entry.get_path(),c);
	}
	,__class__: hxd_res_Any
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font == null) {
			this.font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	,resolveTile: function(path) {
		return this.loader.load(path).toTile();
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_Font = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Font"] = hxd_res_Font;
hxd_res_Font.__name__ = "hxd.res.Font";
hxd_res_Font.__super__ = hxd_res_Resource;
hxd_res_Font.prototype = $extend(hxd_res_Resource.prototype,{
	__class__: hxd_res_Font
});
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getFormat: function() {
		this.getSize();
		return this.inf.format;
	}
	,getSize: function() {
		if(this.inf != null) {
			return this.inf;
		}
		var f = new hxd_fs_FileInput(this.entry);
		var width = 0;
		var height = 0;
		var format;
		var bc = 0;
		var head;
		try {
			head = f.readUInt16();
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				head = 0;
			} else {
				throw e;
			}
		}
		switch(head) {
		case 17476:
			format = 4;
			f.skip(10);
			height = f.readInt32();
			width = f.readInt32();
			f.skip(64);
			var fourCC = f.readInt32();
			switch(fourCC & 16777215) {
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				switch(v) {
				case 1:
					bc = 4;
					break;
				case 2:
					bc = 5;
					break;
				default:
					bc = 0;
				}
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				switch(dxt) {
				case 1:
					bc = 1;
					break;
				case 2:case 3:
					bc = 2;
					break;
				case 4:case 5:
					bc = 3;
					break;
				default:
					bc = 0;
				}
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(40);
					var dxgi = f.readInt32();
					switch(dxgi) {
					case 95:
						bc = 6;
						break;
					case 98:
						bc = 7;
						break;
					default:
						throw new js__$Boot_HaxeError(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
				}
			}
			if(bc == 0) {
				throw new js__$Boot_HaxeError(this.entry.get_path() + " has unsupported 4CC " + String.fromCodePoint(fourCC & 255) + String.fromCodePoint(fourCC >> 8 & 255) + String.fromCodePoint(fourCC >> 16 & 255) + String.fromCodePoint(fourCC >>> 24));
			}
			break;
		case 18759:
			format = 2;
			f.readInt32();
			width = f.readUInt16();
			height = f.readUInt16();
			break;
		case 20617:
			format = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					width = f.readInt32();
					height = f.readInt32();
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			format = 0;
			f.set_bigEndian(true);
			_hx_loop2: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				height = f.readUInt16();
				width = f.readUInt16();
				break _hx_loop2;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				format = 3;
				f.skip(10);
				width = f.readUInt16();
				height = f.readUInt16();
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		this.inf = { width : width, height : height, format : format, bc : bc};
		return this.inf;
	}
	,getPixels: function(fmt,flipY) {
		this.getSize();
		var pixels;
		switch(this.inf.format) {
		case 0:
			var bytes = this.entry.getBytes();
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				throw new js__$Boot_HaxeError("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e1) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes1 = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes1));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,hxd_PixelFormat.BGRA);
			var pdata = png.read();
			format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			if(flipY) {
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
			}
			break;
		case 2:
			var bytes2 = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes2)).read();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			break;
		case 3:
			var bytes3 = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes3)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw new js__$Boot_HaxeError("Not supported " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
			var access = hxd__$Pixels_PixelsARGB_$Impl_$.fromPixels(pixels);
			var p1 = 0;
			var _g = 0;
			var _g1 = h;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g11 = w;
				while(_g2 < _g11) {
					var x = _g2++;
					var c = r.imageData[x + y * w];
					access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
				break;
			case 2:
				break;
			default:
				throw new js__$Boot_HaxeError("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var bytes4 = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes4,hxd_PixelFormat.S3TC(this.inf.bc),128 + (this.inf.bc >= 6 ? 20 : 0));
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		if(flipY != null) {
			pixels.setFlip(flipY);
		}
		return pixels;
	}
	,toBitmap: function() {
		this.getSize();
		var bmp = new hxd_BitmapData(this.inf.width,this.inf.height);
		var pixels = this.getPixels();
		bmp.setPixels(pixels);
		pixels.dispose();
		return bmp;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getSize();
		if(w != s.width || h != s.height) {
			this.tex.resize(w,h);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function() {
		var _gthis = this;
		if(this.getFormat() != 0 && !hxd_res_Image.DEFAULT_ASYNC) {
			var load = function() {
				_gthis.tex.alloc();
				var pixels = _gthis.getPixels(_gthis.tex.format);
				if(pixels.width != _gthis.tex.width || pixels.height != _gthis.tex.height) {
					pixels.makeSquare();
				}
				_gthis.tex.uploadPixels(pixels);
				pixels.dispose();
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			};
			if(this.entry.get_isAvailable()) {
				load();
			} else {
				this.entry.load(load);
			}
		} else {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap(bmp);
				_gthis.tex.alloc();
				if(bmp1.ctx.canvas.width != _gthis.tex.width || bmp1.ctx.canvas.height != _gthis.tex.height) {
					var pixels1 = bmp1.getPixels();
					pixels1.makeSquare();
					_gthis.tex.uploadPixels(pixels1);
					pixels1.dispose();
				} else {
					_gthis.tex.uploadBitmap(bmp1);
				}
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
		}
	}
	,toTexture: function() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getSize();
		var width = this.inf.width;
		var height = this.inf.height;
		if(!hxd_res_Image.ALLOW_NPOT) {
			var tw = 1;
			var th = 1;
			while(tw < width) tw <<= 1;
			while(th < height) th <<= 1;
			width = tw;
			height = th;
		}
		var format = h3d_mat_Texture.nativeFormat;
		if(this.inf.format == 4) {
			format = hxd_PixelFormat.S3TC(this.inf.bc);
		}
		this.tex = new h3d_mat_Texture(width,height,[h3d_mat_TextureFlags.NoAlloc],format);
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		this.loadTexture();
		return this.tex;
	}
	,toTile: function() {
		var size = this.getSize();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,size.width,size.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var res = this.cache.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			this.cache.h[path] = res;
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw new js__$Boot_HaxeError(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,__class__: hxd_res_Loader
};
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__ : "hxd.res.Filter", __constructs__ : ["Fast","Chromatic"]
	,Fast: {_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	var this1 = new Array(64);
	var this2 = new Array(64);
	var this3 = new Array(64);
	var this4 = new Array(64);
	this.qtab = [this1,this2,this3,this4].slice(0);
	var this5 = new Array(16);
	this.counts = this5;
	var this6 = new Array(64);
	this.block = this6;
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njDecodeSOF: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g1 = 0;
		var _g2 = this.ncomp;
		while(_g1 < _g2) {
			var i = _g1++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c1 = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c1.ssx = c1.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g3 = 0;
		var _g4 = this.ncomp;
		while(_g3 < _g4) {
			var i1 = _g3++;
			var c2 = this.comps[i1];
			c2.width = (this.width * c2.ssx + ssxmax - 1) / ssxmax | 0;
			c2.stride = c2.width + 7 & 2147483640;
			c2.height = (this.height * c2.ssy + ssymax - 1) / ssymax | 0;
			c2.stride = this.mbwidth * this.mbsizex * c2.ssx / ssxmax | 0;
			if(c2.width < 3 && c2.ssx != ssxmax || c2.height < 3 && c2.ssy != ssymax) {
				this.notSupported();
			}
			c2.pixels = new haxe_io_Bytes(new ArrayBuffer(c2.stride * (this.mbheight * this.mbsizey * c2.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeDQT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
		}
	}
	,njDecodeDHT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				remain -= currcnt << 16 - codelen;
				var _g1 = 0;
				var _g11 = currcnt;
				while(_g1 < _g11) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g2 = 0;
					var _g12 = spread;
					while(_g2 < _g12) {
						var j = _g2++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
	}
	,njDecodeDRI: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeBlock: function(c,po) {
		var this1 = c.pixels;
		var out = this1;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		while(true) {
			var value2 = this.njShowBits(16);
			var bits1 = at.b[value2 << 1];
			if(this.bufbits < bits1) {
				this.njShowBits(bits1);
			}
			this.bufbits -= bits1;
			value2 = at.b[value2 << 1 | 1];
			this.vlcCode = value2;
			bits1 = value2 & 15;
			if(bits1 == 0) {
				value = 0;
			} else {
				var r1 = this.njShowBits(bits1);
				this.bufbits -= bits1;
				value2 = r1;
				if(value2 < 1 << bits1 - 1) {
					value2 += (-1 << bits1) + 1;
				}
				value = value2;
			}
			if(this.vlcCode == 0) {
				break;
			}
			coef += (this.vlcCode >> 4) + 1;
			this.block[this.njZZ[coef]] = value * qt[coef];
			if(!(coef < 63)) {
				break;
			}
		}
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val2 = this.block[bp + 5] = val1;
			var val3 = this.block[bp + 4] = val2;
			var val4 = this.block[bp + 3] = val3;
			var val5 = this.block[bp + 2] = val4;
			var val6 = this.block[bp + 1] = val5;
			this.block[bp] = val6;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp1 = 8;
		var x01;
		var x81;
		var x11 = this.block[bp1 + 4] << 11;
		var x21 = this.block[bp1 + 6];
		var x31 = this.block[bp1 + 2];
		var x41 = this.block[bp1 + 1];
		var x51 = this.block[bp1 + 7];
		var x61 = this.block[bp1 + 5];
		var x71 = this.block[bp1 + 3];
		if((x11 | x21 | x31 | x41 | x51 | x61 | x71) == 0) {
			var val7 = this.block[bp1 + 7] = this.block[bp1] << 3;
			var val8 = this.block[bp1 + 6] = val7;
			var val9 = this.block[bp1 + 5] = val8;
			var val10 = this.block[bp1 + 4] = val9;
			var val11 = this.block[bp1 + 3] = val10;
			var val12 = this.block[bp1 + 2] = val11;
			var val13 = this.block[bp1 + 1] = val12;
			this.block[bp1] = val13;
		} else {
			x01 = (this.block[bp1] << 11) + 128;
			x81 = 565 * (x41 + x51);
			x41 = x81 + 2276 * x41;
			x51 = x81 - 3406 * x51;
			x81 = 2408 * (x61 + x71);
			x61 = x81 - 799 * x61;
			x71 = x81 - 4017 * x71;
			x81 = x01 + x11;
			x01 -= x11;
			x11 = 1108 * (x31 + x21);
			x21 = x11 - 3784 * x21;
			x31 = x11 + 1568 * x31;
			x11 = x41 + x61;
			x41 -= x61;
			x61 = x51 + x71;
			x51 -= x71;
			x71 = x81 + x31;
			x81 -= x31;
			x31 = x01 + x21;
			x01 -= x21;
			x21 = 181 * (x41 + x51) + 128 >> 8;
			x41 = 181 * (x41 - x51) + 128 >> 8;
			this.block[bp1] = x71 + x11 >> 8;
			this.block[bp1 + 1] = x31 + x21 >> 8;
			this.block[bp1 + 2] = x01 + x41 >> 8;
			this.block[bp1 + 3] = x81 + x61 >> 8;
			this.block[bp1 + 4] = x81 - x61 >> 8;
			this.block[bp1 + 5] = x01 - x41 >> 8;
			this.block[bp1 + 6] = x31 - x21 >> 8;
			this.block[bp1 + 7] = x71 - x11 >> 8;
		}
		var bp2 = 16;
		var x02;
		var x82;
		var x12 = this.block[bp2 + 4] << 11;
		var x22 = this.block[bp2 + 6];
		var x32 = this.block[bp2 + 2];
		var x42 = this.block[bp2 + 1];
		var x52 = this.block[bp2 + 7];
		var x62 = this.block[bp2 + 5];
		var x72 = this.block[bp2 + 3];
		if((x12 | x22 | x32 | x42 | x52 | x62 | x72) == 0) {
			var val14 = this.block[bp2 + 7] = this.block[bp2] << 3;
			var val15 = this.block[bp2 + 6] = val14;
			var val16 = this.block[bp2 + 5] = val15;
			var val17 = this.block[bp2 + 4] = val16;
			var val18 = this.block[bp2 + 3] = val17;
			var val19 = this.block[bp2 + 2] = val18;
			var val20 = this.block[bp2 + 1] = val19;
			this.block[bp2] = val20;
		} else {
			x02 = (this.block[bp2] << 11) + 128;
			x82 = 565 * (x42 + x52);
			x42 = x82 + 2276 * x42;
			x52 = x82 - 3406 * x52;
			x82 = 2408 * (x62 + x72);
			x62 = x82 - 799 * x62;
			x72 = x82 - 4017 * x72;
			x82 = x02 + x12;
			x02 -= x12;
			x12 = 1108 * (x32 + x22);
			x22 = x12 - 3784 * x22;
			x32 = x12 + 1568 * x32;
			x12 = x42 + x62;
			x42 -= x62;
			x62 = x52 + x72;
			x52 -= x72;
			x72 = x82 + x32;
			x82 -= x32;
			x32 = x02 + x22;
			x02 -= x22;
			x22 = 181 * (x42 + x52) + 128 >> 8;
			x42 = 181 * (x42 - x52) + 128 >> 8;
			this.block[bp2] = x72 + x12 >> 8;
			this.block[bp2 + 1] = x32 + x22 >> 8;
			this.block[bp2 + 2] = x02 + x42 >> 8;
			this.block[bp2 + 3] = x82 + x62 >> 8;
			this.block[bp2 + 4] = x82 - x62 >> 8;
			this.block[bp2 + 5] = x02 - x42 >> 8;
			this.block[bp2 + 6] = x32 - x22 >> 8;
			this.block[bp2 + 7] = x72 - x12 >> 8;
		}
		var bp3 = 24;
		var x03;
		var x83;
		var x13 = this.block[bp3 + 4] << 11;
		var x23 = this.block[bp3 + 6];
		var x33 = this.block[bp3 + 2];
		var x43 = this.block[bp3 + 1];
		var x53 = this.block[bp3 + 7];
		var x63 = this.block[bp3 + 5];
		var x73 = this.block[bp3 + 3];
		if((x13 | x23 | x33 | x43 | x53 | x63 | x73) == 0) {
			var val21 = this.block[bp3 + 7] = this.block[bp3] << 3;
			var val22 = this.block[bp3 + 6] = val21;
			var val23 = this.block[bp3 + 5] = val22;
			var val24 = this.block[bp3 + 4] = val23;
			var val25 = this.block[bp3 + 3] = val24;
			var val26 = this.block[bp3 + 2] = val25;
			var val27 = this.block[bp3 + 1] = val26;
			this.block[bp3] = val27;
		} else {
			x03 = (this.block[bp3] << 11) + 128;
			x83 = 565 * (x43 + x53);
			x43 = x83 + 2276 * x43;
			x53 = x83 - 3406 * x53;
			x83 = 2408 * (x63 + x73);
			x63 = x83 - 799 * x63;
			x73 = x83 - 4017 * x73;
			x83 = x03 + x13;
			x03 -= x13;
			x13 = 1108 * (x33 + x23);
			x23 = x13 - 3784 * x23;
			x33 = x13 + 1568 * x33;
			x13 = x43 + x63;
			x43 -= x63;
			x63 = x53 + x73;
			x53 -= x73;
			x73 = x83 + x33;
			x83 -= x33;
			x33 = x03 + x23;
			x03 -= x23;
			x23 = 181 * (x43 + x53) + 128 >> 8;
			x43 = 181 * (x43 - x53) + 128 >> 8;
			this.block[bp3] = x73 + x13 >> 8;
			this.block[bp3 + 1] = x33 + x23 >> 8;
			this.block[bp3 + 2] = x03 + x43 >> 8;
			this.block[bp3 + 3] = x83 + x63 >> 8;
			this.block[bp3 + 4] = x83 - x63 >> 8;
			this.block[bp3 + 5] = x03 - x43 >> 8;
			this.block[bp3 + 6] = x33 - x23 >> 8;
			this.block[bp3 + 7] = x73 - x13 >> 8;
		}
		var bp4 = 32;
		var x04;
		var x84;
		var x14 = this.block[bp4 + 4] << 11;
		var x24 = this.block[bp4 + 6];
		var x34 = this.block[bp4 + 2];
		var x44 = this.block[bp4 + 1];
		var x54 = this.block[bp4 + 7];
		var x64 = this.block[bp4 + 5];
		var x74 = this.block[bp4 + 3];
		if((x14 | x24 | x34 | x44 | x54 | x64 | x74) == 0) {
			var val28 = this.block[bp4 + 7] = this.block[bp4] << 3;
			var val29 = this.block[bp4 + 6] = val28;
			var val30 = this.block[bp4 + 5] = val29;
			var val31 = this.block[bp4 + 4] = val30;
			var val32 = this.block[bp4 + 3] = val31;
			var val33 = this.block[bp4 + 2] = val32;
			var val34 = this.block[bp4 + 1] = val33;
			this.block[bp4] = val34;
		} else {
			x04 = (this.block[bp4] << 11) + 128;
			x84 = 565 * (x44 + x54);
			x44 = x84 + 2276 * x44;
			x54 = x84 - 3406 * x54;
			x84 = 2408 * (x64 + x74);
			x64 = x84 - 799 * x64;
			x74 = x84 - 4017 * x74;
			x84 = x04 + x14;
			x04 -= x14;
			x14 = 1108 * (x34 + x24);
			x24 = x14 - 3784 * x24;
			x34 = x14 + 1568 * x34;
			x14 = x44 + x64;
			x44 -= x64;
			x64 = x54 + x74;
			x54 -= x74;
			x74 = x84 + x34;
			x84 -= x34;
			x34 = x04 + x24;
			x04 -= x24;
			x24 = 181 * (x44 + x54) + 128 >> 8;
			x44 = 181 * (x44 - x54) + 128 >> 8;
			this.block[bp4] = x74 + x14 >> 8;
			this.block[bp4 + 1] = x34 + x24 >> 8;
			this.block[bp4 + 2] = x04 + x44 >> 8;
			this.block[bp4 + 3] = x84 + x64 >> 8;
			this.block[bp4 + 4] = x84 - x64 >> 8;
			this.block[bp4 + 5] = x04 - x44 >> 8;
			this.block[bp4 + 6] = x34 - x24 >> 8;
			this.block[bp4 + 7] = x74 - x14 >> 8;
		}
		var bp5 = 40;
		var x05;
		var x85;
		var x15 = this.block[bp5 + 4] << 11;
		var x25 = this.block[bp5 + 6];
		var x35 = this.block[bp5 + 2];
		var x45 = this.block[bp5 + 1];
		var x55 = this.block[bp5 + 7];
		var x65 = this.block[bp5 + 5];
		var x75 = this.block[bp5 + 3];
		if((x15 | x25 | x35 | x45 | x55 | x65 | x75) == 0) {
			var val35 = this.block[bp5 + 7] = this.block[bp5] << 3;
			var val36 = this.block[bp5 + 6] = val35;
			var val37 = this.block[bp5 + 5] = val36;
			var val38 = this.block[bp5 + 4] = val37;
			var val39 = this.block[bp5 + 3] = val38;
			var val40 = this.block[bp5 + 2] = val39;
			var val41 = this.block[bp5 + 1] = val40;
			this.block[bp5] = val41;
		} else {
			x05 = (this.block[bp5] << 11) + 128;
			x85 = 565 * (x45 + x55);
			x45 = x85 + 2276 * x45;
			x55 = x85 - 3406 * x55;
			x85 = 2408 * (x65 + x75);
			x65 = x85 - 799 * x65;
			x75 = x85 - 4017 * x75;
			x85 = x05 + x15;
			x05 -= x15;
			x15 = 1108 * (x35 + x25);
			x25 = x15 - 3784 * x25;
			x35 = x15 + 1568 * x35;
			x15 = x45 + x65;
			x45 -= x65;
			x65 = x55 + x75;
			x55 -= x75;
			x75 = x85 + x35;
			x85 -= x35;
			x35 = x05 + x25;
			x05 -= x25;
			x25 = 181 * (x45 + x55) + 128 >> 8;
			x45 = 181 * (x45 - x55) + 128 >> 8;
			this.block[bp5] = x75 + x15 >> 8;
			this.block[bp5 + 1] = x35 + x25 >> 8;
			this.block[bp5 + 2] = x05 + x45 >> 8;
			this.block[bp5 + 3] = x85 + x65 >> 8;
			this.block[bp5 + 4] = x85 - x65 >> 8;
			this.block[bp5 + 5] = x05 - x45 >> 8;
			this.block[bp5 + 6] = x35 - x25 >> 8;
			this.block[bp5 + 7] = x75 - x15 >> 8;
		}
		var bp6 = 48;
		var x06;
		var x86;
		var x16 = this.block[bp6 + 4] << 11;
		var x26 = this.block[bp6 + 6];
		var x36 = this.block[bp6 + 2];
		var x46 = this.block[bp6 + 1];
		var x56 = this.block[bp6 + 7];
		var x66 = this.block[bp6 + 5];
		var x76 = this.block[bp6 + 3];
		if((x16 | x26 | x36 | x46 | x56 | x66 | x76) == 0) {
			var val42 = this.block[bp6 + 7] = this.block[bp6] << 3;
			var val43 = this.block[bp6 + 6] = val42;
			var val44 = this.block[bp6 + 5] = val43;
			var val45 = this.block[bp6 + 4] = val44;
			var val46 = this.block[bp6 + 3] = val45;
			var val47 = this.block[bp6 + 2] = val46;
			var val48 = this.block[bp6 + 1] = val47;
			this.block[bp6] = val48;
		} else {
			x06 = (this.block[bp6] << 11) + 128;
			x86 = 565 * (x46 + x56);
			x46 = x86 + 2276 * x46;
			x56 = x86 - 3406 * x56;
			x86 = 2408 * (x66 + x76);
			x66 = x86 - 799 * x66;
			x76 = x86 - 4017 * x76;
			x86 = x06 + x16;
			x06 -= x16;
			x16 = 1108 * (x36 + x26);
			x26 = x16 - 3784 * x26;
			x36 = x16 + 1568 * x36;
			x16 = x46 + x66;
			x46 -= x66;
			x66 = x56 + x76;
			x56 -= x76;
			x76 = x86 + x36;
			x86 -= x36;
			x36 = x06 + x26;
			x06 -= x26;
			x26 = 181 * (x46 + x56) + 128 >> 8;
			x46 = 181 * (x46 - x56) + 128 >> 8;
			this.block[bp6] = x76 + x16 >> 8;
			this.block[bp6 + 1] = x36 + x26 >> 8;
			this.block[bp6 + 2] = x06 + x46 >> 8;
			this.block[bp6 + 3] = x86 + x66 >> 8;
			this.block[bp6 + 4] = x86 - x66 >> 8;
			this.block[bp6 + 5] = x06 - x46 >> 8;
			this.block[bp6 + 6] = x36 - x26 >> 8;
			this.block[bp6 + 7] = x76 - x16 >> 8;
		}
		var bp7 = 56;
		var x07;
		var x87;
		var x17 = this.block[bp7 + 4] << 11;
		var x27 = this.block[bp7 + 6];
		var x37 = this.block[bp7 + 2];
		var x47 = this.block[bp7 + 1];
		var x57 = this.block[bp7 + 7];
		var x67 = this.block[bp7 + 5];
		var x77 = this.block[bp7 + 3];
		if((x17 | x27 | x37 | x47 | x57 | x67 | x77) == 0) {
			var val49 = this.block[bp7 + 7] = this.block[bp7] << 3;
			var val50 = this.block[bp7 + 6] = val49;
			var val51 = this.block[bp7 + 5] = val50;
			var val52 = this.block[bp7 + 4] = val51;
			var val53 = this.block[bp7 + 3] = val52;
			var val54 = this.block[bp7 + 2] = val53;
			var val55 = this.block[bp7 + 1] = val54;
			this.block[bp7] = val55;
		} else {
			x07 = (this.block[bp7] << 11) + 128;
			x87 = 565 * (x47 + x57);
			x47 = x87 + 2276 * x47;
			x57 = x87 - 3406 * x57;
			x87 = 2408 * (x67 + x77);
			x67 = x87 - 799 * x67;
			x77 = x87 - 4017 * x77;
			x87 = x07 + x17;
			x07 -= x17;
			x17 = 1108 * (x37 + x27);
			x27 = x17 - 3784 * x27;
			x37 = x17 + 1568 * x37;
			x17 = x47 + x67;
			x47 -= x67;
			x67 = x57 + x77;
			x57 -= x77;
			x77 = x87 + x37;
			x87 -= x37;
			x37 = x07 + x27;
			x07 -= x27;
			x27 = 181 * (x47 + x57) + 128 >> 8;
			x47 = 181 * (x47 - x57) + 128 >> 8;
			this.block[bp7] = x77 + x17 >> 8;
			this.block[bp7 + 1] = x37 + x27 >> 8;
			this.block[bp7 + 2] = x07 + x47 >> 8;
			this.block[bp7 + 3] = x87 + x67 >> 8;
			this.block[bp7 + 4] = x87 - x67 >> 8;
			this.block[bp7 + 5] = x07 - x47 >> 8;
			this.block[bp7 + 6] = x37 - x27 >> 8;
			this.block[bp7 + 7] = x77 - x17 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x08;
		var x88;
		var x18 = this.block[32] << 8;
		var x28 = this.block[48];
		var x38 = this.block[16];
		var x48 = this.block[8];
		var x58 = this.block[56];
		var x68 = this.block[40];
		var x78 = this.block[24];
		if((x18 | x28 | x38 | x48 | x58 | x68 | x78) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x18 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
		} else {
			x08 = (this.block[0] << 8) + 8192;
			x88 = 565 * (x48 + x58) + 4;
			x48 = x88 + 2276 * x48 >> 3;
			x58 = x88 - 3406 * x58 >> 3;
			x88 = 2408 * (x68 + x78) + 4;
			x68 = x88 - 799 * x68 >> 3;
			x78 = x88 - 4017 * x78 >> 3;
			x88 = x08 + x18;
			x08 -= x18;
			x18 = 1108 * (x38 + x28) + 4;
			x28 = x18 - 3784 * x28 >> 3;
			x38 = x18 + 1568 * x38 >> 3;
			x18 = x48 + x68;
			x48 -= x68;
			x68 = x58 + x78;
			x58 -= x78;
			x78 = x88 + x38;
			x88 -= x38;
			x38 = x08 + x28;
			x08 -= x28;
			x28 = 181 * (x48 + x58) + 128 >> 8;
			x48 = 181 * (x48 - x58) + 128 >> 8;
			var x9 = (x78 + x18 >> 14) + 128;
			out.b[po1] = x9 < 0 ? 0 : x9 > 255 ? 255 : x9;
			po1 += stride;
			var x10 = (x38 + x28 >> 14) + 128;
			out.b[po1] = x10 < 0 ? 0 : x10 > 255 ? 255 : x10;
			po1 += stride;
			var x19 = (x08 + x48 >> 14) + 128;
			out.b[po1] = x19 < 0 ? 0 : x19 > 255 ? 255 : x19;
			po1 += stride;
			var x20 = (x88 + x68 >> 14) + 128;
			out.b[po1] = x20 < 0 ? 0 : x20 > 255 ? 255 : x20;
			po1 += stride;
			var x29 = (x88 - x68 >> 14) + 128;
			out.b[po1] = x29 < 0 ? 0 : x29 > 255 ? 255 : x29;
			po1 += stride;
			var x30 = (x08 - x48 >> 14) + 128;
			out.b[po1] = x30 < 0 ? 0 : x30 > 255 ? 255 : x30;
			po1 += stride;
			var x39 = (x38 - x28 >> 14) + 128;
			out.b[po1] = x39 < 0 ? 0 : x39 > 255 ? 255 : x39;
			po1 += stride;
			var x40 = (x78 - x18 >> 14) + 128;
			out.b[po1] = x40 < 0 ? 0 : x40 > 255 ? 255 : x40;
		}
		var po2 = 1 + po;
		var stride1 = c.stride;
		var x09;
		var x89;
		var x110 = this.block[33] << 8;
		var x210 = this.block[49];
		var x310 = this.block[17];
		var x49 = this.block[9];
		var x59 = this.block[57];
		var x69 = this.block[41];
		var x79 = this.block[25];
		if((x110 | x210 | x310 | x49 | x59 | x69 | x79) == 0) {
			var x50 = (this.block[1] + 32 >> 6) + 128;
			x110 = x50 < 0 ? 0 : x50 > 255 ? 255 : x50;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
		} else {
			x09 = (this.block[1] << 8) + 8192;
			x89 = 565 * (x49 + x59) + 4;
			x49 = x89 + 2276 * x49 >> 3;
			x59 = x89 - 3406 * x59 >> 3;
			x89 = 2408 * (x69 + x79) + 4;
			x69 = x89 - 799 * x69 >> 3;
			x79 = x89 - 4017 * x79 >> 3;
			x89 = x09 + x110;
			x09 -= x110;
			x110 = 1108 * (x310 + x210) + 4;
			x210 = x110 - 3784 * x210 >> 3;
			x310 = x110 + 1568 * x310 >> 3;
			x110 = x49 + x69;
			x49 -= x69;
			x69 = x59 + x79;
			x59 -= x79;
			x79 = x89 + x310;
			x89 -= x310;
			x310 = x09 + x210;
			x09 -= x210;
			x210 = 181 * (x49 + x59) + 128 >> 8;
			x49 = 181 * (x49 - x59) + 128 >> 8;
			var x60 = (x79 + x110 >> 14) + 128;
			out.b[po2] = x60 < 0 ? 0 : x60 > 255 ? 255 : x60;
			po2 += stride1;
			var x70 = (x310 + x210 >> 14) + 128;
			out.b[po2] = x70 < 0 ? 0 : x70 > 255 ? 255 : x70;
			po2 += stride1;
			var x80 = (x09 + x49 >> 14) + 128;
			out.b[po2] = x80 < 0 ? 0 : x80 > 255 ? 255 : x80;
			po2 += stride1;
			var x90 = (x89 + x69 >> 14) + 128;
			out.b[po2] = x90 < 0 ? 0 : x90 > 255 ? 255 : x90;
			po2 += stride1;
			var x91 = (x89 - x69 >> 14) + 128;
			out.b[po2] = x91 < 0 ? 0 : x91 > 255 ? 255 : x91;
			po2 += stride1;
			var x92 = (x09 - x49 >> 14) + 128;
			out.b[po2] = x92 < 0 ? 0 : x92 > 255 ? 255 : x92;
			po2 += stride1;
			var x93 = (x310 - x210 >> 14) + 128;
			out.b[po2] = x93 < 0 ? 0 : x93 > 255 ? 255 : x93;
			po2 += stride1;
			var x94 = (x79 - x110 >> 14) + 128;
			out.b[po2] = x94 < 0 ? 0 : x94 > 255 ? 255 : x94;
		}
		var po3 = 2 + po;
		var stride2 = c.stride;
		var x010;
		var x810;
		var x111 = this.block[34] << 8;
		var x211 = this.block[50];
		var x311 = this.block[18];
		var x410 = this.block[10];
		var x510 = this.block[58];
		var x610 = this.block[42];
		var x710 = this.block[26];
		if((x111 | x211 | x311 | x410 | x510 | x610 | x710) == 0) {
			var x95 = (this.block[2] + 32 >> 6) + 128;
			x111 = x95 < 0 ? 0 : x95 > 255 ? 255 : x95;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
		} else {
			x010 = (this.block[2] << 8) + 8192;
			x810 = 565 * (x410 + x510) + 4;
			x410 = x810 + 2276 * x410 >> 3;
			x510 = x810 - 3406 * x510 >> 3;
			x810 = 2408 * (x610 + x710) + 4;
			x610 = x810 - 799 * x610 >> 3;
			x710 = x810 - 4017 * x710 >> 3;
			x810 = x010 + x111;
			x010 -= x111;
			x111 = 1108 * (x311 + x211) + 4;
			x211 = x111 - 3784 * x211 >> 3;
			x311 = x111 + 1568 * x311 >> 3;
			x111 = x410 + x610;
			x410 -= x610;
			x610 = x510 + x710;
			x510 -= x710;
			x710 = x810 + x311;
			x810 -= x311;
			x311 = x010 + x211;
			x010 -= x211;
			x211 = 181 * (x410 + x510) + 128 >> 8;
			x410 = 181 * (x410 - x510) + 128 >> 8;
			var x96 = (x710 + x111 >> 14) + 128;
			out.b[po3] = x96 < 0 ? 0 : x96 > 255 ? 255 : x96;
			po3 += stride2;
			var x97 = (x311 + x211 >> 14) + 128;
			out.b[po3] = x97 < 0 ? 0 : x97 > 255 ? 255 : x97;
			po3 += stride2;
			var x98 = (x010 + x410 >> 14) + 128;
			out.b[po3] = x98 < 0 ? 0 : x98 > 255 ? 255 : x98;
			po3 += stride2;
			var x99 = (x810 + x610 >> 14) + 128;
			out.b[po3] = x99 < 0 ? 0 : x99 > 255 ? 255 : x99;
			po3 += stride2;
			var x100 = (x810 - x610 >> 14) + 128;
			out.b[po3] = x100 < 0 ? 0 : x100 > 255 ? 255 : x100;
			po3 += stride2;
			var x101 = (x010 - x410 >> 14) + 128;
			out.b[po3] = x101 < 0 ? 0 : x101 > 255 ? 255 : x101;
			po3 += stride2;
			var x102 = (x311 - x211 >> 14) + 128;
			out.b[po3] = x102 < 0 ? 0 : x102 > 255 ? 255 : x102;
			po3 += stride2;
			var x103 = (x710 - x111 >> 14) + 128;
			out.b[po3] = x103 < 0 ? 0 : x103 > 255 ? 255 : x103;
		}
		var po4 = 3 + po;
		var stride3 = c.stride;
		var x011;
		var x811;
		var x112 = this.block[35] << 8;
		var x212 = this.block[51];
		var x312 = this.block[19];
		var x411 = this.block[11];
		var x511 = this.block[59];
		var x611 = this.block[43];
		var x711 = this.block[27];
		if((x112 | x212 | x312 | x411 | x511 | x611 | x711) == 0) {
			var x104 = (this.block[3] + 32 >> 6) + 128;
			x112 = x104 < 0 ? 0 : x104 > 255 ? 255 : x104;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
		} else {
			x011 = (this.block[3] << 8) + 8192;
			x811 = 565 * (x411 + x511) + 4;
			x411 = x811 + 2276 * x411 >> 3;
			x511 = x811 - 3406 * x511 >> 3;
			x811 = 2408 * (x611 + x711) + 4;
			x611 = x811 - 799 * x611 >> 3;
			x711 = x811 - 4017 * x711 >> 3;
			x811 = x011 + x112;
			x011 -= x112;
			x112 = 1108 * (x312 + x212) + 4;
			x212 = x112 - 3784 * x212 >> 3;
			x312 = x112 + 1568 * x312 >> 3;
			x112 = x411 + x611;
			x411 -= x611;
			x611 = x511 + x711;
			x511 -= x711;
			x711 = x811 + x312;
			x811 -= x312;
			x312 = x011 + x212;
			x011 -= x212;
			x212 = 181 * (x411 + x511) + 128 >> 8;
			x411 = 181 * (x411 - x511) + 128 >> 8;
			var x105 = (x711 + x112 >> 14) + 128;
			out.b[po4] = x105 < 0 ? 0 : x105 > 255 ? 255 : x105;
			po4 += stride3;
			var x106 = (x312 + x212 >> 14) + 128;
			out.b[po4] = x106 < 0 ? 0 : x106 > 255 ? 255 : x106;
			po4 += stride3;
			var x107 = (x011 + x411 >> 14) + 128;
			out.b[po4] = x107 < 0 ? 0 : x107 > 255 ? 255 : x107;
			po4 += stride3;
			var x108 = (x811 + x611 >> 14) + 128;
			out.b[po4] = x108 < 0 ? 0 : x108 > 255 ? 255 : x108;
			po4 += stride3;
			var x109 = (x811 - x611 >> 14) + 128;
			out.b[po4] = x109 < 0 ? 0 : x109 > 255 ? 255 : x109;
			po4 += stride3;
			var x113 = (x011 - x411 >> 14) + 128;
			out.b[po4] = x113 < 0 ? 0 : x113 > 255 ? 255 : x113;
			po4 += stride3;
			var x114 = (x312 - x212 >> 14) + 128;
			out.b[po4] = x114 < 0 ? 0 : x114 > 255 ? 255 : x114;
			po4 += stride3;
			var x115 = (x711 - x112 >> 14) + 128;
			out.b[po4] = x115 < 0 ? 0 : x115 > 255 ? 255 : x115;
		}
		var po5 = 4 + po;
		var stride4 = c.stride;
		var x012;
		var x812;
		var x116 = this.block[36] << 8;
		var x213 = this.block[52];
		var x313 = this.block[20];
		var x412 = this.block[12];
		var x512 = this.block[60];
		var x612 = this.block[44];
		var x712 = this.block[28];
		if((x116 | x213 | x313 | x412 | x512 | x612 | x712) == 0) {
			var x117 = (this.block[4] + 32 >> 6) + 128;
			x116 = x117 < 0 ? 0 : x117 > 255 ? 255 : x117;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
		} else {
			x012 = (this.block[4] << 8) + 8192;
			x812 = 565 * (x412 + x512) + 4;
			x412 = x812 + 2276 * x412 >> 3;
			x512 = x812 - 3406 * x512 >> 3;
			x812 = 2408 * (x612 + x712) + 4;
			x612 = x812 - 799 * x612 >> 3;
			x712 = x812 - 4017 * x712 >> 3;
			x812 = x012 + x116;
			x012 -= x116;
			x116 = 1108 * (x313 + x213) + 4;
			x213 = x116 - 3784 * x213 >> 3;
			x313 = x116 + 1568 * x313 >> 3;
			x116 = x412 + x612;
			x412 -= x612;
			x612 = x512 + x712;
			x512 -= x712;
			x712 = x812 + x313;
			x812 -= x313;
			x313 = x012 + x213;
			x012 -= x213;
			x213 = 181 * (x412 + x512) + 128 >> 8;
			x412 = 181 * (x412 - x512) + 128 >> 8;
			var x118 = (x712 + x116 >> 14) + 128;
			out.b[po5] = x118 < 0 ? 0 : x118 > 255 ? 255 : x118;
			po5 += stride4;
			var x119 = (x313 + x213 >> 14) + 128;
			out.b[po5] = x119 < 0 ? 0 : x119 > 255 ? 255 : x119;
			po5 += stride4;
			var x120 = (x012 + x412 >> 14) + 128;
			out.b[po5] = x120 < 0 ? 0 : x120 > 255 ? 255 : x120;
			po5 += stride4;
			var x121 = (x812 + x612 >> 14) + 128;
			out.b[po5] = x121 < 0 ? 0 : x121 > 255 ? 255 : x121;
			po5 += stride4;
			var x122 = (x812 - x612 >> 14) + 128;
			out.b[po5] = x122 < 0 ? 0 : x122 > 255 ? 255 : x122;
			po5 += stride4;
			var x123 = (x012 - x412 >> 14) + 128;
			out.b[po5] = x123 < 0 ? 0 : x123 > 255 ? 255 : x123;
			po5 += stride4;
			var x124 = (x313 - x213 >> 14) + 128;
			out.b[po5] = x124 < 0 ? 0 : x124 > 255 ? 255 : x124;
			po5 += stride4;
			var x125 = (x712 - x116 >> 14) + 128;
			out.b[po5] = x125 < 0 ? 0 : x125 > 255 ? 255 : x125;
		}
		var po6 = 5 + po;
		var stride5 = c.stride;
		var x013;
		var x813;
		var x126 = this.block[37] << 8;
		var x214 = this.block[53];
		var x314 = this.block[21];
		var x413 = this.block[13];
		var x513 = this.block[61];
		var x613 = this.block[45];
		var x713 = this.block[29];
		if((x126 | x214 | x314 | x413 | x513 | x613 | x713) == 0) {
			var x127 = (this.block[5] + 32 >> 6) + 128;
			x126 = x127 < 0 ? 0 : x127 > 255 ? 255 : x127;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
		} else {
			x013 = (this.block[5] << 8) + 8192;
			x813 = 565 * (x413 + x513) + 4;
			x413 = x813 + 2276 * x413 >> 3;
			x513 = x813 - 3406 * x513 >> 3;
			x813 = 2408 * (x613 + x713) + 4;
			x613 = x813 - 799 * x613 >> 3;
			x713 = x813 - 4017 * x713 >> 3;
			x813 = x013 + x126;
			x013 -= x126;
			x126 = 1108 * (x314 + x214) + 4;
			x214 = x126 - 3784 * x214 >> 3;
			x314 = x126 + 1568 * x314 >> 3;
			x126 = x413 + x613;
			x413 -= x613;
			x613 = x513 + x713;
			x513 -= x713;
			x713 = x813 + x314;
			x813 -= x314;
			x314 = x013 + x214;
			x013 -= x214;
			x214 = 181 * (x413 + x513) + 128 >> 8;
			x413 = 181 * (x413 - x513) + 128 >> 8;
			var x128 = (x713 + x126 >> 14) + 128;
			out.b[po6] = x128 < 0 ? 0 : x128 > 255 ? 255 : x128;
			po6 += stride5;
			var x129 = (x314 + x214 >> 14) + 128;
			out.b[po6] = x129 < 0 ? 0 : x129 > 255 ? 255 : x129;
			po6 += stride5;
			var x130 = (x013 + x413 >> 14) + 128;
			out.b[po6] = x130 < 0 ? 0 : x130 > 255 ? 255 : x130;
			po6 += stride5;
			var x131 = (x813 + x613 >> 14) + 128;
			out.b[po6] = x131 < 0 ? 0 : x131 > 255 ? 255 : x131;
			po6 += stride5;
			var x132 = (x813 - x613 >> 14) + 128;
			out.b[po6] = x132 < 0 ? 0 : x132 > 255 ? 255 : x132;
			po6 += stride5;
			var x133 = (x013 - x413 >> 14) + 128;
			out.b[po6] = x133 < 0 ? 0 : x133 > 255 ? 255 : x133;
			po6 += stride5;
			var x134 = (x314 - x214 >> 14) + 128;
			out.b[po6] = x134 < 0 ? 0 : x134 > 255 ? 255 : x134;
			po6 += stride5;
			var x135 = (x713 - x126 >> 14) + 128;
			out.b[po6] = x135 < 0 ? 0 : x135 > 255 ? 255 : x135;
		}
		var po7 = 6 + po;
		var stride6 = c.stride;
		var x014;
		var x814;
		var x136 = this.block[38] << 8;
		var x215 = this.block[54];
		var x315 = this.block[22];
		var x414 = this.block[14];
		var x514 = this.block[62];
		var x614 = this.block[46];
		var x714 = this.block[30];
		if((x136 | x215 | x315 | x414 | x514 | x614 | x714) == 0) {
			var x137 = (this.block[6] + 32 >> 6) + 128;
			x136 = x137 < 0 ? 0 : x137 > 255 ? 255 : x137;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
		} else {
			x014 = (this.block[6] << 8) + 8192;
			x814 = 565 * (x414 + x514) + 4;
			x414 = x814 + 2276 * x414 >> 3;
			x514 = x814 - 3406 * x514 >> 3;
			x814 = 2408 * (x614 + x714) + 4;
			x614 = x814 - 799 * x614 >> 3;
			x714 = x814 - 4017 * x714 >> 3;
			x814 = x014 + x136;
			x014 -= x136;
			x136 = 1108 * (x315 + x215) + 4;
			x215 = x136 - 3784 * x215 >> 3;
			x315 = x136 + 1568 * x315 >> 3;
			x136 = x414 + x614;
			x414 -= x614;
			x614 = x514 + x714;
			x514 -= x714;
			x714 = x814 + x315;
			x814 -= x315;
			x315 = x014 + x215;
			x014 -= x215;
			x215 = 181 * (x414 + x514) + 128 >> 8;
			x414 = 181 * (x414 - x514) + 128 >> 8;
			var x138 = (x714 + x136 >> 14) + 128;
			out.b[po7] = x138 < 0 ? 0 : x138 > 255 ? 255 : x138;
			po7 += stride6;
			var x139 = (x315 + x215 >> 14) + 128;
			out.b[po7] = x139 < 0 ? 0 : x139 > 255 ? 255 : x139;
			po7 += stride6;
			var x140 = (x014 + x414 >> 14) + 128;
			out.b[po7] = x140 < 0 ? 0 : x140 > 255 ? 255 : x140;
			po7 += stride6;
			var x141 = (x814 + x614 >> 14) + 128;
			out.b[po7] = x141 < 0 ? 0 : x141 > 255 ? 255 : x141;
			po7 += stride6;
			var x142 = (x814 - x614 >> 14) + 128;
			out.b[po7] = x142 < 0 ? 0 : x142 > 255 ? 255 : x142;
			po7 += stride6;
			var x143 = (x014 - x414 >> 14) + 128;
			out.b[po7] = x143 < 0 ? 0 : x143 > 255 ? 255 : x143;
			po7 += stride6;
			var x144 = (x315 - x215 >> 14) + 128;
			out.b[po7] = x144 < 0 ? 0 : x144 > 255 ? 255 : x144;
			po7 += stride6;
			var x145 = (x714 - x136 >> 14) + 128;
			out.b[po7] = x145 < 0 ? 0 : x145 > 255 ? 255 : x145;
		}
		var po8 = 7 + po;
		var stride7 = c.stride;
		var x015;
		var x815;
		var x146 = this.block[39] << 8;
		var x216 = this.block[55];
		var x316 = this.block[23];
		var x415 = this.block[15];
		var x515 = this.block[63];
		var x615 = this.block[47];
		var x715 = this.block[31];
		if((x146 | x216 | x316 | x415 | x515 | x615 | x715) == 0) {
			var x147 = (this.block[7] + 32 >> 6) + 128;
			x146 = x147 < 0 ? 0 : x147 > 255 ? 255 : x147;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
		} else {
			x015 = (this.block[7] << 8) + 8192;
			x815 = 565 * (x415 + x515) + 4;
			x415 = x815 + 2276 * x415 >> 3;
			x515 = x815 - 3406 * x515 >> 3;
			x815 = 2408 * (x615 + x715) + 4;
			x615 = x815 - 799 * x615 >> 3;
			x715 = x815 - 4017 * x715 >> 3;
			x815 = x015 + x146;
			x015 -= x146;
			x146 = 1108 * (x316 + x216) + 4;
			x216 = x146 - 3784 * x216 >> 3;
			x316 = x146 + 1568 * x316 >> 3;
			x146 = x415 + x615;
			x415 -= x615;
			x615 = x515 + x715;
			x515 -= x715;
			x715 = x815 + x316;
			x815 -= x316;
			x316 = x015 + x216;
			x015 -= x216;
			x216 = 181 * (x415 + x515) + 128 >> 8;
			x415 = 181 * (x415 - x515) + 128 >> 8;
			var x148 = (x715 + x146 >> 14) + 128;
			out.b[po8] = x148 < 0 ? 0 : x148 > 255 ? 255 : x148;
			po8 += stride7;
			var x149 = (x316 + x216 >> 14) + 128;
			out.b[po8] = x149 < 0 ? 0 : x149 > 255 ? 255 : x149;
			po8 += stride7;
			var x150 = (x015 + x415 >> 14) + 128;
			out.b[po8] = x150 < 0 ? 0 : x150 > 255 ? 255 : x150;
			po8 += stride7;
			var x151 = (x815 + x615 >> 14) + 128;
			out.b[po8] = x151 < 0 ? 0 : x151 > 255 ? 255 : x151;
			po8 += stride7;
			var x152 = (x815 - x615 >> 14) + 128;
			out.b[po8] = x152 < 0 ? 0 : x152 > 255 ? 255 : x152;
			po8 += stride7;
			var x153 = (x015 - x415 >> 14) + 128;
			out.b[po8] = x153 < 0 ? 0 : x153 > 255 ? 255 : x153;
			po8 += stride7;
			var x154 = (x316 - x216 >> 14) + 128;
			out.b[po8] = x154 < 0 ? 0 : x154 > 255 ? 255 : x154;
			po8 += stride7;
			var x155 = (x715 - x146 >> 14) + 128;
			out.b[po8] = x155 < 0 ? 0 : x155 > 255 ? 255 : x155;
		}
	}
	,notSupported: function() {
		throw new js__$Boot_HaxeError("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count1 = this.length;
		this.pos += count1;
		this.size -= count1;
		this.length -= count1;
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g2 = 0;
			var _g3 = this.ncomp;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var c1 = this.comps[i1];
				var _g21 = 0;
				var _g31 = c1.ssy;
				while(_g21 < _g31) {
					var sby = _g21++;
					var _g22 = 0;
					var _g32 = c1.ssx;
					while(_g22 < _g32) {
						var sbx = _g22++;
						this.njDecodeBlock(c1,(mby * c1.ssy + sby) * c1.stride + mbx * c1.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i2 = r;
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var this1 = cout;
		var lout = this1;
		var this2 = c.pixels;
		var lin = this2;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g11 = xmax;
			while(_g2 < _g11) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var this1 = out;
		var cout = this1;
		var this2 = c.pixels;
		var cin = this2;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g11 = c.height - 2;
			while(_g2 < _g11) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var this1 = c.pixels;
		var lin = this1;
		var pout = 0;
		var this2 = out;
		var lout = this2;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g11 = c.width;
			while(_g2 < _g11) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var this1 = this.comps[0].pixels;
			var py = this1;
			var this2 = this.comps[1].pixels;
			var pcb = this2;
			var this3 = this.comps[2].pixels;
			var pcr = this3;
			var this4 = pixels;
			var pix = this4;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g2 = 0;
			var _g3 = this.height;
			while(_g2 < _g3) {
				var yy = _g2++;
				var _g21 = 0;
				var _g31 = this.width;
				while(_g21 < _g31) {
					var x = _g21++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw new js__$Boot_HaxeError("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw new js__$Boot_HaxeError("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		_hx_loop1: while(true) {
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw new js__$Boot_HaxeError("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw new js__$Boot_HaxeError("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw new js__$Boot_HaxeError("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxd_res_Sound = function(entry) {
	this.lastPlay = 0.;
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Sound"] = hxd_res_Sound;
hxd_res_Sound.__name__ = "hxd.res.Sound";
hxd_res_Sound.__super__ = hxd_res_Resource;
hxd_res_Sound.prototype = $extend(hxd_res_Resource.prototype,{
	getData: function() {
		if(this.data != null) {
			return this.data;
		}
		var bytes = this.entry.getBytes();
		switch(bytes.b[0]) {
		case 73:case 255:
			this.data = new hxd_snd_Mp3Data(bytes);
			break;
		case 79:
			this.data = new hxd_snd_OggData(bytes);
			break;
		case 82:
			this.data = new hxd_snd_WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw new js__$Boot_HaxeError("Unsupported sound format " + this.entry.get_path());
		}
		if(hxd_res_Sound.ENABLE_AUTO_WATCH) {
			this.watch($bind(this,this.watchCallb));
		}
		return this.data;
	}
	,stop: function() {
		if(this.channel != null) {
			this.channel.stop();
			this.channel = null;
		}
	}
	,play: function(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = Date.now() / 1000;
		this.channel = hxd_snd_Manager.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	,watchCallb: function() {
		var old = this.data;
		this.data = null;
		var data = this.getData();
		if(old != null) {
			if(old.channels != data.channels || old.samples != data.samples || old.sampleFormat != data.sampleFormat || old.samplingRate != data.samplingRate) {
				var manager = hxd_snd_Manager.get();
				var ch = manager.getAll(this);
				while(ch.hasNext()) {
					var ch1 = ch.next();
					ch1.duration = data.get_duration();
					ch1.set_position(ch1.position);
				}
			}
		}
	}
	,__class__: hxd_res_Sound
});
var hxd_snd_ChannelBase = function() {
	this.volume = 1.;
	this.bindedEffects = [];
	this.effects = [];
	this.mute = false;
	this.priority = 0.;
};
$hxClasses["hxd.snd.ChannelBase"] = hxd_snd_ChannelBase;
hxd_snd_ChannelBase.__name__ = "hxd.snd.ChannelBase";
hxd_snd_ChannelBase.prototype = {
	set_volume: function(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.currentFade != null) {
			var f = this.currentFade;
			var dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	,removeEffect: function(e) {
		HxOverrides.remove(this.effects,e);
	}
	,__class__: hxd_snd_ChannelBase
};
var hxd_snd_Channel = function() {
	this.queue = [];
	this.positionChanged = false;
	this.isLoading = false;
	this.isVirtual = false;
	this.lastStamp = 0.0;
	this.audibleVolume = 1.0;
	this.allowVirtual = true;
	this.loop = false;
	this.pause = false;
	this.position = 0.0;
	hxd_snd_ChannelBase.call(this);
	this.id = hxd_snd_Channel.ID++;
};
$hxClasses["hxd.snd.Channel"] = hxd_snd_Channel;
hxd_snd_Channel.__name__ = "hxd.snd.Channel";
hxd_snd_Channel.__super__ = hxd_snd_ChannelBase;
hxd_snd_Channel.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	onEnd: function() {
	}
	,set_position: function(v) {
		this.lastStamp = Date.now() / 1000;
		this.positionChanged = true;
		if(v > this.duration) {
			v = this.duration;
		} else if(v < 0) {
			v = 0;
		}
		return this.position = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.pause && this.currentFade != null) {
			var f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		hxd_snd_ChannelBase.prototype.updateCurrentVolume.call(this,now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
			var _g2 = 0;
			var _g3 = this.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				this.currentVolume *= e1.getVolumeModifier();
			}
		}
	}
	,calcAudibleVolume: function(now) {
		this.updateCurrentVolume(now);
		this.audibleVolume = this.currentVolume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
			var _g2 = 0;
			var _g3 = this.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				this.audibleVolume = e1.applyAudibleVolumeModifier(this.audibleVolume);
			}
		}
	}
	,stop: function() {
		if(this.manager != null) {
			this.manager.releaseChannel(this);
		}
	}
	,__class__: hxd_snd_Channel
});
var hxd_snd_ChannelGroup = function(name) {
	hxd_snd_ChannelBase.call(this);
	this.name = name;
};
$hxClasses["hxd.snd.ChannelGroup"] = hxd_snd_ChannelGroup;
hxd_snd_ChannelGroup.__name__ = "hxd.snd.ChannelGroup";
hxd_snd_ChannelGroup.__super__ = hxd_snd_ChannelBase;
hxd_snd_ChannelGroup.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	__class__: hxd_snd_ChannelGroup
});
var hxd_snd_SampleFormat = $hxEnums["hxd.snd.SampleFormat"] = { __ename__ : "hxd.snd.SampleFormat", __constructs__ : ["UI8","I16","F32"]
	,UI8: {_hx_index:0,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,I16: {_hx_index:1,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,F32: {_hx_index:2,__enum__:"hxd.snd.SampleFormat",toString:$estr}
};
hxd_snd_SampleFormat.__empty_constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
var hxd_snd_Data = function() { };
$hxClasses["hxd.snd.Data"] = hxd_snd_Data;
hxd_snd_Data.__name__ = "hxd.snd.Data";
hxd_snd_Data.prototype = {
	isLoading: function() {
		return false;
	}
	,decode: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			var s = "sampleStart = " + sampleStart;
			s += " sampleCount = " + sampleCount;
			s += " outPos = " + outPos;
			s += " bpp = " + bpp;
			s += " out.length = " + out.length;
			throw new js__$Boot_HaxeError(s);
		}
		if(sampleStart + sampleCount >= this.samples) {
			var count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	,resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		var newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		var bpp = this.getBytesPerSample();
		var data = new haxe_io_Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		var out = channels * newSamples;
		var out1;
		switch(format._hx_index) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format,channels,this.samples);
		var data1 = new hxd_snd_WavData(null);
		data1.channels = channels;
		data1.samples = newSamples;
		data1.sampleFormat = format;
		data1.samplingRate = rate;
		data1.rawData = out2;
		return data1;
	}
	,resampleBuffer: function(out,outPos,input,inPos,rate,format,channels,samples) {
		var bpp = this.getBytesPerSample();
		var newSamples = Math.ceil(samples * (rate / this.samplingRate));
		var resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd_snd_SampleFormat.I16 && format == hxd_snd_SampleFormat.I16 && channels == 1 && this.channels == 2) {
			var r = inPos;
			var w = outPos;
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				var sl = input.getUInt16(r);
				r += 2;
				var sr = input.getUInt16(r);
				r += 2;
				var s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) == 0) {
						sl = sl;
					} else {
						sl |= -65536;
					}
					if((sr & 32768) == 0) {
						sr = sr;
					} else {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		var srcChannels = this.channels;
		var commonChannels = channels < srcChannels ? channels : srcChannels;
		var extraChannels = channels - commonChannels;
		var sval = 0.;
		var ival = 0;
		var _g2 = 0;
		var _g11 = newSamples;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var targetSample = i1 / (newSamples - 1) * (samples - 1);
			var isample = targetSample | 0;
			var offset = targetSample - isample;
			var srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			var _g3 = 0;
			var _g12 = commonChannels;
			while(_g3 < _g12) {
				var k = _g3++;
				var sval1;
				var sval2 = 0.;
				switch(this.sampleFormat._hx_index) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					var v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						var v1 = input.getUInt16(srcPos + bpp);
						sval2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				sval = resample ? sval1 + offset * (sval2 - sval1) : sval1;
				switch(format._hx_index) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			var _g21 = 0;
			var _g31 = extraChannels;
			while(_g21 < _g31) {
				var i2 = _g21++;
				switch(format._hx_index) {
				case 0:
					out.b[outPos++] = ival;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,getBytesPerSample: function() {
		var tmp;
		switch(this.sampleFormat._hx_index) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	,load: function(onEnd) {
		onEnd();
	}
	,get_duration: function() {
		return this.samples / this.samplingRate;
	}
	,__class__: hxd_snd_Data
};
var hxd_snd_EffectDriver = function() {
};
$hxClasses["hxd.snd.EffectDriver"] = hxd_snd_EffectDriver;
hxd_snd_EffectDriver.__name__ = "hxd.snd.EffectDriver";
hxd_snd_EffectDriver.prototype = {
	acquire: function() {
	}
	,release: function() {
	}
	,update: function(e) {
	}
	,bind: function(e,source) {
	}
	,apply: function(e,source) {
	}
	,unbind: function(e,source) {
	}
	,__class__: hxd_snd_EffectDriver
};
var hxd_snd_DriverFeature = $hxEnums["hxd.snd.DriverFeature"] = { __ename__ : "hxd.snd.DriverFeature", __constructs__ : ["MasterVolume"]
	,MasterVolume: {_hx_index:0,__enum__:"hxd.snd.DriverFeature",toString:$estr}
};
hxd_snd_DriverFeature.__empty_constructs__ = [hxd_snd_DriverFeature.MasterVolume];
var hxd_snd_Driver = function() { };
$hxClasses["hxd.snd.Driver"] = hxd_snd_Driver;
hxd_snd_Driver.__name__ = "hxd.snd.Driver";
hxd_snd_Driver.__isInterface__ = true;
hxd_snd_Driver.prototype = {
	__class__: hxd_snd_Driver
};
var hxd_snd_Effect = function(type) {
	this.refs = 0;
	this.priority = 0;
	this.retainTime = 0.0;
	this.lastStamp = 0.0;
	var managerDriver = hxd_snd_Manager.get().driver;
	if(managerDriver != null) {
		this.driver = managerDriver.getEffectDriver(type);
	}
};
$hxClasses["hxd.snd.Effect"] = hxd_snd_Effect;
hxd_snd_Effect.__name__ = "hxd.snd.Effect";
hxd_snd_Effect.prototype = {
	applyAudibleVolumeModifier: function(v) {
		return v;
	}
	,getVolumeModifier: function() {
		return 1;
	}
	,__class__: hxd_snd_Effect
};
var hxd_snd_Listener = function() {
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector(1,0,0);
	this.up = new h3d_Vector(0,0,1);
};
$hxClasses["hxd.snd.Listener"] = hxd_snd_Listener;
hxd_snd_Listener.__name__ = "hxd.snd.Listener";
hxd_snd_Listener.prototype = {
	__class__: hxd_snd_Listener
};
var hxd_snd_Source = function(driver) {
	this.start = 0;
	this.playing = false;
	this.volume = -1.0;
	this.id = hxd_snd_Source.ID++;
	this.handle = driver.createSource();
	this.buffers = [];
};
$hxClasses["hxd.snd.Source"] = hxd_snd_Source;
hxd_snd_Source.__name__ = "hxd.snd.Source";
hxd_snd_Source.prototype = {
	__class__: hxd_snd_Source
};
var hxd_snd_Buffer = function(driver) {
	this.handle = driver.createBuffer();
	this.refs = 0;
	this.lastStop = Date.now() / 1000;
};
$hxClasses["hxd.snd.Buffer"] = hxd_snd_Buffer;
hxd_snd_Buffer.__name__ = "hxd.snd.Buffer";
hxd_snd_Buffer.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroyBuffer(this.handle);
	}
	,__class__: hxd_snd_Buffer
};
var hxd_snd_Manager = function() {
	this.suspended = false;
	this.timeOffset = 0.;
	try {
		this.driver = new hxd_snd_webaudio_Driver();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(typeof(e1) == "string") {
			var e2 = e1;
			this.driver = null;
		} else {
			throw e;
		}
	}
	this.masterVolume = 1.0;
	this.hasMasterVolume = this.driver == null ? true : this.driver.hasFeature(hxd_snd_DriverFeature.MasterVolume);
	this.masterSoundGroup = new hxd_snd_SoundGroup("master");
	this.masterChannelGroup = new hxd_snd_ChannelGroup("master");
	this.listener = new hxd_snd_Listener();
	this.soundBufferMap = new haxe_ds_StringMap();
	this.soundBufferKeys = [];
	this.freeStreamBuffers = [];
	this.effectGC = [];
	this.soundBufferCount = 0;
	if(this.driver != null) {
		this.sources = [];
		var _g = 0;
		var _g1 = hxd_snd_Manager.MAX_SOURCES;
		while(_g < _g1) {
			var i = _g++;
			this.sources.push(new hxd_snd_Source(this.driver));
		}
	}
	this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(24));
	this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * 2));
};
$hxClasses["hxd.snd.Manager"] = hxd_snd_Manager;
hxd_snd_Manager.__name__ = "hxd.snd.Manager";
hxd_snd_Manager.get = function() {
	if(hxd_snd_Manager.instance == null) {
		hxd_snd_Manager.instance = new hxd_snd_Manager();
		hxd_snd_Manager.instance.updateEvent = haxe_MainLoop.add(($_=hxd_snd_Manager.instance,$bind($_,$_.update)));
		hxd_snd_Manager.instance.updateEvent.isBlocking = false;
	}
	return hxd_snd_Manager.instance;
};
hxd_snd_Manager.regEffect = function(list,e) {
	var l = list;
	while(l != null) {
		if(l == e) {
			return list;
		}
		l = l.next;
	}
	e.next = list;
	return e;
};
hxd_snd_Manager.prototype = {
	getTmpBytes: function(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	,getResampleBytes: function(size) {
		if(this.resampleBytes.length < size) {
			this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.resampleBytes;
	}
	,getAll: function(sound) {
		var ch = this.channels;
		var result = [];
		while(ch != null) {
			if(ch.sound == sound) {
				result.push(ch);
			}
			ch = ch.next;
		}
		return new hxd_impl_ArrayIterator_$hxd_$snd_$Channel(result);
	}
	,play: function(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		var sdat = sound.getData();
		if(sdat.samples == 0) {
			throw new js__$Boot_HaxeError(Std.string(sound) + " has no samples");
		}
		var c = new hxd_snd_Channel();
		c.sound = sound;
		c.duration = sdat.get_duration();
		c.manager = this;
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.isLoading = sdat.isLoading();
		c.isVirtual = this.driver == null;
		this.channels = c;
		return c;
	}
	,updateVirtualChannels: function(now) {
		var c = this.channels;
		while(c != null) {
			if(c.pause || !c.isVirtual || c.isLoading) {
				c = c.next;
				continue;
			}
			var _g = c;
			var a = now - c.lastStamp;
			_g.set_position(_g.position + (a < 0.0 ? 0.0 : a));
			c.lastStamp = now;
			var next = c.next;
			while(c.position >= c.duration) {
				var _g1 = c;
				_g1.set_position(_g1.position - c.duration);
				c.onEnd();
				if(next != null && next.manager == null) {
					next = null;
				}
				if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
				} else if(!c.loop) {
					this.releaseChannel(c);
					break;
				}
			}
			c = next;
		}
	}
	,update: function() {
		if(this.timeOffset != 0) {
			var c = this.channels;
			while(c != null) {
				c.lastStamp += this.timeOffset;
				if(c.currentFade != null) {
					c.currentFade.start += this.timeOffset;
				}
				c = c.next;
			}
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g11 = s.buffers;
				while(_g2 < _g11.length) {
					var b = _g11[_g2];
					++_g2;
					b.lastStop += this.timeOffset;
				}
			}
			this.timeOffset = 0;
		}
		this.now = Date.now() / 1000;
		if(this.driver == null) {
			this.updateVirtualChannels(this.now);
			return;
		}
		var _g3 = 0;
		var _g12 = this.sources;
		while(_g3 < _g12.length) {
			var s1 = _g12[_g3];
			++_g3;
			var c1 = s1.channel;
			if(c1 == null) {
				continue;
			}
			if(c1.positionChanged) {
				this.releaseSource(s1);
				continue;
			}
			var lastBuffer = null;
			var count = this.driver.getProcessedBuffers(s1.handle);
			var _g4 = 0;
			var _g13 = count;
			while(_g4 < _g13) {
				var i = _g4++;
				var b1 = this.unqueueBuffer(s1);
				if(b1 == null) {
					continue;
				}
				lastBuffer = b1;
				if(b1.isEnd) {
					c1.sound = b1.sound;
					c1.duration = b1.sound.getData().get_duration();
					c1.set_position(c1.duration);
					c1.positionChanged = false;
					c1.onEnd();
					s1.start = 0;
				}
			}
			if(s1.buffers.length == 0) {
				if(!lastBuffer.isEnd) {
					c1.set_position((lastBuffer.start + lastBuffer.samples) / lastBuffer.sampleRate);
					this.releaseSource(s1);
				} else if(c1.queue.length > 0) {
					c1.sound = c1.queue[0];
					c1.duration = c1.sound.getData().get_duration();
					c1.set_position(0);
					this.releaseSource(s1);
				} else if(c1.loop) {
					c1.set_position(0);
					this.releaseSource(s1);
				} else {
					this.releaseChannel(c1);
				}
				continue;
			}
			c1.sound = s1.buffers[0].sound;
			c1.duration = c1.sound.getData().get_duration();
			var playedSamples = this.driver.getPlayedSampleCount(s1.handle);
			if(playedSamples < 0) {
				playedSamples = 0;
			}
			c1.set_position((s1.start + playedSamples) / s1.buffers[0].sampleRate);
			c1.positionChanged = false;
			if(s1.buffers.length < hxd_snd_Manager.BUFFER_QUEUE_LENGTH) {
				var b2 = s1.buffers[s1.buffers.length - 1];
				if(!b2.isEnd) {
					this.queueBuffer(s1,b2.sound,b2.start + b2.samples);
				} else if(c1.queue.length > 0) {
					var snd = c1.queue[0];
					if(this.queueBuffer(s1,snd,0)) {
						c1.queue.shift();
					}
				} else if(c1.loop) {
					this.queueBuffer(s1,b2.sound,0);
				}
			}
		}
		var c2 = this.channels;
		while(c2 != null) {
			c2.calcAudibleVolume(this.now);
			if(c2.isLoading && !c2.sound.getData().isLoading()) {
				c2.isLoading = false;
			}
			c2.isVirtual = this.suspended || c2.pause || c2.mute || c2.channelGroup.mute || c2.allowVirtual && c2.audibleVolume < hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD || c2.isLoading;
			c2 = c2.next;
		}
		var list = this.channels;
		var cmp = $bind(this,this.sortChannel);
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g5 = 0;
					var _g14 = insize;
					while(_g5 < _g14) {
						var i1 = _g5++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.channels = tmp;
		var audibleCount = 0;
		var c3 = this.channels;
		while(c3 != null && !c3.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c3.isVirtual = true;
			} else if(c3.soundGroup.maxAudible >= 0) {
				if(c3.soundGroup.lastUpdate != this.now) {
					c3.soundGroup.lastUpdate = this.now;
					c3.soundGroup.numAudible = 0;
				}
				if(++c3.soundGroup.numAudible > c3.soundGroup.maxAudible) {
					c3.isVirtual = true;
					--audibleCount;
				}
			}
			c3 = c3.next;
		}
		var _g21 = 0;
		var _g31 = this.sources;
		while(_g21 < _g31.length) {
			var s2 = _g31[_g21];
			++_g21;
			if(s2.channel == null || !s2.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s2);
		}
		var c4 = this.channels;
		while(c4 != null) {
			if(c4.source != null || c4.isVirtual) {
				c4 = c4.next;
				continue;
			}
			var s3 = null;
			var _g41 = 0;
			var _g51 = this.sources;
			while(_g41 < _g51.length) {
				var s21 = _g51[_g41];
				++_g41;
				if(s21.channel == null) {
					s3 = s21;
					break;
				}
			}
			if(s3 == null) {
				throw new js__$Boot_HaxeError("could not get a source");
			}
			s3.channel = c4;
			c4.source = s3;
			this.checkTargetFormat(c4.sound.getData(),c4.soundGroup.mono);
			s3.start = Math.floor(c4.position * this.targetRate);
			if(s3.start < 0) {
				s3.start = 0;
			}
			this.queueBuffer(s3,c4.sound,s3.start);
			c4.positionChanged = false;
			c4 = c4.next;
		}
		var usedEffects = null;
		var volume = this.hasMasterVolume ? 1. : this.masterVolume;
		var _g42 = 0;
		var _g52 = this.sources;
		while(_g42 < _g52.length) {
			var s4 = _g52[_g42];
			++_g42;
			var c5 = s4.channel;
			if(c5 == null) {
				continue;
			}
			var v = c5.currentVolume * volume;
			if(s4.volume != v) {
				if(v < 0) {
					v = 0;
				}
				s4.volume = v;
				this.driver.setSourceVolume(s4.handle,v);
			}
			if(!s4.playing) {
				this.driver.playSource(s4.handle);
				s4.playing = true;
			}
			var i2 = c5.bindedEffects.length;
			while(--i2 >= 0) {
				var e1 = c5.bindedEffects[i2];
				if(c5.effects.indexOf(e1) < 0 && c5.channelGroup.effects.indexOf(e1) < 0) {
					this.unbindEffect(c5,s4,e1);
				}
			}
			var _g43 = 0;
			var _g53 = c5.channelGroup.effects;
			while(_g43 < _g53.length) {
				var e2 = _g53[_g43];
				++_g43;
				if(c5.bindedEffects.indexOf(e2) < 0) {
					this.bindEffect(c5,s4,e2);
				}
			}
			var _g6 = 0;
			var _g7 = c5.effects;
			while(_g6 < _g7.length) {
				var e3 = _g7[_g6];
				++_g6;
				if(c5.bindedEffects.indexOf(e3) < 0) {
					this.bindEffect(c5,s4,e3);
				}
			}
			var _g8 = 0;
			var _g9 = c5.bindedEffects;
			while(_g8 < _g9.length) {
				var e4 = _g9[_g8];
				++_g8;
				usedEffects = hxd_snd_Manager.regEffect(usedEffects,e4);
			}
		}
		var list1 = usedEffects;
		var cmp1 = $bind(this,this.sortEffect);
		if(list1 == null) {
			usedEffects = null;
		} else {
			var insize1 = 1;
			var nmerges1;
			var psize1 = 0;
			var qsize1 = 0;
			var p1;
			var q1;
			var e5;
			var tail1;
			while(true) {
				p1 = list1;
				list1 = null;
				tail1 = null;
				nmerges1 = 0;
				while(p1 != null) {
					++nmerges1;
					q1 = p1;
					psize1 = 0;
					var _g10 = 0;
					var _g15 = insize1;
					while(_g10 < _g15) {
						var i3 = _g10++;
						++psize1;
						q1 = q1.next;
						if(q1 == null) {
							break;
						}
					}
					qsize1 = insize1;
					while(psize1 > 0 || qsize1 > 0 && q1 != null) {
						if(psize1 == 0) {
							e5 = q1;
							q1 = q1.next;
							--qsize1;
						} else if(qsize1 == 0 || q1 == null || cmp1(p1,q1) <= 0) {
							e5 = p1;
							p1 = p1.next;
							--psize1;
						} else {
							e5 = q1;
							q1 = q1.next;
							--qsize1;
						}
						if(tail1 != null) {
							tail1.next = e5;
						} else {
							list1 = e5;
						}
						tail1 = e5;
					}
					p1 = q1;
				}
				tail1.next = null;
				if(nmerges1 <= 1) {
					break;
				}
				insize1 *= 2;
			}
			usedEffects = list1;
		}
		var e6 = usedEffects;
		while(e6 != null) {
			e6.driver.update(e6);
			e6 = e6.next;
		}
		var _g61 = 0;
		var _g71 = this.sources;
		while(_g61 < _g71.length) {
			var s5 = _g71[_g61];
			++_g61;
			var c6 = s5.channel;
			if(c6 == null) {
				continue;
			}
			var _g62 = 0;
			var _g72 = c6.bindedEffects;
			while(_g62 < _g72.length) {
				var e7 = _g72[_g62];
				++_g62;
				e7.driver.apply(e7,s5.handle);
			}
		}
		var _g81 = 0;
		var _g91 = this.effectGC;
		while(_g81 < _g91.length) {
			var e8 = _g91[_g81];
			++_g81;
			if(this.now - e8.lastStamp > e8.retainTime) {
				e8.driver.release();
				HxOverrides.remove(this.effectGC,e8);
				break;
			}
		}
		this.updateVirtualChannels(this.now);
		this.listener.direction.normalize();
		this.listener.up.normalize();
		if(this.hasMasterVolume) {
			this.driver.setMasterVolume(this.masterVolume);
		}
		this.driver.setListenerParams(this.listener.position,this.listener.direction,this.listener.up,this.listener.velocity);
		this.driver.update();
		if(this.soundBufferCount >= hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE) {
			var now = Date.now() / 1000;
			var i4 = 0;
			while(i4 < this.soundBufferKeys.length) {
				var k = this.soundBufferKeys[i4];
				var b3 = this.soundBufferMap.h[k];
				++i4;
				if(b3.refs > 0 || b3.lastStop + 60.0 > now) {
					continue;
				}
				var _this = this.soundBufferMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
					delete(_this.h[k]);
				}
				HxOverrides.remove(this.soundBufferKeys,k);
				--i4;
				b3.dispose();
				--this.soundBufferCount;
			}
		}
	}
	,progressiveDecodeBuffer: function(s,snd,start) {
		var data = snd.getData();
		var samples = Math.ceil(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT / hxd_snd_Manager.BUFFER_STREAM_SPLIT);
		if(s.streamStart != start || s.streamSound != snd) {
			s.streamSound = snd;
			s.streamStart = start;
			s.streamPos = start;
		}
		var end = start + hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(s.streamPos == end) {
			return true;
		}
		var bpp = data.getBytesPerSample();
		var reqSize = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * bpp;
		if(s.streamBuffer == null || s.streamBuffer.length < reqSize) {
			s.streamBuffer = new haxe_io_Bytes(new ArrayBuffer(reqSize));
			s.streamPos = start;
		}
		var remain = end - s.streamPos;
		if(remain > samples) {
			remain = samples;
		}
		data.decode(s.streamBuffer,(s.streamPos - start) * bpp,s.streamPos,remain);
		s.streamPos += remain;
		return s.streamPos == end;
	}
	,queueBuffer: function(s,snd,start) {
		var data = snd.getData();
		var sgroup = s.channel.soundGroup;
		var b = null;
		if(data.get_duration() <= hxd_snd_Manager.STREAM_DURATION) {
			b = this.getSoundBuffer(snd,sgroup);
			this.driver.queueBuffer(s.handle,b.handle,start,true);
		} else {
			if(s.buffers.length > 0 && hxd_snd_Manager.BUFFER_STREAM_SPLIT > 1 && !this.progressiveDecodeBuffer(s,snd,start)) {
				return false;
			}
			b = this.getStreamBuffer(s,snd,sgroup,start);
			this.driver.queueBuffer(s.handle,b.handle,0,b.isEnd);
		}
		s.buffers.push(b);
		return true;
	}
	,unqueueBuffer: function(s) {
		var b = s.buffers.shift();
		if(b == null) {
			return null;
		}
		this.driver.unqueueBuffer(s.handle,b.handle);
		if(b.isStream) {
			this.freeStreamBuffers.unshift(b);
		} else if(--b.refs == 0) {
			b.lastStop = Date.now() / 1000;
		}
		return b;
	}
	,bindEffect: function(c,s,e) {
		if(e.refs == 0 && !HxOverrides.remove(this.effectGC,e)) {
			e.driver.acquire();
		}
		++e.refs;
		e.driver.bind(e,s.handle);
		c.bindedEffects.push(e);
	}
	,unbindEffect: function(c,s,e) {
		e.driver.unbind(e,s.handle);
		HxOverrides.remove(c.bindedEffects,e);
		if(--e.refs == 0) {
			e.lastStamp = this.now;
			this.effectGC.push(e);
		}
	}
	,releaseSource: function(s) {
		if(s.channel != null) {
			var _g = 0;
			var _g1 = s.channel.bindedEffects.slice();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.unbindEffect(s.channel,s,e);
			}
			s.channel.bindedEffects = [];
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			this.driver.stopSource(s.handle);
			s.volume = -1.0;
		}
		while(s.buffers.length > 0) this.unqueueBuffer(s);
	}
	,checkTargetFormat: function(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		var tmp;
		switch(dat.sampleFormat._hx_index) {
		case 0:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 1:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		case 2:
			tmp = hxd_snd_SampleFormat.F32;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	,getSoundBuffer: function(snd,grp) {
		var _gthis = this;
		var data = snd.getData();
		var mono = grp.mono;
		var key = snd.entry.get_path();
		if(mono && data.channels != 1) {
			key += "mono";
		}
		var b = this.soundBufferMap.h[key];
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = false;
			b.isEnd = true;
			b.sound = snd;
			data.load(function() {
				_gthis.fillSoundBuffer(b,data,mono);
			});
			this.soundBufferMap.h[key] = b;
			this.soundBufferKeys.push(key);
			++this.soundBufferCount;
		}
		++b.refs;
		return b;
	}
	,fillSoundBuffer: function(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		var length = dat.samples * dat.getBytesPerSample();
		var bytes = this.getTmpBytes(length);
		dat.decode(bytes,0,0,dat.samples);
		this.driver.setBufferData(buf.handle,bytes,length,this.targetFormat,this.targetChannels,this.targetRate);
		buf.sampleRate = this.targetRate;
		buf.samples = dat.samples;
	}
	,getStreamBuffer: function(src,snd,grp,start) {
		var data = snd.getData();
		var b = this.freeStreamBuffers.shift();
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = true;
		}
		var samples = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(start + samples >= data.samples) {
			samples = data.samples - start;
			b.isEnd = true;
		} else {
			b.isEnd = false;
		}
		b.sound = snd;
		b.samples = samples;
		b.start = start;
		var size = samples * data.getBytesPerSample();
		var bytes;
		if(src.streamSound == snd && src.streamStart == start) {
			while(!this.progressiveDecodeBuffer(src,snd,start)) {
			}
			bytes = src.streamBuffer;
		} else {
			bytes = this.getTmpBytes(size);
			data.decode(bytes,0,start,samples);
		}
		if(!this.checkTargetFormat(data,grp.mono)) {
			var size1 = Math.ceil(samples * (this.targetRate / data.samplingRate)) * this.targetChannels;
			var size2;
			switch(this.targetFormat._hx_index) {
			case 0:
				size2 = 1;
				break;
			case 1:
				size2 = 2;
				break;
			case 2:
				size2 = 4;
				break;
			}
			size = size1 * size2;
			var resampleBytes = this.getResampleBytes(size);
			data.resampleBuffer(resampleBytes,0,bytes,0,this.targetRate,this.targetFormat,this.targetChannels,samples);
			bytes = resampleBytes;
		}
		this.driver.setBufferData(b.handle,bytes,size,this.targetFormat,this.targetChannels,this.targetRate);
		b.sampleRate = this.targetRate;
		return b;
	}
	,sortChannel: function(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleVolume != b.audibleVolume) {
			if(a.audibleVolume < b.audibleVolume) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	,sortEffect: function(a,b) {
		return b.priority - a.priority;
	}
	,releaseChannel: function(c) {
		if(c.manager == null) {
			return;
		}
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			var prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		var _g = 0;
		var _g1 = c.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.manager = null;
		c.effects = null;
		c.bindedEffects = null;
		c.currentFade = null;
		var snd = c.sound;
		if(snd != null && snd.channel == c) {
			snd.channel = null;
		}
	}
	,__class__: hxd_snd_Manager
};
var hxd_snd_Mp3Data = function(bytes) {
	var mp = new format_mp3_Reader(new haxe_io_BytesInput(bytes)).read();
	this.samples = mp.sampleCount;
	var frame = mp.frames[0].data;
	var lame = -1;
	var _g = 0;
	var _g1 = frame.length - 24;
	while(_g < _g1) {
		var i = _g++;
		if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
			lame = i;
			break;
		}
	}
	if(lame >= 0) {
		var startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
		var start = startEnd >> 12;
		var end = startEnd & 4095;
		this.samples -= start + end + 1152;
	}
	var header = mp.frames[0].header;
	this.sampleFormat = hxd_snd_SampleFormat.F32;
	this.samplingRate = format_mp3_MPEG.srEnum2Num(header.samplingRate);
	this.channels = header.channelMode == format_mp3_ChannelMode.Mono ? 1 : 2;
	var ctx = hxd_snd_webaudio_Context.get();
	if(ctx == null) {
		return;
	}
	ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
	var decodedRate = ctx.sampleRate | 0;
	this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
	this.samplingRate = decodedRate;
};
$hxClasses["hxd.snd.Mp3Data"] = hxd_snd_Mp3Data;
hxd_snd_Mp3Data.__name__ = "hxd.snd.Mp3Data";
hxd_snd_Mp3Data.__super__ = hxd_snd_Data;
hxd_snd_Mp3Data.prototype = $extend(hxd_snd_Data.prototype,{
	isLoading: function() {
		return this.buffer == null;
	}
	,load: function(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	,processBuffer: function(buf) {
		var left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe_io_Bytes.ofData(left.buffer);
			return;
		}
		var right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		var join = new Float32Array(left.length * 2);
		var w = 0;
		var _g = 0;
		var _g1 = buf.length;
		while(_g < _g1) {
			var i = _g++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe_io_Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
	,__class__: hxd_snd_Mp3Data
});
var hxd_snd__$OggData_BytesOutput = function() {
};
$hxClasses["hxd.snd._OggData.BytesOutput"] = hxd_snd__$OggData_BytesOutput;
hxd_snd__$OggData_BytesOutput.__name__ = "hxd.snd._OggData.BytesOutput";
hxd_snd__$OggData_BytesOutput.__super__ = haxe_io_Output;
hxd_snd__$OggData_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	done: function() {
	}
	,init: function(bytes,position) {
		this.bytes = bytes;
		this.position = position;
	}
	,writeFloat: function(f) {
		this.bytes.setFloat(this.position,f);
		this.position += 4;
	}
	,writeInt16: function(i) {
		this.bytes.setUInt16(this.position,i);
		this.position += 2;
	}
	,__class__: hxd_snd__$OggData_BytesOutput
});
var hxd_snd_OggData = function(bytes) {
	if(bytes != null) {
		this.reader = stb_format_vorbis_Reader.openFromBytes(bytes);
		this.samples = this.reader.get_totalSample();
		this.channels = this.reader.get_header().channel;
		this.samplingRate = this.reader.get_header().sampleRate;
		this.sampleFormat = hxd_snd_SampleFormat.F32;
	}
	this.output = new hxd_snd__$OggData_BytesOutput();
	this.decodedFirst = 0;
	this.decodedLast = 0;
};
$hxClasses["hxd.snd.OggData"] = hxd_snd_OggData;
hxd_snd_OggData.__name__ = "hxd.snd.OggData";
hxd_snd_OggData.__super__ = hxd_snd_Data;
hxd_snd_OggData.prototype = $extend(hxd_snd_Data.prototype,{
	resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		switch(format._hx_index) {
		case 1:case 2:
			if(rate % this.samplingRate == 0 && channels >= this.channels) {
				var c = new hxd_snd_OggData(null);
				c.reader = this.reader;
				c.samples = this.samples;
				c.samplingRate = this.samplingRate;
				c.sampleFormat = format;
				c.channels = channels;
				return c;
			} else {
				return hxd_snd_Data.prototype.resample.call(this,rate,format,channels);
			}
			break;
		default:
			return hxd_snd_Data.prototype.resample.call(this,rate,format,channels);
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var last = sampleStart + sampleCount;
		var bpp = this.getBytesPerSample();
		if(sampleStart < this.decodedFirst || last > this.decodedLast) {
			var need = sampleCount - sampleStart;
			if(need > 132300 || this.samples > 132300) {
				this.output.init(out,outPos);
				this.reader.set_currentSample(sampleStart);
				this.reader.read(this.output,sampleCount,this.channels,this.samplingRate,this.sampleFormat == hxd_snd_SampleFormat.F32);
				this.output.done();
				return;
			}
			if(this.decoded == null) {
				this.decoded = new haxe_io_Bytes(new ArrayBuffer((this.samples < 132300 ? this.samples : 132300) * bpp));
			}
			need = 132300;
			if(sampleStart + need > this.samples) {
				need = this.samples - sampleStart;
			}
			this.output.init(this.decoded,0);
			this.reader.set_currentSample(sampleStart);
			this.reader.read(this.output,need,this.channels,this.samplingRate,this.sampleFormat == hxd_snd_SampleFormat.F32);
			this.output.done();
			this.decodedFirst = sampleStart;
			this.decodedLast = sampleStart + need;
			if(sampleStart == 0 && need == this.samples) {
				this.reader = null;
				this.output = null;
			}
		}
		out.blit(outPos,this.decoded,(sampleStart - this.decodedFirst) * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_OggData
});
var hxd_snd_SoundGroup = function(name) {
	this.name = name;
	this.maxAudible = -1;
	this.volume = 1;
	this.mono = false;
};
$hxClasses["hxd.snd.SoundGroup"] = hxd_snd_SoundGroup;
hxd_snd_SoundGroup.__name__ = "hxd.snd.SoundGroup";
hxd_snd_SoundGroup.prototype = {
	__class__: hxd_snd_SoundGroup
};
var hxd_snd_WavData = function(bytes) {
	if(bytes != null) {
		this.init(new format_wav_Reader(new haxe_io_BytesInput(bytes)).read());
	}
};
$hxClasses["hxd.snd.WavData"] = hxd_snd_WavData;
hxd_snd_WavData.__name__ = "hxd.snd.WavData";
hxd_snd_WavData.__super__ = hxd_snd_Data;
hxd_snd_WavData.prototype = $extend(hxd_snd_Data.prototype,{
	init: function(d) {
		var h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		var tmp;
		switch(h.bitsPerSample) {
		case 8:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_WavData
});
var hxd_snd_effect_LowPass = function() {
	hxd_snd_Effect.call(this,"lowpass");
	this.priority = 100;
	this.gainHF = 1.0;
};
$hxClasses["hxd.snd.effect.LowPass"] = hxd_snd_effect_LowPass;
hxd_snd_effect_LowPass.__name__ = "hxd.snd.effect.LowPass";
hxd_snd_effect_LowPass.__super__ = hxd_snd_Effect;
hxd_snd_effect_LowPass.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_LowPass
});
var hxd_snd_effect_Pitch = function(value) {
	if(value == null) {
		value = 1.0;
	}
	hxd_snd_Effect.call(this,"pitch");
	this.value = value;
};
$hxClasses["hxd.snd.effect.Pitch"] = hxd_snd_effect_Pitch;
hxd_snd_effect_Pitch.__name__ = "hxd.snd.effect.Pitch";
hxd_snd_effect_Pitch.__super__ = hxd_snd_Effect;
hxd_snd_effect_Pitch.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_Pitch
});
var hxd_snd_effect_Spatialization = function() {
	hxd_snd_Effect.call(this,"spatialization");
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector();
	this.referenceDistance = 1.0;
	this.rollOffFactor = 1.0;
};
$hxClasses["hxd.snd.effect.Spatialization"] = hxd_snd_effect_Spatialization;
hxd_snd_effect_Spatialization.__name__ = "hxd.snd.effect.Spatialization";
hxd_snd_effect_Spatialization.__super__ = hxd_snd_Effect;
hxd_snd_effect_Spatialization.prototype = $extend(hxd_snd_Effect.prototype,{
	getVolumeModifier: function() {
		if(this.fadeDistance == null) {
			return 1.;
		}
		var _this = hxd_snd_Manager.get().listener.position;
		var v = this.position;
		var dx = v.x - _this.x;
		var dy = v.y - _this.y;
		var dz = v.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		if(this.maxDistance != null) {
			dist -= this.maxDistance;
		} else {
			dist -= this.referenceDistance;
		}
		var volume = 1 - dist / this.fadeDistance;
		if(volume > 1) {
			volume = 1;
		}
		if(volume < 0) {
			volume = 0;
		}
		return volume;
	}
	,applyAudibleVolumeModifier: function(v) {
		var _this = hxd_snd_Manager.get().listener.position;
		var v1 = this.position;
		var dx = v1.x - _this.x;
		var dy = v1.y - _this.y;
		var dz = v1.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		var b = this.referenceDistance;
		dist = dist < b ? b : dist;
		if(this.maxDistance != null) {
			var b1 = this.maxDistance;
			dist = dist > b1 ? b1 : dist;
		}
		var volume = this.referenceDistance / (this.referenceDistance + this.rollOffFactor * (dist - this.referenceDistance));
		return v * volume;
	}
	,__class__: hxd_snd_effect_Spatialization
});
var hxd_snd_webaudio_BufferHandle = function() {
};
$hxClasses["hxd.snd.webaudio.BufferHandle"] = hxd_snd_webaudio_BufferHandle;
hxd_snd_webaudio_BufferHandle.__name__ = "hxd.snd.webaudio.BufferHandle";
hxd_snd_webaudio_BufferHandle.prototype = {
	__class__: hxd_snd_webaudio_BufferHandle
};
var hxd_snd_webaudio_SourceHandle = function() {
	this.buffers = [];
	this.sampleOffset = 0;
	this.pitch = 1;
	this.firstPlay = true;
};
$hxClasses["hxd.snd.webaudio.SourceHandle"] = hxd_snd_webaudio_SourceHandle;
hxd_snd_webaudio_SourceHandle.__name__ = "hxd.snd.webaudio.SourceHandle";
hxd_snd_webaudio_SourceHandle.prototype = {
	updateDestination: function() {
		this.destination = this.gain;
		if(this.lowPass != null) {
			this.lowPass.connect(this.destination);
			this.destination = this.lowPass;
		}
		if(this.panner != null) {
			this.panner.connect(this.destination);
			this.destination = this.panner;
		}
		this.gain.connect(hxd_snd_webaudio_Context.destination);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.node != null) {
				b.restart(this);
			}
		}
	}
	,applyPitch: function() {
		var t = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			t = b.readjust(t,this);
		}
	}
	,__class__: hxd_snd_webaudio_SourceHandle
};
var hxd_snd_webaudio_BufferPlayback = function() {
};
$hxClasses["hxd.snd.webaudio.BufferPlayback"] = hxd_snd_webaudio_BufferPlayback;
hxd_snd_webaudio_BufferPlayback.__name__ = "hxd.snd.webaudio.BufferPlayback";
hxd_snd_webaudio_BufferPlayback.prototype = {
	get_currentSample: function() {
		if(this.consumed) {
			return this.buffer.samples;
		}
		if(this.node == null || !this.dirty || this.node.context.currentTime < this.lastTime) {
			return 0;
		}
		this.lastSamples += Math.floor((this.node.context.currentTime - this.lastTime) * this.buffer.inst.sampleRate * this.node.playbackRate.value);
		this.lastTime = this.node.context.currentTime;
		return this.lastSamples;
	}
	,set: function(buf,grainOffset) {
		this.buffer = buf;
		this.offset = isNaN(grainOffset) ? 0 : grainOffset;
		this.dirty = false;
		this.consumed = false;
		this.starts = 0;
		this.ends = 0;
	}
	,start: function(ctx,source,time) {
		this.dirty = true;
		this.consumed = false;
		if(this.node != null) {
			this.stop();
		}
		if(source.firstPlay && this.buffer.samples > 10) {
			source.firstPlay = false;
			var _g = [];
			var _g1 = 0;
			var _g2 = this.buffer.inst.numberOfChannels;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.buffer.inst.getChannelData(i));
			}
			var channels = _g;
			var j = 0;
			var fade = 0.;
			while(j < 10) {
				var i1 = 0;
				while(i1 < channels.length) {
					channels[i1][j] *= fade;
					++i1;
				}
				++j;
				fade += 0.1;
				if(fade > 1) {
					fade = 1;
				}
			}
		}
		this.node = ctx.createBufferSource();
		this.node.buffer = this.buffer.inst;
		this.node.addEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.connect(source.destination);
		this.node.playbackRate.value = source.pitch;
		this.node.start(time,this.offset);
		this.lastSamples = 0;
		this.lastTime = time;
		this.starts = time;
		return this.ends = time + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,readjust: function(time,source) {
		if(this.consumed || this.node == null) {
			return this.ends;
		}
		var ctx = source.driver.ctx;
		var shiftTime = ctx.currentTime;
		this.node.playbackRate.setValueAtTime(source.pitch,shiftTime);
		var elapsed = shiftTime - this.starts;
		if(elapsed < 0) {
			return this.start(ctx,source,time == 0 ? shiftTime : time);
		}
		this.starts = shiftTime - elapsed / source.pitch;
		return this.ends = this.starts + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,restart: function(source) {
		if(this.consumed || this.node == null) {
			return;
		}
		var ctx = hxd_snd_webaudio_Context.get();
		if(ctx.currentTime > this.starts) {
			this.offset += (ctx.currentTime - this.starts) * source.pitch;
			this.start(ctx,source,ctx.currentTime);
		} else {
			this.start(ctx,source,this.starts);
		}
	}
	,stop: function(immediate) {
		if(immediate == null) {
			immediate = true;
		}
		if(this.node != null) {
			this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
			if(immediate) {
				this.node.disconnect();
			} else {
				this.node.stop();
			}
			this.node = null;
		}
	}
	,onBufferConsumed: function(e) {
		this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.disconnect();
		this.node = null;
		this.consumed = true;
	}
	,clear: function() {
		this.buffer = null;
		this.node = null;
	}
	,__class__: hxd_snd_webaudio_BufferPlayback
};
var hxd_snd_webaudio_Context = function() { };
$hxClasses["hxd.snd.webaudio.Context"] = hxd_snd_webaudio_Context;
hxd_snd_webaudio_Context.__name__ = "hxd.snd.webaudio.Context";
hxd_snd_webaudio_Context.get = function() {
	if(hxd_snd_webaudio_Context.ctx == null) {
		try {
			hxd_snd_webaudio_Context.ctx = new AudioContext();
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			try {
				hxd_snd_webaudio_Context.ctx = new window.webkitAudioContext();
			} catch( e2 ) {
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				hxd_snd_webaudio_Context.ctx = null;
			}
		}
		if(hxd_snd_webaudio_Context.ctx == null) {
			throw new js__$Boot_HaxeError("WebAudio API not available in this browser!");
		}
		if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
			hxd_snd_webaudio_Context.waitForPageInput();
		}
		hxd_snd_webaudio_Context.ctx.addEventListener("statechange",function(_) {
			if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
				hxd_snd_webaudio_Context.waitForPageInput();
			}
		});
		hxd_snd_webaudio_Context.bufferPool = [];
		hxd_snd_webaudio_Context.gainPool = [];
		hxd_snd_webaudio_Context.masterGain = hxd_snd_webaudio_Context.ctx.createGain();
		hxd_snd_webaudio_Context.masterGain.connect(hxd_snd_webaudio_Context.ctx.destination);
		hxd_snd_webaudio_Context.destination = hxd_snd_webaudio_Context.masterGain;
	}
	return hxd_snd_webaudio_Context.ctx;
};
hxd_snd_webaudio_Context.waitForPageInput = function() {
	if(!hxd_snd_webaudio_Context.suspended) {
		window.document.addEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = true;
	}
};
hxd_snd_webaudio_Context.resumeContext = function(_) {
	if(hxd_snd_webaudio_Context.suspended) {
		if(hxd_snd_webaudio_Context.ctx != null) {
			hxd_snd_webaudio_Context.ctx.resume();
		}
		window.document.removeEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = false;
	}
};
hxd_snd_webaudio_Context.getBuffer = function(channels,sampleCount,rate) {
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == channels && pool.samples == sampleCount && pool.rate == rate) {
			if(pool.pool.length != 0) {
				return pool.pool.pop();
			} else {
				return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
			}
		}
	}
	var pool1 = new hxd_snd_webaudio__$Context_BufferPool(channels,sampleCount,rate);
	hxd_snd_webaudio_Context.bufferPool.push(pool1);
	return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
};
hxd_snd_webaudio_Context.putBuffer = function(buf) {
	var rate = buf.sampleRate | 0;
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == buf.numberOfChannels && pool.samples == buf.length && pool.rate == rate) {
			pool.pool.push(buf);
			break;
		}
	}
};
var hxd_snd_webaudio__$Context_BufferPool = function(channels,samples,rate) {
	this.pool = [];
	this.channels = channels;
	this.samples = samples;
	this.rate = rate;
};
$hxClasses["hxd.snd.webaudio._Context.BufferPool"] = hxd_snd_webaudio__$Context_BufferPool;
hxd_snd_webaudio__$Context_BufferPool.__name__ = "hxd.snd.webaudio._Context.BufferPool";
hxd_snd_webaudio__$Context_BufferPool.prototype = {
	__class__: hxd_snd_webaudio__$Context_BufferPool
};
var hxd_snd_webaudio_Driver = function() {
	this.playbackPool = [];
	this.ctx = hxd_snd_webaudio_Context.get();
};
$hxClasses["hxd.snd.webaudio.Driver"] = hxd_snd_webaudio_Driver;
hxd_snd_webaudio_Driver.__name__ = "hxd.snd.webaudio.Driver";
hxd_snd_webaudio_Driver.__interfaces__ = [hxd_snd_Driver];
hxd_snd_webaudio_Driver.prototype = {
	hasFeature: function(d) {
		return true;
	}
	,setMasterVolume: function(value) {
		hxd_snd_webaudio_Context.masterGain.gain.value = value;
	}
	,setListenerParams: function(position,direction,up,velocity) {
		this.ctx.listener.setPosition(-position.x,position.y,position.z);
		this.ctx.listener.setOrientation(-direction.x,direction.y,direction.z,-up.x,up.y,up.z);
	}
	,createSource: function() {
		var s = new hxd_snd_webaudio_SourceHandle();
		s.driver = this;
		s.gain = hxd_snd_webaudio_Context.gainPool.length != 0 ? hxd_snd_webaudio_Context.gainPool.pop() : hxd_snd_webaudio_Context.ctx.createGain();
		s.updateDestination();
		return s;
	}
	,playSource: function(source) {
		if(!source.playing) {
			source.playing = true;
			if(source.buffers.length != 0) {
				var time = this.ctx.currentTime;
				var _g = 0;
				var _g1 = source.buffers;
				while(_g < _g1.length) {
					var b = _g1[_g];
					++_g;
					if(b.consumed) {
						continue;
					}
					time = b.start(this.ctx,source,time);
				}
			}
		}
	}
	,stopSource: function(source) {
		source.playing = false;
		source.sampleOffset = 0;
	}
	,setSourceVolume: function(source,value) {
		source.gain.gain.value = value;
	}
	,createBuffer: function() {
		var b = new hxd_snd_webaudio_BufferHandle();
		b.samples = 0;
		return b;
	}
	,setBufferData: function(buffer,data,size,format,channelCount,samplingRate) {
		var sampleCount;
		switch(format._hx_index) {
		case 0:
			sampleCount = 1;
			break;
		case 1:
			sampleCount = 2;
			break;
		case 2:
			sampleCount = 4;
			break;
		}
		var sampleCount1 = size / sampleCount / channelCount | 0;
		buffer.samples = sampleCount1;
		if(sampleCount1 == 0) {
			return;
		}
		if(buffer.inst == null) {
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		} else if(buffer.inst.sampleRate != samplingRate || buffer.inst.numberOfChannels != channelCount || buffer.inst.length != sampleCount1) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		}
		switch(format._hx_index) {
		case 0:
			var ui8 = new Uint8Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = ui8[i] / 255;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g2 = 0;
				var _g11 = sampleCount1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					left[i1] = ui8[r] / 255;
					right[i1] = ui8[r + 1] / 255;
					r += channelCount;
				}
			}
			break;
		case 1:
			var i16 = new Int16Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn1 = buffer.inst.getChannelData(0);
				var _g3 = 0;
				var _g12 = sampleCount1;
				while(_g3 < _g12) {
					var i2 = _g3++;
					chn1[i2] = i16[i2] / 32768;
				}
			} else {
				var left1 = buffer.inst.getChannelData(0);
				var right1 = buffer.inst.getChannelData(1);
				var r1 = 0;
				var _g4 = 0;
				var _g13 = sampleCount1;
				while(_g4 < _g13) {
					var i3 = _g4++;
					left1[i3] = i16[r1] / 32768;
					right1[i3] = i16[r1 + 1] / 32768;
					r1 += channelCount;
				}
			}
			break;
		case 2:
			var f32 = new Float32Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn2 = buffer.inst.getChannelData(0);
				var _g5 = 0;
				var _g14 = sampleCount1;
				while(_g5 < _g14) {
					var i4 = _g5++;
					chn2[i4] = f32[i4];
				}
			} else {
				var left2 = buffer.inst.getChannelData(0);
				var right2 = buffer.inst.getChannelData(1);
				var r2 = 0;
				var _g6 = 0;
				var _g15 = sampleCount1;
				while(_g6 < _g15) {
					var i5 = _g6++;
					left2[i5] = f32[r2];
					right2[i5] = f32[r2 + 1];
					r2 += channelCount;
				}
			}
			break;
		}
	}
	,destroyBuffer: function(buffer) {
		if(buffer.inst != null) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
		}
		buffer.inst = null;
	}
	,queueBuffer: function(source,buffer,sampleStart,endOfStream) {
		var buf = this.playbackPool.length != 0 ? this.playbackPool.pop() : new hxd_snd_webaudio_BufferPlayback();
		if(buffer.inst == null) {
			return;
		}
		buf.set(buffer,sampleStart / buffer.inst.length * buffer.inst.duration);
		buffer.isEnd = endOfStream;
		source.buffers.push(buf);
		if(source.playing) {
			if(source.buffers.length != 1) {
				var t = source.buffers[source.buffers.length - 2].ends;
				var tmp = this.ctx;
				var tmp1;
				if(isFinite(t)) {
					var b = this.ctx.currentTime;
					tmp1 = t < b ? b : t;
				} else {
					tmp1 = this.ctx.currentTime;
				}
				buf.start(tmp,source,tmp1);
			} else {
				buf.start(this.ctx,source,this.ctx.currentTime);
			}
		}
	}
	,unqueueBuffer: function(source,buffer) {
		var i = 0;
		while(i < source.buffers.length) {
			var b = source.buffers[i];
			if(b.buffer == buffer) {
				source.buffers.splice(i,1);
				b.stop(!buffer.isEnd);
				b.clear();
				this.playbackPool.push(b);
				break;
			}
		}
		if(buffer.isEnd || !source.playing) {
			source.sampleOffset = 0;
		} else {
			source.sampleOffset += buffer.samples;
		}
	}
	,getProcessedBuffers: function(source) {
		var cnt = 0;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				++cnt;
			}
		}
		return cnt;
	}
	,getPlayedSampleCount: function(source) {
		var consumed = 0;
		var buf = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				consumed += b.buffer.samples;
			} else if(b.dirty) {
				buf = b;
				break;
			}
		}
		if(buf != null) {
			return source.sampleOffset + consumed + buf.get_currentSample();
		}
		return source.sampleOffset + consumed;
	}
	,update: function() {
	}
	,getEffectDriver: function(type) {
		switch(type) {
		case "lowpass":
			return new hxd_snd_webaudio_LowPassDriver();
		case "pitch":
			return new hxd_snd_webaudio_PitchDriver();
		case "spatialization":
			return new hxd_snd_webaudio_SpatializationDriver();
		default:
			return new hxd_snd_EffectDriver();
		}
	}
	,__class__: hxd_snd_webaudio_Driver
};
var hxd_snd_webaudio_LowPassDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.LowPassDriver"] = hxd_snd_webaudio_LowPassDriver;
hxd_snd_webaudio_LowPassDriver.__name__ = "hxd.snd.webaudio.LowPassDriver";
hxd_snd_webaudio_LowPassDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_LowPassDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createBiquadFilter();
		node.type = "lowpass";
		return node;
	}
	,bind: function(e,source) {
		source.lowPass = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		var min = 40;
		var max = source.driver.ctx.sampleRate / 2;
		var octaves = Math.log(max / min) / Math.LN2;
		source.lowPass.frequency.value = max * Math.pow(2,octaves * (e.gainHF - 1));
	}
	,unbind: function(e,source) {
		this.pool.push(source.lowPass);
		source.lowPass.disconnect();
		source.lowPass = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_LowPassDriver
});
var hxd_snd_webaudio_PitchDriver = function() {
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.PitchDriver"] = hxd_snd_webaudio_PitchDriver;
hxd_snd_webaudio_PitchDriver.__name__ = "hxd.snd.webaudio.PitchDriver";
hxd_snd_webaudio_PitchDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_PitchDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	apply: function(e,source) {
		if(source.pitch != e.value) {
			source.pitch = e.value;
			source.applyPitch();
		}
	}
	,unbind: function(e,source) {
		source.pitch = 1;
		source.applyPitch();
	}
	,__class__: hxd_snd_webaudio_PitchDriver
});
var hxd_snd_webaudio_SpatializationDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.SpatializationDriver"] = hxd_snd_webaudio_SpatializationDriver;
hxd_snd_webaudio_SpatializationDriver.__name__ = "hxd.snd.webaudio.SpatializationDriver";
hxd_snd_webaudio_SpatializationDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_SpatializationDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createPanner();
		return node;
	}
	,bind: function(e,source) {
		source.panner = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		source.panner.setPosition(-e.position.x,e.position.y,e.position.z);
		source.panner.setOrientation(-e.direction.x,e.direction.y,e.direction.z);
		source.panner.rolloffFactor = e.rollOffFactor;
		source.panner.refDistance = e.referenceDistance;
		var maxDist = e.maxDistance == null ? 3.40282347e38 : e.maxDistance;
		source.panner.maxDistance = maxDist;
	}
	,unbind: function(e,source) {
		this.pool.push(source.panner);
		source.panner.disconnect();
		source.panner = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_SpatializationDriver
});
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__ : "hxsl.Type", __constructs__ : ["TVoid","TInt","TBool","TFloat","TString","TVec","TMat3","TMat4","TMat3x4","TBytes","TSampler2D","TSampler2DArray","TSamplerCube","TStruct","TFun","TArray","TBuffer","TChannel"]
	,TVoid: {_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TSampler2D: {_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size) { return {_hx_index:16,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
};
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__ : "hxsl.VecType", __constructs__ : ["VInt","VFloat","VBool"]
	,VInt: {_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__ : "hxsl.SizeDecl", __constructs__ : ["SConst","SVar"]
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw new js__$Boot_HaxeError(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__ : "hxsl.VarKind", __constructs__ : ["Global","Input","Param","Var","Local","Output","Function"]
	,Global: {_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__ : "hxsl.VarQualifier", __constructs__ : ["Const","Private","Nullable","PerObject","Name","Shared","Precision","Range","Ignore","PerInstance"]
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["max"],$_)
	,Private: {_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Shared: {_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__ : "hxsl.Prec", __constructs__ : ["Low","Medium","High"]
	,Low: {_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__ : "hxsl.Const", __constructs__ : ["CNull","CBool","CInt","CFloat","CString"]
	,CNull: {_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__ : "hxsl.FunctionKind", __constructs__ : ["Vertex","Fragment","Init","Helper"]
	,Vertex: {_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__ : "hxsl.TGlobal", __constructs__ : ["Radians","Degrees","Sin","Cos","Tan","Asin","Acos","Atan","Pow","Exp","Log","Exp2","Log2","Sqrt","Inversesqrt","Abs","Sign","Floor","Ceil","Fract","Mod","Min","Max","Clamp","Mix","Step","Smoothstep","Length","Distance","Dot","Cross","Normalize","LReflect","Texture","TextureLod","Texel","TexelLod","ToInt","ToFloat","ToBool","Vec2","Vec3","Vec4","IVec2","IVec3","IVec4","BVec2","BVec3","BVec4","Mat2","Mat3","Mat4","Mat3x4","Saturate","Pack","Unpack","PackNormal","UnpackNormal","ScreenToUv","UvToScreen","DFdx","DFdy","Fwidth","ChannelRead","ChannelReadLod","ChannelFetch","ChannelFetchLod","Trace","VertexID","InstanceID"]
	,Radians: {_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TexelLod: {_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetchLod: {_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TexelLod,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelFetchLod,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__ : "hxsl.Component", __constructs__ : ["X","Y","Z","W"]
	,X: {_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__ : "hxsl.TExprDef", __constructs__ : ["TConst","TVar","TGlobal","TParenthesis","TBlock","TBinop","TUnop","TVarDecl","TCall","TSwiz","TIf","TDiscard","TReturn","TFor","TContinue","TBreak","TArray","TArrayDecl","TSwitch","TWhile","TMeta"]
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["m","args","e"],$_)
};
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g._hx_index) {
	case 1:
		var _g1 = 0;
		var _g11 = v.qualifiers;
		while(_g1 < _g11.length) {
			var q = _g11[_g1];
			++_g1;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 17:
		var _g12 = _g.size;
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	var tmp;
	if(_g._hx_index == 17) {
		var _g1 = _g.size;
		tmp = true;
	} else {
		tmp = false;
	}
	if(tmp) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g2 = 0;
		var _g3 = v.qualifiers;
		while(_g2 < _g3.length) {
			var q = _g3[_g2];
			++_g2;
			if(q._hx_index == 0) {
				var _g21 = q.max;
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isSampler = function(t) {
	switch(t._hx_index) {
	case 10:case 11:case 12:
		return true;
	case 17:
		var _g = t.size;
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var t1 = t.t;
		var size = t.size;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var s = t.size;
		var t2 = t.t;
		var tmp = hxsl_Tools.toString(t2) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v1 = s.v;
			tmp1 = v1.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var s1 = t.size;
		var t3 = t.t;
		var tmp2 = "buffer " + hxsl_Tools.toString(t3) + "[";
		var tmp3;
		switch(s1._hx_index) {
		case 0:
			var i1 = s1.v;
			tmp3 = "" + i1;
			break;
		case 1:
			var v2 = s1.v;
			tmp3 = v2.name;
			break;
		}
		return tmp2 + tmp3 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index],1,null);
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		return false;
	case 1:
		var _g9 = _g.v;
		return false;
	case 2:
		var _g5 = _g.g;
		return false;
	case 3:
		var e1 = _g.e;
		return hxsl_Tools.hasSideEffect(e1);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e2)) {
				return true;
			}
		}
		return false;
	case 5:
		var _g33 = _g.e2;
		var _g32 = _g.e1;
		var _g31 = _g.op;
		switch(_g31._hx_index) {
		case 4:
			return true;
		case 20:
			var _g34 = _g31.op;
			return true;
		default:
			var e21 = _g33;
			var e11 = _g32;
			if(!hxsl_Tools.hasSideEffect(e11)) {
				return hxsl_Tools.hasSideEffect(e21);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var _g17 = _g.op;
		var e12 = _g.e1;
		return hxsl_Tools.hasSideEffect(e12);
	case 7:
		var _g25 = _g.init;
		var _g24 = _g.v;
		return true;
	case 8:
		var _g36 = _g.args;
		var _g35 = _g.e;
		return true;
	case 9:
		var _g20 = _g.regs;
		var e3 = _g.e;
		return hxsl_Tools.hasSideEffect(e3);
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 12:
		var _g13 = _g.e;
		return true;
	case 13:
		var _g21 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 16:
		var index = _g.index;
		var e4 = _g.e;
		if(!hxsl_Tools.hasSideEffect(e4)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el1 = _g.el;
		var _g2 = 0;
		while(_g2 < el1.length) {
			var e5 = el1[_g2];
			++_g2;
			if(hxsl_Tools.hasSideEffect(e5)) {
				return true;
			}
		}
		return false;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e6 = _g.e;
		var _g3 = 0;
		while(_g3 < cases.length) {
			var c = cases[_g3];
			++_g3;
			var _g4 = 0;
			var _g11 = c.values;
			while(_g4 < _g11.length) {
				var v = _g11[_g4];
				++_g4;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e6)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var _g12 = _g.normalWhile;
		var loop1 = _g.loop;
		var e7 = _g.e;
		if(!hxsl_Tools.hasSideEffect(e7)) {
			return hxsl_Tools.hasSideEffect(loop1);
		} else {
			return true;
		}
		break;
	case 20:
		var _g7 = _g.args;
		var _g6 = _g.m;
		var e8 = _g.e;
		return hxsl_Tools.hasSideEffect(e8);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		break;
	case 1:
		var _g9 = _g.v;
		break;
	case 2:
		var _g5 = _g.g;
		break;
	case 3:
		var e1 = _g.e;
		f(e1);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			f(e2);
		}
		break;
	case 5:
		var _g31 = _g.op;
		var e21 = _g.e2;
		var e11 = _g.e1;
		f(e11);
		f(e21);
		break;
	case 6:
		var _g17 = _g.op;
		var e12 = _g.e1;
		f(e12);
		break;
	case 7:
		var _g24 = _g.v;
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var args = _g.args;
		var e3 = _g.e;
		f(e3);
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			f(a);
		}
		break;
	case 9:
		var _g20 = _g.regs;
		var e4 = _g.e;
		f(e4);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e5 = _g.e;
		if(e5 != null) {
			f(e5);
		}
		break;
	case 13:
		var _g21 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		f(it);
		f(loop);
		break;
	case 11:case 14:case 15:
		break;
	case 16:
		var index = _g.index;
		var e6 = _g.e;
		f(e6);
		f(index);
		break;
	case 17:
		var el1 = _g.el;
		var _g3 = 0;
		while(_g3 < el1.length) {
			var e7 = el1[_g3];
			++_g3;
			f(e7);
		}
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e8 = _g.e;
		f(e8);
		var _g4 = 0;
		while(_g4 < cases.length) {
			var c = cases[_g4];
			++_g4;
			var _g6 = 0;
			var _g11 = c.values;
			while(_g6 < _g11.length) {
				var v = _g11[_g6];
				++_g6;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var _g12 = _g.normalWhile;
		var loop1 = _g.loop;
		var e9 = _g.e;
		f(e9);
		f(loop1);
		break;
	case 20:
		var _g7 = _g.args;
		var _g61 = _g.m;
		var e10 = _g.e;
		f(e10);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		ed = e.e;
		break;
	case 1:
		var _g9 = _g.v;
		ed = e.e;
		break;
	case 2:
		var _g5 = _g.g;
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g11 = 0;
		while(_g11 < el.length) {
			var e2 = el[_g11];
			++_g11;
			_g1.push(f(e2));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var e21 = _g.e2;
		var e11 = _g.e1;
		var op = _g.op;
		ed = hxsl_TExprDef.TBinop(op,f(e11),f(e21));
		break;
	case 6:
		var e12 = _g.e1;
		var op1 = _g.op;
		ed = hxsl_TExprDef.TUnop(op1,f(e12));
		break;
	case 7:
		var init = _g.init;
		var v = _g.v;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var args = _g.args;
		var e3 = _g.e;
		var ed1 = f(e3);
		var _g2 = [];
		var _g12 = 0;
		while(_g12 < args.length) {
			var a = args[_g12];
			++_g12;
			_g2.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g2);
		break;
	case 9:
		var c = _g.regs;
		var e4 = _g.e;
		ed = hxsl_TExprDef.TSwiz(f(e4),c);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e5 = _g.e;
		ed = hxsl_TExprDef.TReturn(e5 != null ? f(e5) : null);
		break;
	case 13:
		var loop = _g.loop;
		var it = _g.it;
		var v1 = _g.v;
		ed = hxsl_TExprDef.TFor(v1,f(it),f(loop));
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var index = _g.index;
		var e6 = _g.e;
		ed = hxsl_TExprDef.TArray(f(e6),f(index));
		break;
	case 17:
		var el1 = _g.el;
		var _g3 = [];
		var _g13 = 0;
		while(_g13 < el1.length) {
			var e7 = el1[_g13];
			++_g13;
			_g3.push(f(e7));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g3);
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e8 = _g.e;
		var ed2 = f(e8);
		var _g4 = [];
		var _g14 = 0;
		while(_g14 < cases.length) {
			var c1 = cases[_g14];
			++_g14;
			var _g15 = [];
			var _g21 = 0;
			var _g31 = c1.values;
			while(_g21 < _g31.length) {
				var v2 = _g31[_g21];
				++_g21;
				_g15.push(f(v2));
			}
			_g4.push({ values : _g15, expr : f(c1.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed2,_g4,def == null ? null : f(def));
		break;
	case 19:
		var normalWhile = _g.normalWhile;
		var loop1 = _g.loop;
		var e9 = _g.e;
		ed = hxsl_TExprDef.TWhile(f(e9),f(loop1),normalWhile);
		break;
	case 20:
		var e10 = _g.e;
		var args1 = _g.args;
		var m = _g.m;
		ed = hxsl_TExprDef.TMeta(m,args1,f(e10));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 2:case 4:case 10:case 11:case 12:
		return 0;
	case 5:
		var _g1 = t.t;
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 13:
		var vl = t.vl;
		var s1 = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s1 += hxsl_Tools.size(v.type);
		}
		return s1;
	case 14:
		var _g8 = t.variants;
		return 0;
	case 15:
		var _g10 = t.size;
		var _g9 = t.t;
		switch(_g10._hx_index) {
		case 0:
			var t1 = _g9;
			var v1 = _g10.v;
			return hxsl_Tools.size(t1) * v1;
		case 1:
			var _g11 = _g10.v;
			return 0;
		}
		break;
	case 16:
		var _g5 = t.size;
		if(_g5._hx_index == 0) {
			var t2 = t.t;
			var v2 = _g5.v;
			return hxsl_Tools.size(t2) * v2;
		} else {
			return 0;
		}
		break;
	case 17:
		var n1 = t.size;
		return n1;
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index];
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["hxsl.BatchShader"] = hxsl_BatchShader;
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw new js__$Boot_HaxeError("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_Count__;
		case 1:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: hxsl_BatchShader
});
var hxsl_SearchMap = function() {
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.constsToGlobal = false;
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_IntMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var shader = this.linkShaders.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars_h = Object.create(null);
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g2 = 0;
			var _g3 = args.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v1 = outVars_h[path];
			if(v1 != null) {
				return v1;
			}
			v1 = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v1);
			} else {
				var _g21 = parent.type;
				if(_g21._hx_index == 13) {
					var vl = _g21.vl;
					vl.push(v1);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			}
			outVars_h[path] = v1;
			return v1;
		};
		var makeOutExpr1 = null;
		makeOutExpr1 = function(v2,rem1) {
			switch(v2._hx_index) {
			case 0:
				var v3 = v2.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v3)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var size1 = v2.size;
				var vname = v2.v;
				var v4 = outVars_h[vname];
				if(v4 != null) {
					return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
				}
				var path1 = vname.split(".");
				var parent1 = null;
				while(path1.length > 1) {
					var parent2 = path1.shift();
					parent1 = makeVar(parent2,hxsl_Type.TStruct([]),parent1);
				}
				if(size1 != null) {
					rem1 = size1;
				}
				var v5 = path1.shift();
				v4 = makeVar(v5,rem1 == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem1,hxsl_VecType.VFloat),parent1);
				return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
			case 2:
				var v6 = v2.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v6,3)]), t : tvec4, p : pos};
			case 3:
				var v7 = v2.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v7,1)]), t : tvec4, p : pos};
			case 4:
				var args1 = v2.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args1,makeOutExpr1);
			case 5:
				var args2 = v2.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args2,makeOutExpr1);
			case 6:
				var args3 = v2.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args3,makeOutExpr1);
			case 7:
				var comps = v2.swiz;
				var v8 = v2.a;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr1(v8,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v9) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr1(v9,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars1) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g22 = [];
			var _g31 = 0;
			while(_g31 < vars1.length) {
				var v10 = vars1[_g31];
				++_g31;
				_g22.push(makeOutput(v10));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g22), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		this.linkShaders.h[key] = shader;
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,batchMode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			if(c.next == null) {
				c.next = new haxe_ds_IntMap();
			}
			var cs = c.next.h[i.id];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.next.h[i.id] = cs;
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,batchMode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,batchMode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s11,s2) {
			return s2.p - s11.p;
		});
		var linker = new hxsl_Linker(batchMode);
		var s3;
		try {
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < shaderDatas.length) {
				var s4 = shaderDatas[_g2];
				++_g2;
				_g1.push(s4.inst.shader);
			}
			s3 = linker.link(_g1);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof hxsl_Error)) {
				var e2 = e1;
				var _g11 = [];
				var _g21 = 0;
				while(_g21 < shaderDatas.length) {
					var s5 = shaderDatas[_g21];
					++_g21;
					_g11.push(hxsl_Printer.shaderToString(s5.inst.shader));
				}
				var shaders1 = _g11;
				e2.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw new js__$Boot_HaxeError(e2);
			} else {
				throw e;
			}
		}
		var paramVars = new haxe_ds_IntMap();
		var _g12 = 0;
		var _g22 = linker.allVars;
		while(_g12 < _g22.length) {
			var v = _g22[_g12];
			++_g12;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g13 = v.v.type;
				if(_g13._hx_index == 13) {
					var _g23 = _g13.vl;
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = s3;
		var s6;
		try {
			s6 = new hxsl_Splitter().split(s3);
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof hxsl_Error)) {
				var e5 = e4;
				e5.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s3);
				throw new js__$Boot_HaxeError(e5);
			} else {
				throw e3;
			}
		}
		if(batchMode) {
			var _g3 = 0;
			var _g4 = s6.vertex.vars;
			while(_g3 < _g4.length) {
				var v1 = _g4[_g3];
				++_g3;
				if(v1.qualifiers != null && v1.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					v1.kind = hxsl_VarKind.Local;
				}
			}
		}
		var prev1 = s6;
		var s7 = new hxsl_Dce().dce(s6.vertex,s6.fragment);
		var r = this.buildRuntimeShader(s7.vertex,s7.fragment,paramVars);
		var _g31 = [];
		var _g4_l = shaders;
		var _g4_last = null;
		while(_g4_l != _g4_last) {
			var s8 = _g4_l.s;
			_g4_l = _g4_l.next;
			var s9 = s8;
			_g31.push(new hxsl_ShaderInstanceDesc(s9.shader,s9.constBits));
		}
		r.spec = { instances : _g31, signature : null};
		var _g5 = 0;
		var _g6 = shaderDatas.length;
		while(_g5 < _g6) {
			var i1 = _g5++;
			var s10 = shaderDatas[shaderDatas.length - 1 - i1];
			r.spec.instances[s10.index].index = i1;
		}
		var _g7 = [];
		var _g8 = 0;
		var _g9 = r.spec.instances;
		while(_g8 < _g9.length) {
			var i2 = _g9[_g8];
			++_g8;
			_g7.push(i2.shader.data.name + "_" + i2.bits + "_" + i2.index);
		}
		var signParts = _g7;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		r.batchMode = batchMode;
		var r2 = this.byID.h[r.signature];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			this.byID.h[r.signature] = r;
		}
		return r;
	}
	,buildRuntimeShader: function(vertex,fragment,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p1 = s.params;
		while(p1 != null) {
			if(p1.perObjectGlobal != null) {
				r.globals.h[p1.perObjectGlobal.gid] = true;
			}
			p1 = p1.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind,this.constsToGlobal);
		var textures = [];
		c.consts = flat.consts;
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _g6 = _g4.size;
					var _g5 = _g4.t;
					if(_g5._hx_index == 5) {
						if(_g5.size == 4) {
							if(_g5.t._hx_index == 1) {
								if(_g6._hx_index == 0) {
									var size = _g6.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					} else {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			case 2:
				var out1 = [];
				var _g7 = 0;
				while(_g7 < alloc.length) {
					var a1 = alloc[_g7];
					++_g7;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						continue;
					}
					out1.push(new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type));
				}
				var _g11 = 0;
				var _g21 = out1.length - 1;
				while(_g11 < _g21) {
					var i1 = _g11++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g31 = g1.type;
				if(_g31._hx_index == 15) {
					var _g51 = _g31.size;
					var _g41 = _g31.t;
					var t = _g41;
					if(hxsl_Tools.isSampler(t)) {
						textures.push({ t : t, all : out1});
						c.texturesCount += out1.length;
					} else {
						switch(_g41._hx_index) {
						case 5:
							if(_g41.size == 4) {
								if(_g41.t._hx_index == 1) {
									if(_g51._hx_index == 0) {
										var size1 = _g51.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw new js__$Boot_HaxeError("assert");
									}
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
							break;
						case 16:
							var _g10 = _g41.size;
							var _g9 = _g41.t;
							c.buffers = out1[0];
							c.bufferCount = out1.length;
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			var _g8 = 1;
			var _g12 = textures.length;
			while(_g8 < _g12) {
				var i2 = _g8++;
				var prevAll = textures[i2 - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i2].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__ : "hxsl.Channel", __constructs__ : ["Unknown","R","G","B","A","PackedFloat","PackedNormal"]
	,Unknown: {_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var size = t.size;
			var t1 = t.t;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				var _g11 = size.v;
				tmp1 = size;
				break;
			case 1:
				var v1 = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v1));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v1),init);
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v2 = _g.v;
			tmp = hxsl_TExprDef.TFor(this.tvar(v2),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = s.funs;
		while(_g4 < _g5.length) {
			var f = _g5[_g4];
			++_g4;
			_g3.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g3};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	dce: function(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		var _g1 = vertex.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g2 = 0;
		var _g3 = fragment.vars;
		while(_g2 < _g3.length) {
			var v1 = _g3[_g2];
			++_g2;
			var i1 = this.get(v1);
			if(v1.kind == hxsl_VarKind.Output) {
				i1.keep = true;
			}
		}
		var _g4 = 0;
		var _g5 = vertex.funs;
		while(_g4 < _g5.length) {
			var f = _g5[_g4];
			++_g4;
			this.check(f.expr,[],[]);
		}
		var _g6 = 0;
		var _g7 = fragment.funs;
		while(_g6 < _g7.length) {
			var f1 = _g7[_g6];
			++_g6;
			this.check(f1.expr,[],[]);
		}
		var outExprs = [];
		while(true) {
			var v2 = this.used.iterator();
			while(v2.hasNext()) {
				var v3 = v2.next();
				if(v3.keep) {
					this.markRec(v3);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			var _g8 = 0;
			while(_g8 < inputs.length) {
				var v4 = inputs[_g8];
				++_g8;
				this.markRec(v4);
			}
			outExprs = [];
			var _g9 = 0;
			var _g10 = vertex.funs;
			while(_g9 < _g10.length) {
				var f2 = _g10[_g9];
				++_g9;
				outExprs.push(this.mapExpr(f2.expr,false));
			}
			var _g11 = 0;
			var _g12 = fragment.funs;
			while(_g11 < _g12.length) {
				var f3 = _g12[_g11];
				++_g11;
				outExprs.push(this.mapExpr(f3.expr,false));
			}
			this.markAsKeep = false;
			var _g13 = 0;
			while(_g13 < outExprs.length) {
				var e = outExprs[_g13];
				++_g13;
				this.checkBranches(e);
			}
			if(!this.markAsKeep) {
				break;
			}
		}
		var _g81 = 0;
		var _g91 = vertex.funs;
		while(_g81 < _g91.length) {
			var f4 = _g91[_g81];
			++_g81;
			f4.expr = outExprs.shift();
		}
		var _g101 = 0;
		var _g111 = fragment.funs;
		while(_g101 < _g111.length) {
			var f5 = _g111[_g101];
			++_g101;
			f5.expr = outExprs.shift();
		}
		var v5 = this.used.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			if(v6.used) {
				continue;
			}
			if(v6.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v6.v);
			HxOverrides.remove(fragment.vars,v6.v);
		}
		return { fragment : fragment, vertex : vertex};
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = [];
			var _g1 = 0;
			var _g11 = el.length;
			while(_g1 < _g11) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _g13 = _g.e2;
			var _g12 = _g.e1;
			var _g111 = _g.op;
			switch(_g111._hx_index) {
			case 4:
				var _g16 = _g12.t;
				var _g15 = _g12.p;
				var _g14 = _g12.e;
				switch(_g14._hx_index) {
				case 1:
					var e1 = _g13;
					var v1 = _g14.v;
					var v2 = this.get(v1);
					writeTo.push(v2);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v2) < 0) {
						isAffected.push(v2);
					}
					break;
				case 9:
					var _g19 = _g14.regs;
					var _g18 = _g14.e;
					var _g22 = _g18.t;
					var _g21 = _g18.p;
					var _g20 = _g18.e;
					if(_g20._hx_index == 1) {
						var e2 = _g13;
						var v3 = _g20.v;
						var v4 = this.get(v3);
						writeTo.push(v4);
						this.check(e2,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v4) < 0) {
							isAffected.push(v4);
						}
					} else {
						var f = $bind(this,this.check);
						var writeTo1 = writeTo;
						var isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e3) {
							f(e3,writeTo1,isAffected1);
						});
					}
					break;
				default:
					var f1 = $bind(this,this.check);
					var writeTo2 = writeTo;
					var isAffected2 = isAffected;
					hxsl_Tools.iter(e,function(e4) {
						f1(e4,writeTo2,isAffected2);
					});
				}
				break;
			case 20:
				var _g24 = _g111.op;
				var _g27 = _g12.t;
				var _g26 = _g12.p;
				var _g25 = _g12.e;
				switch(_g25._hx_index) {
				case 1:
					var e5 = _g13;
					var v5 = _g25.v;
					var v6 = this.get(v5);
					writeTo.push(v6);
					this.check(e5,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v6) < 0) {
						isAffected.push(v6);
					}
					break;
				case 9:
					var _g30 = _g25.regs;
					var _g29 = _g25.e;
					var _g33 = _g29.t;
					var _g32 = _g29.p;
					var _g31 = _g29.e;
					if(_g31._hx_index == 1) {
						var e6 = _g13;
						var v7 = _g31.v;
						var v8 = this.get(v7);
						writeTo.push(v8);
						this.check(e6,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v8) < 0) {
							isAffected.push(v8);
						}
					} else {
						var f2 = $bind(this,this.check);
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e7) {
							f2(e7,writeTo3,isAffected3);
						});
					}
					break;
				default:
					var f3 = $bind(this,this.check);
					var writeTo4 = writeTo;
					var isAffected4 = isAffected;
					hxsl_Tools.iter(e,function(e8) {
						f3(e8,writeTo4,isAffected4);
					});
				}
				break;
			default:
				var f4 = $bind(this,this.check);
				var writeTo5 = writeTo;
				var isAffected5 = isAffected;
				hxsl_Tools.iter(e,function(e9) {
					f4(e9,writeTo5,isAffected5);
				});
			}
			break;
		case 7:
			var init = _g.init;
			var v9 = _g.v;
			if(init != null) {
				writeTo.push(this.get(v9));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var f5 = $bind(this,this.check);
				var writeTo6 = writeTo;
				var isAffected6 = isAffected;
				hxsl_Tools.iter(e,function(e10) {
					f5(e10,writeTo6,isAffected6);
				});
			}
			break;
		case 8:
			var _g36 = _g.args;
			var _g35 = _g.e;
			var _g39 = _g35.t;
			var _g38 = _g35.p;
			var _g37 = _g35.e;
			if(_g37._hx_index == 2) {
				switch(_g37.g._hx_index) {
				case 63:
					if(_g36.length == 3) {
						var _g56 = _g36[2];
						var _g54 = _g36[0];
						var _g59 = _g54.t;
						var _g58 = _g54.p;
						var _g57 = _g54.e;
						if(_g57._hx_index == 1) {
							var _g63 = _g56.t;
							var _g62 = _g56.p;
							var _g61 = _g56.e;
							if(_g61._hx_index == 0) {
								var _g64 = _g61.c;
								if(_g64._hx_index == 2) {
									var c = _g57.v;
									var uv = _g36[1];
									var cid = _g64.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var f6 = $bind(this,this.check);
									var writeTo7 = writeTo;
									var isAffected7 = isAffected;
									hxsl_Tools.iter(e,function(e11) {
										f6(e11,writeTo7,isAffected7);
									});
								}
							} else {
								var f7 = $bind(this,this.check);
								var writeTo8 = writeTo;
								var isAffected8 = isAffected;
								hxsl_Tools.iter(e,function(e12) {
									f7(e12,writeTo8,isAffected8);
								});
							}
						} else {
							var f8 = $bind(this,this.check);
							var writeTo9 = writeTo;
							var isAffected9 = isAffected;
							hxsl_Tools.iter(e,function(e13) {
								f8(e13,writeTo9,isAffected9);
							});
						}
					} else {
						var f9 = $bind(this,this.check);
						var writeTo10 = writeTo;
						var isAffected10 = isAffected;
						hxsl_Tools.iter(e,function(e14) {
							f9(e14,writeTo10,isAffected10);
						});
					}
					break;
				case 64:
					if(_g36.length == 4) {
						var _g44 = _g36[3];
						var _g41 = _g36[0];
						var _g47 = _g41.t;
						var _g46 = _g41.p;
						var _g45 = _g41.e;
						if(_g45._hx_index == 1) {
							var _g51 = _g44.t;
							var _g50 = _g44.p;
							var _g49 = _g44.e;
							if(_g49._hx_index == 0) {
								var _g52 = _g49.c;
								if(_g52._hx_index == 2) {
									var c1 = _g45.v;
									var uv1 = _g36[1];
									var lod = _g36[2];
									var cid1 = _g52.v;
									this.check(uv1,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid1] == null) {
										this.channelVars[cid1] = c1;
										this.link(c1,writeTo);
									} else {
										this.link(this.channelVars[cid1],writeTo);
									}
								} else {
									var f10 = $bind(this,this.check);
									var writeTo11 = writeTo;
									var isAffected11 = isAffected;
									hxsl_Tools.iter(e,function(e15) {
										f10(e15,writeTo11,isAffected11);
									});
								}
							} else {
								var f11 = $bind(this,this.check);
								var writeTo12 = writeTo;
								var isAffected12 = isAffected;
								hxsl_Tools.iter(e,function(e16) {
									f11(e16,writeTo12,isAffected12);
								});
							}
						} else {
							var f12 = $bind(this,this.check);
							var writeTo13 = writeTo;
							var isAffected13 = isAffected;
							hxsl_Tools.iter(e,function(e17) {
								f12(e17,writeTo13,isAffected13);
							});
						}
					} else {
						var f13 = $bind(this,this.check);
						var writeTo14 = writeTo;
						var isAffected14 = isAffected;
						hxsl_Tools.iter(e,function(e18) {
							f13(e18,writeTo14,isAffected14);
						});
					}
					break;
				default:
					var f14 = $bind(this,this.check);
					var writeTo15 = writeTo;
					var isAffected15 = isAffected;
					hxsl_Tools.iter(e,function(e19) {
						f14(e19,writeTo15,isAffected15);
					});
				}
			} else {
				var f15 = $bind(this,this.check);
				var writeTo16 = writeTo;
				var isAffected16 = isAffected;
				hxsl_Tools.iter(e,function(e20) {
					f15(e20,writeTo16,isAffected16);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var e21 = _g.econd;
			var affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			var len = affect.length;
			var _g2 = 0;
			while(_g2 < writeTo.length) {
				var v10 = writeTo[_g2];
				++_g2;
				if(affect.indexOf(v10) < 0) {
					affect.push(v10);
				}
			}
			this.check(e21,affect,isAffected);
			var _g17 = 0;
			var _g23 = len;
			while(_g17 < _g23) {
				var i1 = _g17++;
				var v11 = affect[i1];
				if(isAffected.indexOf(v11) < 0) {
					isAffected.push(v11);
				}
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v12 = _g.v;
			var affect1 = [];
			this.check(loop,writeTo,affect1);
			this.check(it,affect1,isAffected);
			var _g3 = 0;
			while(_g3 < affect1.length) {
				var v13 = affect1[_g3];
				++_g3;
				if(isAffected.indexOf(v13) < 0) {
					isAffected.push(v13);
				}
			}
			break;
		default:
			var f16 = $bind(this,this.check);
			var writeTo17 = writeTo;
			var isAffected17 = isAffected;
			hxsl_Tools.iter(e,function(e22) {
				f16(e22,writeTo17,isAffected17);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var _g3 = _g.eelse;
			var _g2 = _g.eif;
			var cond = _g.econd;
			var writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _g12 = _g.e2;
			var _g11 = _g.e1;
			var _g10 = _g.op;
			switch(_g10._hx_index) {
			case 4:
				var _g15 = _g11.t;
				var _g14 = _g11.p;
				var _g13 = _g11.e;
				switch(_g13._hx_index) {
				case 1:
					var v = _g13.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e3) {
							return _gthis.mapExpr(e3,true);
						});
					}
					break;
				case 9:
					var _g18 = _g13.regs;
					var _g17 = _g13.e;
					var _g21 = _g17.t;
					var _g20 = _g17.p;
					var _g19 = _g17.e;
					if(_g19._hx_index == 1) {
						var v1 = _g19.v;
						if(!this.get(v1).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e4) {
								return _gthis.mapExpr(e4,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e5) {
							return _gthis.mapExpr(e5,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e6) {
						return _gthis.mapExpr(e6,true);
					});
				}
				break;
			case 20:
				var _g23 = _g10.op;
				var _g26 = _g11.t;
				var _g25 = _g11.p;
				var _g24 = _g11.e;
				switch(_g24._hx_index) {
				case 1:
					var v2 = _g24.v;
					if(!this.get(v2).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e7) {
							return _gthis.mapExpr(e7,true);
						});
					}
					break;
				case 9:
					var _g29 = _g24.regs;
					var _g28 = _g24.e;
					var _g32 = _g28.t;
					var _g31 = _g28.p;
					var _g30 = _g28.e;
					if(_g30._hx_index == 1) {
						var v3 = _g30.v;
						if(!this.get(v3).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e8) {
								return _gthis.mapExpr(e8,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e9) {
							return _gthis.mapExpr(e9,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e10) {
						return _gthis.mapExpr(e10,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e11) {
					return _gthis.mapExpr(e11,true);
				});
			}
			break;
		case 7:
			var _g6 = _g.init;
			var v4 = _g.v;
			if(!this.get(v4).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e12) {
					return _gthis.mapExpr(e12,true);
				});
			}
			break;
		case 8:
			var _g35 = _g.args;
			var _g34 = _g.e;
			var _g38 = _g34.t;
			var _g37 = _g34.p;
			var _g36 = _g34.e;
			if(_g36._hx_index == 2) {
				switch(_g36.g._hx_index) {
				case 63:
					if(_g35.length == 3) {
						var _g59 = _g35[2];
						var _g57 = _g35[0];
						var _g62 = _g59.t;
						var _g61 = _g59.p;
						var _g60 = _g59.e;
						if(_g60._hx_index == 0) {
							var _g63 = _g60.c;
							if(_g63._hx_index == 2) {
								var uv = _g35[1];
								var cid = _g63.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e13) {
									return _gthis.mapExpr(e13,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e14) {
								return _gthis.mapExpr(e14,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e15) {
							return _gthis.mapExpr(e15,true);
						});
					}
					break;
				case 64:
					if(_g35.length == 4) {
						var _g43 = _g35[3];
						var _g40 = _g35[0];
						var _g46 = _g43.t;
						var _g45 = _g43.p;
						var _g44 = _g43.e;
						if(_g44._hx_index == 0) {
							var _g47 = _g44.c;
							if(_g47._hx_index == 2) {
								var uv1 = _g35[1];
								var lod = _g35[2];
								var cid1 = _g47.v;
								var c1 = this.channelVars[cid1];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c1), t : c1.type, p : e.p},this.mapExpr(uv1,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e16) {
									return _gthis.mapExpr(e16,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e17) {
								return _gthis.mapExpr(e17,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e18) {
							return _gthis.mapExpr(e18,true);
						});
					}
					break;
				case 65:
					if(_g35.length == 3) {
						var _g51 = _g35[2];
						var _g49 = _g35[0];
						var _g54 = _g51.t;
						var _g53 = _g51.p;
						var _g52 = _g51.e;
						if(_g52._hx_index == 0) {
							var _g55 = _g52.c;
							if(_g55._hx_index == 2) {
								var pos = _g35[1];
								var cid2 = _g55.v;
								var c2 = this.channelVars[cid2];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c2), t : c2.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e19) {
									return _gthis.mapExpr(e19,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e20) {
								return _gthis.mapExpr(e20,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e21) {
							return _gthis.mapExpr(e21,true);
						});
					}
					break;
				case 66:
					if(_g35.length == 4) {
						var _g68 = _g35[3];
						var _g65 = _g35[0];
						var _g71 = _g68.t;
						var _g70 = _g68.p;
						var _g69 = _g68.e;
						if(_g69._hx_index == 0) {
							var _g72 = _g69.c;
							if(_g72._hx_index == 2) {
								var pos1 = _g35[1];
								var lod1 = _g35[2];
								var cid3 = _g72.v;
								var c3 = this.channelVars[cid3];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c3), t : c3.type, p : e.p},this.mapExpr(pos1,true),this.mapExpr(lod1,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e22) {
									return _gthis.mapExpr(e22,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e23) {
								return _gthis.mapExpr(e23,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e24) {
							return _gthis.mapExpr(e24,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e25) {
						return _gthis.mapExpr(e25,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e26) {
					return _gthis.mapExpr(e26,true);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var econd = _g.eif;
			var e27 = _g.econd;
			var e28 = this.mapExpr(e27,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e28.t, p : e28.p};
			}
			return { e : hxsl_TExprDef.TIf(e28,econd1,eelse1), p : e28.p, t : e28.t};
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v5 = _g.v;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v5,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e29) {
				return _gthis.mapExpr(e29,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		var _g = v.type;
		var v21;
		if(_g._hx_index == 17) {
			var _g1 = _g.size;
			v21 = true;
		} else {
			v21 = false;
		}
		v2 = { id : v21 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g2 = v2.type;
		switch(_g2._hx_index) {
		case 13:
			var vl = _g2.vl;
			var _g21 = [];
			var _g3 = 0;
			while(_g3 < vl.length) {
				var v1 = vl[_g3];
				++_g3;
				_g21.push(this.mapVar(v1));
			}
			v2.type = hxsl_Type.TStruct(_g21);
			break;
		case 15:
			var _g8 = _g2.size;
			if(_g8._hx_index == 1) {
				var t = _g2.t;
				var vs = _g8.v;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g22 = c.c;
						if(_g22._hx_index == 2) {
							var v3 = _g22.v;
							var _g23 = v2.type;
							var tmp;
							if(_g23._hx_index == 15) {
								var _g4 = _g23.size;
								var _g31 = _g23.t;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v3)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v3));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g24 = v2.type;
					var tmp1;
					if(_g24._hx_index == 15) {
						var _g41 = _g24.size;
						var _g32 = _g24.t;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					v2.type = tmp1 ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		case 16:
			var _g5 = _g2.size;
			if(_g5._hx_index == 1) {
				var t1 = _g2.t;
				var vs1 = _g5.v;
				var c1 = this.constants.h[vs1.id];
				if(c1 != null) {
					if(c1 == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
					} else if(c1._hx_index == 0) {
						var _g25 = c1.c;
						if(_g25._hx_index == 2) {
							var v4 = _g25.v;
							var _g26 = v2.type;
							var tmp2;
							if(_g26._hx_index == 15) {
								var _g42 = _g26.size;
								var _g33 = _g26.t;
								tmp2 = true;
							} else {
								tmp2 = false;
							}
							v2.type = tmp2 ? hxsl_Type.TArray(t1,hxsl_SizeDecl.SConst(v4)) : hxsl_Type.TBuffer(t1,hxsl_SizeDecl.SConst(v4));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
					}
				} else {
					var vs21 = this.mapVar(vs1);
					var _g27 = v2.type;
					var tmp3;
					if(_g27._hx_index == 15) {
						var _g43 = _g27.size;
						var _g34 = _g27.t;
						tmp3 = true;
					} else {
						tmp3 = false;
					}
					v2.type = tmp3 ? hxsl_Type.TArray(t1,hxsl_SizeDecl.SVar(vs21)) : hxsl_Type.TBuffer(t1,hxsl_SizeDecl.SVar(vs21));
				}
			}
			break;
		default:
		}
		return v2;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g11 = 0;
			var _g21 = f.args;
			while(_g11 < _g21.length) {
				var a = _g21[_g11];
				++_g11;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(!this.inlineCalls || f.kind != hxsl_FunctionKind.Helper) {
				funs.push(f21);
			}
			this.funMap.set(f21.ref,f);
		}
		var _g22 = 0;
		var _g3 = funs.length;
		while(_g22 < _g3) {
			var i = _g22++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g4 = [];
		var _g5 = 0;
		var _g6 = s.vars;
		while(_g5 < _g6.length) {
			var v = _g6[_g5];
			++_g5;
			_g4.push(this.mapVar(v));
		}
		return { name : s1, vars : _g4, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g._hx_index == 12) {
			var _g1 = _g.e;
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var econd = _g1.econd;
							var eif = _g1.eif;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var eelse = _g.eelse;
			var eif1 = _g.eif;
			var cond = _g.econd;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif2 = this.handleReturn(eif1,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif2,this.handleReturn(eelse,isFinal)), t : eif2.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v2 = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v2 == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v2,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				var _g = args[0];
				var _g3 = _g.t;
				var _g2 = _g.p;
				var _g1 = _g.e;
				if(_g1._hx_index == 0) {
					var _g4 = _g1.c;
					if(_g4._hx_index == 2) {
						var i = _g4.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			var i1;
			var _g5 = args[0].e;
			if(_g5._hx_index == 0) {
				var _g11 = _g5.c;
				if(_g11._hx_index == 2) {
					var i2 = _g11.v;
					i1 = i2;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw new js__$Boot_HaxeError("assert");
			}
			var channel = oldArgs[0];
			var _g31 = channel.e;
			var channel1;
			if(_g31._hx_index == 1) {
				var v = _g31.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g51 = channel.t;
			if(_g51._hx_index == 17) {
				var i3 = _g51.size;
				count = i3;
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i1 & 7,null);
			var targs = [channel];
			var _g7 = 1;
			var _g8 = args.length;
			while(_g7 < _g8) {
				var i4 = _g7++;
				targs.push(args[i4]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i1 >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			var args1 = args;
			var _g6 = 0;
			while(_g6 < args1.length) {
				var a = args1[_g6];
				++_g6;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var _g26 = _g.c;
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			var _g4 = _g.g;
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var _g11 = _g1.c;
				d = e2.e;
			} else {
				d = hxsl_TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			var el = _g.el;
			var out = [];
			var last = el.length - 1;
			var _g2 = 0;
			var _g12 = el.length;
			while(_g2 < _g12) {
				var i = _g2++;
				var isVal1 = isVal && i == last;
				var e3 = this.evalExpr(el[i],isVal1);
				var _g3 = e3.e;
				switch(_g3._hx_index) {
				case 0:
					var _g21 = _g3.c;
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				case 1:
					var _g13 = _g3.v;
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				default:
					out.push(e3);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			var e12 = this.evalExpr(e11);
			var e22 = this.evalExpr(e21);
			switch(op._hx_index) {
			case 0:
				var _g5 = e22.e;
				var _g14 = e12.e;
				if(_g14._hx_index == 0) {
					var _g22 = _g14.c;
					switch(_g22._hx_index) {
					case 2:
						if(_g5._hx_index == 0) {
							var _g7 = _g5.c;
							if(_g7._hx_index == 2) {
								var a = _g22.v;
								var b = _g7.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g5._hx_index == 0) {
							var _g41 = _g5.c;
							if(_g41._hx_index == 3) {
								var a1 = _g22.v;
								var b1 = _g41.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a1 + b1));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 1:
				var _g6 = e22.e;
				var _g15 = e12.e;
				if(_g15._hx_index == 0) {
					var _g23 = _g15.c;
					switch(_g23._hx_index) {
					case 2:
						if(_g6._hx_index == 0) {
							var _g71 = _g6.c;
							if(_g71._hx_index == 2) {
								var a2 = _g23.v;
								var b2 = _g71.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a2 * b2 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g6._hx_index == 0) {
							var _g42 = _g6.c;
							if(_g42._hx_index == 3) {
								var a3 = _g23.v;
								var b3 = _g42.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a3 * b3));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 2:
				var _g8 = e22.e;
				var _g16 = e12.e;
				if(_g16._hx_index == 0) {
					var _g24 = _g16.c;
					switch(_g24._hx_index) {
					case 2:
						if(_g8._hx_index == 0) {
							var _g72 = _g8.c;
							if(_g72._hx_index == 2) {
								var a4 = _g24.v;
								var b4 = _g72.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a4 / b4 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g8._hx_index == 0) {
							var _g43 = _g8.c;
							if(_g43._hx_index == 3) {
								var a5 = _g24.v;
								var b5 = _g43.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a5 / b5));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 3:
				var _g9 = e22.e;
				var _g17 = e12.e;
				if(_g17._hx_index == 0) {
					var _g25 = _g17.c;
					switch(_g25._hx_index) {
					case 2:
						if(_g9._hx_index == 0) {
							var _g73 = _g9.c;
							if(_g73._hx_index == 2) {
								var a6 = _g25.v;
								var b6 = _g73.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a6 - b6 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g9._hx_index == 0) {
							var _g44 = _g9.c;
							if(_g44._hx_index == 3) {
								var a7 = _g25.v;
								var b7 = _g44.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a7 - b7));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 5:
				var _g10 = e22.e;
				var _g18 = e12.e;
				if(_g18._hx_index == 0) {
					var _g27 = _g18.c;
					switch(_g27._hx_index) {
					case 0:
						d = _g10._hx_index == 0 ? _g10.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g91 = _g27.b;
						if(_g10._hx_index == 0) {
							var _g101 = _g10.c;
							switch(_g101._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a8 = _g91;
								var b8 = _g101.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a8 == b8 ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g121 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g131 = _g10.c;
							switch(_g131._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a9 = _g121;
								var b9 = _g131.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a9 - b9 == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g61 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g74 = _g10.c;
							switch(_g74._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a10 = _g61;
								var b10 = _g74.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a10 > b10 ? 1 : a10 == b10 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g31 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g45 = _g10.c;
							switch(_g45._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a11 = _g31;
								var b11 = _g45.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a11 > b11 ? 1 : a11 == b11 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 6:
				var _g19 = e22.e;
				var _g110 = e12.e;
				if(_g110._hx_index == 0) {
					var _g28 = _g110.c;
					switch(_g28._hx_index) {
					case 0:
						d = _g19._hx_index == 0 ? _g19.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g92 = _g28.b;
						if(_g19._hx_index == 0) {
							var _g102 = _g19.c;
							switch(_g102._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a12 = _g92;
								var b12 = _g102.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a12 == b12 ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g122 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g132 = _g19.c;
							switch(_g132._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a13 = _g122;
								var b13 = _g132.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a13 - b13 != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g62 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g75 = _g19.c;
							switch(_g75._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a14 = _g62;
								var b14 = _g75.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a14 > b14 ? 1 : a14 == b14 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g32 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g46 = _g19.c;
							switch(_g46._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a15 = _g32;
								var b15 = _g46.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a15 > b15 ? 1 : a15 == b15 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 7:
				var _g20 = e22.e;
				var _g111 = e12.e;
				if(_g111._hx_index == 0) {
					var _g29 = _g111.c;
					switch(_g29._hx_index) {
					case 0:
						d = _g20._hx_index == 0 ? _g20.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g93 = _g29.b;
						if(_g20._hx_index == 0) {
							var _g103 = _g20.c;
							switch(_g103._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a16 = _g93;
								var b16 = _g103.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a16 == b16 ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g123 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g133 = _g20.c;
							switch(_g133._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a17 = _g123;
								var b17 = _g133.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a17 - b17 > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g63 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g76 = _g20.c;
							switch(_g76._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a18 = _g63;
								var b18 = _g76.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a18 > b18 ? 1 : a18 == b18 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g33 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g47 = _g20.c;
							switch(_g47._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a19 = _g33;
								var b19 = _g47.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a19 > b19 ? 1 : a19 == b19 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 8:
				var _g30 = e22.e;
				var _g112 = e12.e;
				if(_g112._hx_index == 0) {
					var _g210 = _g112.c;
					switch(_g210._hx_index) {
					case 0:
						d = _g30._hx_index == 0 ? _g30.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g94 = _g210.b;
						if(_g30._hx_index == 0) {
							var _g104 = _g30.c;
							switch(_g104._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a20 = _g94;
								var b20 = _g104.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a20 == b20 ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g124 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g134 = _g30.c;
							switch(_g134._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a21 = _g124;
								var b21 = _g134.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a21 - b21 >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g64 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g77 = _g30.c;
							switch(_g77._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a22 = _g64;
								var b22 = _g77.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a22 > b22 ? 1 : a22 == b22 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g34 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g48 = _g30.c;
							switch(_g48._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a23 = _g34;
								var b23 = _g48.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a23 > b23 ? 1 : a23 == b23 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 9:
				var _g35 = e22.e;
				var _g113 = e12.e;
				if(_g113._hx_index == 0) {
					var _g211 = _g113.c;
					switch(_g211._hx_index) {
					case 0:
						d = _g35._hx_index == 0 ? _g35.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g95 = _g211.b;
						if(_g35._hx_index == 0) {
							var _g105 = _g35.c;
							switch(_g105._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a24 = _g95;
								var b24 = _g105.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a24 == b24 ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g125 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g135 = _g35.c;
							switch(_g135._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a25 = _g125;
								var b25 = _g135.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a25 - b25 < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g65 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g78 = _g35.c;
							switch(_g78._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a26 = _g65;
								var b26 = _g78.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a26 > b26 ? 1 : a26 == b26 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g36 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g49 = _g35.c;
							switch(_g49._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a27 = _g36;
								var b27 = _g49.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a27 > b27 ? 1 : a27 == b27 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 10:
				var _g37 = e22.e;
				var _g114 = e12.e;
				if(_g114._hx_index == 0) {
					var _g212 = _g114.c;
					switch(_g212._hx_index) {
					case 0:
						d = _g37._hx_index == 0 ? _g37.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g96 = _g212.b;
						if(_g37._hx_index == 0) {
							var _g106 = _g37.c;
							switch(_g106._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a28 = _g96;
								var b28 = _g106.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a28 == b28 ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g126 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g136 = _g37.c;
							switch(_g136._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a29 = _g126;
								var b29 = _g136.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a29 - b29 <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g66 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g79 = _g37.c;
							switch(_g79._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a30 = _g66;
								var b30 = _g79.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a30 > b30 ? 1 : a30 == b30 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g38 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g410 = _g37.c;
							switch(_g410._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a31 = _g38;
								var b31 = _g410.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a31 > b31 ? 1 : a31 == b31 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 11:
				var _g39 = e22.e;
				var _g115 = e12.e;
				if(_g115._hx_index == 0) {
					var _g213 = _g115.c;
					if(_g213._hx_index == 2) {
						if(_g39._hx_index == 0) {
							var _g411 = _g39.c;
							if(_g411._hx_index == 2) {
								var a32 = _g213.v;
								var b32 = _g411.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a32 & b32));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 12:
				var _g40 = e22.e;
				var _g116 = e12.e;
				if(_g116._hx_index == 0) {
					var _g214 = _g116.c;
					if(_g214._hx_index == 2) {
						if(_g40._hx_index == 0) {
							var _g412 = _g40.c;
							if(_g412._hx_index == 2) {
								var a33 = _g214.v;
								var b33 = _g412.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a33 | b33));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 13:
				var _g50 = e22.e;
				var _g117 = e12.e;
				if(_g117._hx_index == 0) {
					var _g215 = _g117.c;
					if(_g215._hx_index == 2) {
						if(_g50._hx_index == 0) {
							var _g413 = _g50.c;
							if(_g413._hx_index == 2) {
								var a34 = _g215.v;
								var b34 = _g413.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a34 ^ b34));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 14:
				var _g51 = e22.e;
				var _g118 = e12.e;
				if(_g118._hx_index == 0) {
					var _g216 = _g118.c;
					if(_g216._hx_index == 1) {
						var _g310 = _g216.b;
						if(_g51._hx_index == 0) {
							var _g414 = _g51.c;
							if(_g414._hx_index == 1) {
								var a35 = _g310;
								var b35 = _g414.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a35 && b35));
							} else {
								var a36 = _g310;
								d = a36 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a36)) : e22.e;
							}
						} else {
							var a37 = _g310;
							d = a37 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a37)) : e22.e;
						}
					} else if(_g51._hx_index == 0) {
						var _g67 = _g51.c;
						if(_g67._hx_index == 1) {
							var a38 = _g67.b;
							d = a38 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a38)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g51._hx_index == 0) {
					var _g81 = _g51.c;
					if(_g81._hx_index == 1) {
						var a39 = _g81.b;
						d = a39 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a39)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 15:
				var _g52 = e22.e;
				var _g119 = e12.e;
				if(_g119._hx_index == 0) {
					var _g217 = _g119.c;
					if(_g217._hx_index == 1) {
						var _g311 = _g217.b;
						if(_g52._hx_index == 0) {
							var _g415 = _g52.c;
							if(_g415._hx_index == 1) {
								var a40 = _g311;
								var b36 = _g415.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a40 || b36));
							} else {
								var a41 = _g311;
								d = a41 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a41)) : e22.e;
							}
						} else {
							var a42 = _g311;
							d = a42 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a42)) : e22.e;
						}
					} else if(_g52._hx_index == 0) {
						var _g68 = _g52.c;
						if(_g68._hx_index == 1) {
							var a43 = _g68.b;
							d = a43 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a43)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g52._hx_index == 0) {
					var _g82 = _g52.c;
					if(_g82._hx_index == 1) {
						var a44 = _g82.b;
						d = a44 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a44)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 16:
				var _g53 = e22.e;
				var _g120 = e12.e;
				if(_g120._hx_index == 0) {
					var _g218 = _g120.c;
					if(_g218._hx_index == 2) {
						if(_g53._hx_index == 0) {
							var _g416 = _g53.c;
							if(_g416._hx_index == 2) {
								var a45 = _g218.v;
								var b37 = _g416.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a45 << b37));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 17:
				var _g54 = e22.e;
				var _g127 = e12.e;
				if(_g127._hx_index == 0) {
					var _g219 = _g127.c;
					if(_g219._hx_index == 2) {
						if(_g54._hx_index == 0) {
							var _g417 = _g54.c;
							if(_g417._hx_index == 2) {
								var a46 = _g219.v;
								var b38 = _g417.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a46 >> b38));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 18:
				var _g55 = e22.e;
				var _g128 = e12.e;
				if(_g128._hx_index == 0) {
					var _g220 = _g128.c;
					if(_g220._hx_index == 2) {
						if(_g55._hx_index == 0) {
							var _g418 = _g55.c;
							if(_g418._hx_index == 2) {
								var a47 = _g220.v;
								var b39 = _g418.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a47 >>> b39));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 19:
				var _g56 = e22.e;
				var _g129 = e12.e;
				if(_g129._hx_index == 0) {
					var _g221 = _g129.c;
					switch(_g221._hx_index) {
					case 2:
						if(_g56._hx_index == 0) {
							var _g710 = _g56.c;
							if(_g710._hx_index == 2) {
								var a48 = _g221.v;
								var b40 = _g710.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a48 % b40 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g56._hx_index == 0) {
							var _g419 = _g56.c;
							if(_g419._hx_index == 3) {
								var a49 = _g221.v;
								var b41 = _g419.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a49 % b41));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 20:
				var _g57 = op.op;
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 22:
				throw new js__$Boot_HaxeError("assert");
			case 23:
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 6:
			var e4 = _g.e1;
			var op1 = _g.op;
			var e5 = this.evalExpr(e4);
			var _g58 = e5.e;
			if(_g58._hx_index == 0) {
				var c1 = _g58.c;
				switch(op1._hx_index) {
				case 2:
					if(c1._hx_index == 1) {
						var b42 = c1.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b42));
					} else {
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				case 3:
					switch(c1._hx_index) {
					case 2:
						var i1 = c1.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i1));
						break;
					case 3:
						var f = c1.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op1,e5);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op1,e5);
			}
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v1),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var eargs = _g.args;
			var c2 = _g.e;
			var c3 = this.evalExpr(c2);
			var _g59 = [];
			var _g130 = 0;
			while(_g130 < eargs.length) {
				var a50 = eargs[_g130];
				++_g130;
				_g59.push(this.evalExpr(a50));
			}
			var args = _g59;
			var _g222 = c3.e;
			switch(_g222._hx_index) {
			case 1:
				if(!this.inlineCalls) {
					d = hxsl_TExprDef.TCall(c3,args);
				} else {
					var v3 = _g222.v;
					if(this.funMap.h.__keys__[v3.__id__] != null) {
						var f1 = this.funMap.h[v3.__id__];
						var outExprs = [];
						var undo = [];
						var _g223 = 0;
						var _g312 = f1.args.length;
						while(_g223 < _g312) {
							var i2 = _g223++;
							var v4 = [f1.args[i2]];
							var e6 = args[i2];
							var _g224 = e6.e;
							switch(_g224._hx_index) {
							case 0:
								var _g107 = _g224.c;
								var old = [this.constants.h[v4[0].id]];
								undo.push((function(old1,v5) {
									return function() {
										if(old1[0] == null) {
											_gthis.constants.remove(v5[0].id);
										} else {
											_gthis.constants.h[v5[0].id] = old1[0];
										}
									};
								})(old,v4));
								this.constants.h[v4[0].id] = e6.e;
								break;
							case 1:
								var _g313 = _g224.v;
								var _g97 = _g313.type;
								var _g83 = _g313.qualifiers;
								var _g711 = _g313.parent;
								var _g69 = _g313.name;
								var _g420 = _g313.id;
								switch(_g313.kind._hx_index) {
								case 0:case 1:case 2:
									var old2 = [this.constants.h[v4[0].id]];
									undo.push((function(old3,v6) {
										return function() {
											if(old3[0] == null) {
												_gthis.constants.remove(v6[0].id);
											} else {
												_gthis.constants.h[v6[0].id] = old3[0];
											}
										};
									})(old2,v4));
									this.constants.h[v4[0].id] = e6.e;
									break;
								default:
									var old4 = [this.varMap.h[v4[0].__id__]];
									if(old4[0] == null) {
										undo.push((function(v7) {
											return function() {
												_gthis.varMap.remove(v7[0]);
											};
										})(v4));
									} else {
										this.varMap.remove(v4[0]);
										undo.push((function(old5,v8) {
											return function() {
												_gthis.varMap.set(v8[0],old5[0]);
											};
										})(old4,v4));
									}
									var v21 = this.mapVar(v4[0]);
									outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e6), t : hxsl_Type.TVoid, p : e6.p});
								}
								break;
							default:
								var old6 = [this.varMap.h[v4[0].__id__]];
								if(old6[0] == null) {
									undo.push((function(v9) {
										return function() {
											_gthis.varMap.remove(v9[0]);
										};
									})(v4));
								} else {
									this.varMap.remove(v4[0]);
									undo.push((function(old7,v10) {
										return function() {
											_gthis.varMap.set(v10[0],old7[0]);
										};
									})(old6,v4));
								}
								var v22 = this.mapVar(v4[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v22,e6), t : hxsl_Type.TVoid, p : e6.p});
							}
						}
						var e7 = this.handleReturn(this.evalExpr(f1.expr,false),true);
						var _g421 = 0;
						while(_g421 < undo.length) {
							var u = undo[_g421];
							++_g421;
							u();
						}
						var _g510 = e7.e;
						if(_g510._hx_index == 4) {
							var el1 = _g510.el;
							var _g511 = 0;
							while(_g511 < el1.length) {
								var e8 = el1[_g511];
								++_g511;
								outExprs.push(e8);
							}
						} else {
							outExprs.push(e7);
						}
						d = hxsl_TExprDef.TBlock(outExprs);
					} else {
						d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
					}
				}
				break;
			case 2:
				var g = _g222.g;
				var v11 = this.evalCall(g,args,eargs,e.p);
				d = v11 != null ? v11 : hxsl_TExprDef.TCall(c3,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
			}
			break;
		case 9:
			var r = _g.regs;
			var e9 = _g.e;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e9),r.slice());
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			var econd1 = this.evalExpr(econd);
			var _g60 = econd1.e;
			if(_g60._hx_index == 0) {
				var _g137 = _g60.c;
				if(_g137._hx_index == 1) {
					var b43 = _g137.b;
					d = b43 ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g70 = eelse.e;
						if(_g70._hx_index == 0 && _g70.c._hx_index == 0) {
							eelse = null;
						}
					}
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g80 = eelse.e;
					if(_g80._hx_index == 0 && _g80.c._hx_index == 0) {
						eelse = null;
					}
				}
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e10 = _g.e;
			d = hxsl_TExprDef.TReturn(e10 == null ? null : this.evalExpr(e10));
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v12 = _g.v;
			var v23 = this.mapVar(v12);
			var it1 = this.evalExpr(it);
			var e13;
			var _g84 = it1.e;
			if(_g84._hx_index == 5) {
				var _g314 = _g84.e2;
				var _g225 = _g84.e1;
				if(_g84.op._hx_index == 21) {
					var _g610 = _g225.t;
					var _g512 = _g225.p;
					var _g422 = _g225.e;
					if(_g422._hx_index == 0) {
						var _g712 = _g422.c;
						if(_g712._hx_index == 2) {
							var _g1110 = _g314.t;
							var _g108 = _g314.p;
							var _g98 = _g314.e;
							if(_g98._hx_index == 0) {
								var _g1210 = _g98.c;
								if(_g1210._hx_index == 2) {
									var start = _g712.v;
									var len = _g1210.v;
									if(this.unrollLoops) {
										var out1 = [];
										var _g85 = start;
										var _g138 = len;
										while(_g85 < _g138) {
											var i3 = _g85++;
											this.constants.h[v12.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i3));
											out1.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v12.id);
										e13 = hxsl_TExprDef.TBlock(out1);
									} else {
										e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
									}
								} else {
									e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
								}
							} else {
								e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
							}
						} else {
							e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
						}
					} else {
						e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
					}
				} else {
					e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
				}
			} else {
				e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
			}
			this.varMap.remove(v12);
			d = e13;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e23 = _g.index;
			var e14 = _g.e;
			var e15 = this.evalExpr(e14);
			var e24 = this.evalExpr(e23);
			var _g86 = e24.e;
			var _g139 = e15.e;
			if(_g139._hx_index == 17) {
				if(_g86._hx_index == 0) {
					var _g315 = _g86.c;
					if(_g315._hx_index == 2) {
						var el2 = _g139.el;
						var i4 = _g315.v;
						d = i4 >= 0 && i4 < el2.length ? el2[i4].e : hxsl_TExprDef.TArray(e15,e24);
					} else {
						d = hxsl_TExprDef.TArray(e15,e24);
					}
				} else {
					d = hxsl_TExprDef.TArray(e15,e24);
				}
			} else {
				d = hxsl_TExprDef.TArray(e15,e24);
			}
			break;
		case 17:
			var el3 = _g.el;
			var _g87 = [];
			var _g140 = 0;
			while(_g140 < el3.length) {
				var e16 = el3[_g140];
				++_g140;
				_g87.push(this.evalExpr(e16));
			}
			d = hxsl_TExprDef.TArrayDecl(_g87);
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e17 = _g.e;
			var e18 = this.evalExpr(e17);
			var _g88 = [];
			var _g141 = 0;
			while(_g141 < cases.length) {
				var c4 = cases[_g141];
				++_g141;
				var _g142 = [];
				var _g226 = 0;
				var _g316 = c4.values;
				while(_g226 < _g316.length) {
					var v13 = _g316[_g226];
					++_g226;
					_g142.push(this.evalExpr(v13));
				}
				_g88.push({ values : _g142, expr : this.evalExpr(c4.expr,isVal)});
			}
			var cases1 = _g88;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g227 = e18.e;
			if(_g227._hx_index == 0) {
				var c5 = _g227.c;
				if(c5._hx_index == 2) {
					var val = c5.v;
					var _g228 = 0;
					while(_g228 < cases1.length) {
						var c6 = cases1[_g228];
						++_g228;
						var _g229 = 0;
						var _g317 = c6.values;
						while(_g229 < _g317.length) {
							var v14 = _g317[_g229];
							++_g229;
							var _g230 = v14.e;
							if(_g230._hx_index == 0) {
								var cst = _g230.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c6.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c6.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw new js__$Boot_HaxeError("Unsupported switch constant " + Std.string(c5));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e18,cases1,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var normalWhile = _g.normalWhile;
			var loop1 = _g.loop;
			var cond = _g.e;
			var cond1 = this.evalExpr(cond);
			var loop2 = this.evalExpr(loop1,false);
			d = hxsl_TExprDef.TWhile(cond1,loop2,normalWhile);
			break;
		case 20:
			var e19 = _g.e;
			var args1 = _g.args;
			var name = _g.m;
			var e25;
			if(name == "unroll") {
				var old8 = this.unrollLoops;
				this.unrollLoops = true;
				e25 = this.evalExpr(e19,isVal);
				this.unrollLoops = false;
			} else {
				e25 = this.evalExpr(e19,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args1,e25);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__ : "hxsl.ARead", __constructs__ : ["AIndex","AOffset"]
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a","stride","delta"],$_)
};
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	flatten: function(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			var p = s.funs[0].expr.p;
			var gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			var s1 = s.name;
			var s2 = s.vars.slice();
			var _g = [];
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			var _g3 = 0;
			var _g4 = s.vars;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				var _g31 = v.type;
				if(_g31._hx_index == 9) {
					var _g41 = _g31.size;
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g5 = 0;
		var _g11 = s.vars;
		while(_g5 < _g11.length) {
			var v1 = _g11[_g5];
			++_g5;
			this.gatherVar(v1);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl_Type.TSampler2DArray));
		this.packBuffers(allVars);
		var _g21 = [];
		var _g32 = 0;
		var _g42 = s.funs;
		while(_g32 < _g42.length) {
			var f1 = _g42[_g32];
			++_g32;
			_g21.push(this.mapFun(f1,$bind(this,this.mapExpr)));
		}
		var funs = _g21;
		var _g51 = 0;
		while(_g51 < textures.length) {
			var t = textures[_g51];
			++_g51;
			t.pos >>= 2;
		}
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			e = a == null ? e : this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			break;
		case 16:
			var _g1 = _g.e;
			var _g5 = _g1.t;
			var _g3 = _g1.e;
			if(_g3._hx_index == 1) {
				var eindex = _g.index;
				var vp = _g1.p;
				var v1 = _g3.v;
				var _g2 = eindex.e;
				var e1;
				if(_g2._hx_index == 0) {
					var _g11 = _g2.c;
					if(_g11._hx_index == 2) {
						var _g21 = _g11.v;
						e1 = true;
					} else {
						e1 = false;
					}
				} else {
					e1 = false;
				}
				if(!e1) {
					var a1 = this.varMap.h[v1.__id__];
					if(a1 == null) {
						e = e;
					} else {
						var _g31 = v1.type;
						if(_g31._hx_index == 15) {
							var _g51 = _g31.size;
							var t = _g31.t;
							var stride = this.varSize(t,a1.t);
							if(stride == 0 || (stride & 3) != 0) {
								throw new js__$Boot_HaxeError(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride >>= 2;
							eindex = this.mapExpr(eindex);
							var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
							e = this.access(a1,t,vp,hxsl_ARead.AOffset(a1,stride,stride == 1 ? toInt : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,toInt,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mapConsts: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 2:
				var v = c.v;
				return this.allocConst(v,e.p);
			case 3:
				var v1 = c.v;
				return this.allocConst(v1,e.p);
			default:
				return e;
			}
			break;
		case 2:
			var g = _g.g;
			switch(g._hx_index) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 26:
				this.allocConst(2.0,e.p);
				this.allocConst(3.0,e.p);
				break;
			case 54:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 55:
				this.allocConsts([1,0.00392156862745098,1.5378700499807768e-005,6.0308629411010845e-008],e.p);
				break;
			case 56:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 57:
				this.allocConst(0.5,e.p);
				break;
			case 58:
				this.allocConsts([0.5,0.5],e.p);
				this.allocConsts([0.5,-0.5],e.p);
				break;
			case 59:
				this.allocConsts([2,-2],e.p);
				this.allocConsts([-1,1],e.p);
				break;
			default:
			}
			break;
		case 5:
			var _g12 = _g.e2;
			var _g11 = _g.e1;
			if(_g.op._hx_index == 1) {
				var _g14 = _g12.p;
				var _g13 = _g12.e;
				if(_g12.t._hx_index == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			var _g17 = _g.args;
			var _g16 = _g.e;
			var _g20 = _g16.t;
			var _g19 = _g16.p;
			var _g18 = _g16.e;
			if(_g18._hx_index == 2) {
				if(_g18.g._hx_index == 42) {
					if(_g17.length == 2) {
						var _g23 = _g17[1];
						var _g22 = _g17[0];
						var _g26 = _g22.t;
						var _g25 = _g22.p;
						var _g24 = _g22.e;
						if(_g24._hx_index == 1) {
							var _g27 = _g24.v;
							var _g33 = _g27.type;
							var _g32 = _g27.qualifiers;
							var _g31 = _g27.parent;
							var _g30 = _g27.name;
							var _g28 = _g27.id;
							switch(_g27.kind._hx_index) {
							case 0:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g59 = _g23.t;
											var _g58 = _g23.p;
											var _g57 = _g23.e;
											if(_g57._hx_index == 0) {
												var _g60 = _g57.c;
												if(_g60._hx_index == 2) {
													if(_g60.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g38 = _g23.t;
											var _g37 = _g23.p;
											var _g36 = _g23.e;
											if(_g36._hx_index == 0) {
												var _g39 = _g36.c;
												if(_g39._hx_index == 2) {
													if(_g39.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g52 = _g23.t;
											var _g51 = _g23.p;
											var _g50 = _g23.e;
											if(_g50._hx_index == 0) {
												var _g53 = _g50.c;
												if(_g53._hx_index == 2) {
													if(_g53.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g45 = _g23.t;
											var _g44 = _g23.p;
											var _g43 = _g23.e;
											if(_g43._hx_index == 0) {
												var _g46 = _g43.c;
												if(_g46._hx_index == 2) {
													if(_g46.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g2 = _g.index;
			var _g1 = _g.e;
			var _g5 = _g2.t;
			var _g4 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 0) {
				var _g6 = _g3.c;
				if(_g6._hx_index == 2) {
					var _g7 = _g6.v;
					var ea = _g1;
					var eindex = _g2;
					return { e : hxsl_TExprDef.TArray(this.mapConsts(ea),eindex), t : e.t, p : e.p};
				} else {
					var ea1 = _g1;
					var eindex1 = _g2;
					var _g8 = ea1.t;
					if(_g8._hx_index == 15) {
						var _g21 = _g8.size;
						var t = _g8.t;
						var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				var ea2 = _g1;
				var eindex2 = _g2;
				var _g9 = ea2.t;
				if(_g9._hx_index == 15) {
					var _g29 = _g9.size;
					var t1 = _g9.t;
					var stride1 = this.varSize(t1,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride1,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	,allocConst: function(v,p) {
		var index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	,allocConsts: function(va,p) {
		var _gthis = this;
		var pad = va.length - 1 & 3;
		var index = -1;
		var _g = 0;
		var _g1 = this.consts.length - (va.length - 1);
		while(_g < _g1) {
			var i = _g++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			var found = true;
			var _g2 = 0;
			var _g11 = va.length;
			while(_g2 < _g11) {
				var j = _g2++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			var _g21 = 0;
			while(_g21 < va.length) {
				var v = va[_g21];
				++_g21;
				this.consts.push(v);
			}
		}
		switch(va.length) {
		case 1:
			return { e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp1 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp2 = hxsl_Type.TFun([]);
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a1.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a2 = acc.a;
				var index = a2.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a2.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a3 = acc.a;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a3.g), t : a3.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a3.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a3.t), p : pos};
				break;
			case 1:
				var delta1 = acc.delta;
				var stride1 = acc.stride;
				var a4 = acc.a;
				var index1 = (a4.pos >> 2) + 1;
				var offset1 = index1 == 0 ? delta1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a4.g), t : a4.g.type, p : pos},offset1), t : hxsl_Type.TVec(4,a4.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc._hx_index) {
			case 0:
				var a5 = acc.a;
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a5.g), t : a5.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a5.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a5.t), p : pos};
				break;
			case 1:
				var delta2 = acc.delta;
				var stride2 = acc.stride;
				var a6 = acc.a;
				var index2 = (a6.pos >> 2) + 2;
				var offset2 = index2 == 0 ? delta2 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a6.g), t : a6.g.type, p : pos},offset2), t : hxsl_Type.TVec(4,a6.t), p : pos};
				break;
			}
			var tmp6;
			switch(acc._hx_index) {
			case 0:
				var a7 = acc.a;
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a7.g), t : a7.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a7.pos >> 2) + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a7.t), p : pos};
				break;
			case 1:
				var delta3 = acc.delta;
				var stride3 = acc.stride;
				var a8 = acc.a;
				var index3 = (a8.pos >> 2) + 3;
				var offset3 = index3 == 0 ? delta3 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta3,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a8.g), t : a8.g.type, p : pos},offset3), t : hxsl_Type.TVec(4,a8.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp1, t : tmp2, p : pos},[tmp3,tmp4,tmp5,tmp6]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp7 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp8 = hxsl_Type.TFun([]);
			var tmp9;
			switch(acc._hx_index) {
			case 0:
				var a9 = acc.a;
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a9.g), t : a9.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a9.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a9.t), p : pos};
				break;
			case 1:
				var delta4 = acc.delta;
				var stride4 = acc.stride;
				var a10 = acc.a;
				var index4 = a10.pos >> 2;
				var offset4 = index4 == 0 ? delta4 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta4,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index4)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a10.g), t : a10.g.type, p : pos},offset4), t : hxsl_Type.TVec(4,a10.t), p : pos};
				break;
			}
			var tmp10;
			switch(acc._hx_index) {
			case 0:
				var a11 = acc.a;
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a11.g), t : a11.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a11.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a11.t), p : pos};
				break;
			case 1:
				var delta5 = acc.delta;
				var stride5 = acc.stride;
				var a12 = acc.a;
				var index5 = (a12.pos >> 2) + 1;
				var offset5 = index5 == 0 ? delta5 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta5,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index5)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a12.g), t : a12.g.type, p : pos},offset5), t : hxsl_Type.TVec(4,a12.t), p : pos};
				break;
			}
			var tmp11;
			switch(acc._hx_index) {
			case 0:
				var a13 = acc.a;
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a13.g), t : a13.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a13.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a13.t), p : pos};
				break;
			case 1:
				var delta6 = acc.delta;
				var stride6 = acc.stride;
				var a14 = acc.a;
				var index6 = (a14.pos >> 2) + 2;
				var offset6 = index6 == 0 ? delta6 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta6,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index6)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a14.g), t : a14.g.type, p : pos},offset6), t : hxsl_Type.TVec(4,a14.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp7, t : tmp8, p : pos},[tmp9,tmp10,tmp11]), t : hxsl_Type.TMat3x4, p : pos};
		case 15:
			var _g1 = t.size;
			if(_g1._hx_index == 0) {
				var t1 = t.t;
				var len = _g1.v;
				var stride7 = a.size / len | 0;
				var _g = [];
				var _g11 = 0;
				var _g2 = len;
				while(_g11 < _g2) {
					var i = _g11++;
					var a15 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride7 * i,stride7);
					_g.push(this.access(a15,t1,pos,hxsl_ARead.AIndex(a15)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				if(hxsl_Tools.isSampler(t)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a16 = acc.a;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a16.g), t : a16.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a16.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a16.t), p : pos};
						break;
					case 1:
						var delta7 = acc.delta;
						var stride8 = acc.stride;
						var a17 = acc.a;
						var index7 = a17.pos >> 2;
						var offset7 = index7 == 0 ? delta7 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta7,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index7)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a17.g), t : a17.g.type, p : pos},offset7), t : hxsl_Type.TVec(4,a17.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e1;
				switch(acc._hx_index) {
				case 0:
					var a18 = acc.a;
					e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a18.g), t : a18.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a18.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a18.t), p : pos};
					break;
				case 1:
					var delta8 = acc.delta;
					var stride9 = acc.stride;
					var a19 = acc.a;
					var index8 = a19.pos >> 2;
					var offset8 = index8 == 0 ? delta8 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta8,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index8)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a19.g), t : a19.g.type, p : pos},offset8), t : hxsl_Type.TVec(4,a19.t), p : pos};
					break;
				}
				if(size == 4) {
					if((a.pos & 3) != 0) {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					var sw = [];
					var _g3 = 0;
					var _g12 = size;
					while(_g3 < _g12) {
						var i1 = _g3++;
						sw.push(hxsl_Tools.SWIZ[i1 + (a.pos & 3)]);
					}
					e1 = { e : hxsl_TExprDef.TSwiz(e1,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e1.t = hxsl_Type.TFloat;
					e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size1 = t.size;
						e1.t = hxsl_Type.TVec(size1,hxsl_VecType.VFloat);
						e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size1 - 2]), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
					}
					break;
				default:
				}
				return e1;
			}
			break;
		default:
			if(hxsl_Tools.isSampler(t)) {
				var e2;
				switch(acc._hx_index) {
				case 0:
					var a20 = acc.a;
					e2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a20.g), t : a20.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a20.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a20.t), p : pos};
					break;
				case 1:
					var delta9 = acc.delta;
					var stride10 = acc.stride;
					var a21 = acc.a;
					var index9 = a21.pos >> 2;
					var offset9 = index9 == 0 ? delta9 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta9,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index9)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a21.g), t : a21.g.type, p : pos},offset9), t : hxsl_Type.TVec(4,a21.t), p : pos};
					break;
				}
				e2.t = t;
				return e2;
			}
			var size2 = this.varSize(t,a.t);
			if(size2 > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			var e3;
			switch(acc._hx_index) {
			case 0:
				var a22 = acc.a;
				e3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a22.g), t : a22.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a22.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a22.t), p : pos};
				break;
			case 1:
				var delta10 = acc.delta;
				var stride11 = acc.stride;
				var a23 = acc.a;
				var index10 = a23.pos >> 2;
				var offset10 = index10 == 0 ? delta10 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta10,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index10)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a23.g), t : a23.g.type, p : pos},offset10), t : hxsl_Type.TVec(4,a23.t), p : pos};
				break;
			}
			if(size2 == 4) {
				if((a.pos & 3) != 0) {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				var sw1 = [];
				var _g4 = 0;
				var _g13 = size2;
				while(_g4 < _g13) {
					var i2 = _g4++;
					sw1.push(hxsl_Tools.SWIZ[i2 + (a.pos & 3)]);
				}
				e3 = { e : hxsl_TExprDef.TSwiz(e3,sw1), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e3.t = hxsl_Type.TFloat;
				e3 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e3]), t : t, p : pos};
				break;
			case 5:
				if(t.t._hx_index == 0) {
					var size3 = t.size;
					e3.t = hxsl_Type.TVec(size3,hxsl_VecType.VFloat);
					e3 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size3 - 2]), t : hxsl_Type.TFun([]), p : pos},[e3]), t : t, p : pos};
				}
				break;
			default:
			}
			return e3;
		}
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _g13 = _g.args;
			var _g12 = _g.e;
			var _g16 = _g12.t;
			var _g15 = _g12.p;
			var _g14 = _g12.e;
			if(_g14._hx_index == 2) {
				if(_g14.g._hx_index == 52) {
					if(_g13.length == 1) {
						var _g18 = _g13[0];
						var _g21 = _g18.t;
						var _g20 = _g18.p;
						var _g19 = _g18.e;
						if(_g19._hx_index == 8) {
							var _g22 = _g19.e;
							var _g26 = _g22.t;
							var _g25 = _g22.p;
							var _g24 = _g22.e;
							if(_g24._hx_index == 2) {
								if(_g24.g._hx_index == 51) {
									var args = _g19.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g11 = rem;
										while(_g1 < _g11) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g2 = e.e;
										if(_g2._hx_index == 8) {
											var _g4 = _g2.args;
											var e1 = _g2.e;
											emat = e1;
										} else {
											throw new js__$Boot_HaxeError("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g23 = _g.index;
			var _g17 = _g.e;
			var _g5 = _g17.t;
			var _g41 = _g17.p;
			var _g3 = _g17.e;
			if(_g3._hx_index == 17) {
				var _g9 = _g23.t;
				var _g8 = _g23.p;
				var _g7 = _g23.e;
				if(_g7._hx_index == 0) {
					var _g10 = _g7.c;
					if(_g10._hx_index == 2) {
						var el = _g3.el;
						var i1 = _g10.v;
						if(i1 >= 0 && i1 < el.length) {
							return el[i1];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			if(v.type != t) {
				var tmp;
				if(t == hxsl_Type.TSampler2D) {
					var _g1 = v.type;
					if(_g1._hx_index == 17) {
						var _g11 = _g1.size;
						tmp = true;
					} else {
						tmp = false;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,alloc.length << 2,1);
			a.v = v;
			this.varMap.set(v,a);
			alloc.push(a);
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(alloc.length));
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(vars) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : "buffers", type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			var tmp;
			if(_g1._hx_index == 16) {
				var _g2 = _g1.size;
				var _g11 = _g1.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				var a = new hxsl__$Flatten_Alloc(g,null,alloc.length,1);
				a.v = v;
				alloc.push(a);
				this.outVars.push(v);
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0)),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var tmp;
			if(!hxsl_Tools.isSampler(v.type)) {
				var _g1 = v.type;
				if(_g1._hx_index == 16) {
					var _g2 = _g1.size;
					var _g11 = _g1.t;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var size = this.varSize(v.type,t);
			var best = null;
			var _g3 = 0;
			while(_g3 < alloc.length) {
				var a = alloc[_g3];
				++_g3;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a1 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a1);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a2 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a2.v = v;
				this.varMap.set(v,a2);
				alloc.push(a2);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a3 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a3);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var t2 = v.t;
			var n = v.size;
			if(t == t2) {
				return n;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			var _g3 = v.size;
			if(_g3._hx_index == 0) {
				var at = v.t;
				var n1 = _g3.v;
				return this.varSize(at,t) * n1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.gatherVar(v1);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var id = hxsl_Globals.MAP.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		hxsl_Globals.MAP.h[path] = id;
	}
	return id;
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw new js__$Boot_HaxeError("Too many unique channels");
		}
		var i1 = this.maxChannels++;
		this.channels[i1] = t;
		return i1;
	}
	,__class__: hxsl_Globals
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxsl_GlslOut = function() {
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.prototype = {
	decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var k = t.t;
			var size = t.size;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += Std.string("sampler2D");
			break;
		case 11:
			this.buf.b += Std.string("sampler2DArray");
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += Std.string("samplerCube");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			var _g7 = t.variants;
			this.buf.b += Std.string("function");
			break;
		case 15:
			var size1 = t.size;
			var t1 = t.t;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size1._hx_index) {
			case 0:
				var _g1 = size1.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v1 = _g1;
						this.buf.b += Std.string(v1);
					}
				} else {
					var v2 = _g1;
					this.buf.b += Std.string(v2);
				}
				break;
			case 1:
				var v3 = size1.v;
				var v4 = this.varName(v3);
				this.buf.b += Std.string(v4);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var _g5 = t.size;
			var _g4 = t.t;
			throw new js__$Boot_HaxeError("assert");
		case 17:
			var n1 = t.size;
			this.buf.b += Std.string("channel" + n1);
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var size = _g.size;
			var t = _g.t;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g1 = size.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _g1;
						this.buf.b += Std.string(n);
					}
				} else {
					var n1 = _g1;
					this.buf.b += Std.string(n1);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var size1 = _g.size;
			var t1 = _g.t;
			this.buf.b += Std.string("uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t1,size1);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t1,size1);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v3 = this.varName(v);
			this.buf.b += Std.string(v3);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var _g3 = _g.args;
			var _g2 = _g.m;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			var _g2 = args[0].t;
			switch(_g2._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				var _g11 = _g2.size;
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:case 36:
			return "texelFetch";
		case 50:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			this.decl("#extension GL_OES_standard_derivatives:enable");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS.get(g);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v1 = c.v;
				this.buf.b += Std.string("\"" + v1 + "\"");
				break;
			}
			break;
		case 1:
			var v2 = _g.v;
			var v3 = this.varName(v2);
			this.buf.b += Std.string(v3);
			break;
		case 2:
			var g = _g.g;
			var v4 = hxsl_GlslOut.GLOBALS.get(g);
			this.buf.b += Std.string(v4);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e2,t2);
				this.newLine(e2);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			var _g2 = e21.t;
			var _g11 = e11.t;
			switch(op._hx_index) {
			case 1:
				if(_g11._hx_index == 5) {
					if(_g11.size == 3) {
						if(_g11.t._hx_index == 1) {
							if(_g2._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								var tmp;
								if(op._hx_index == 20) {
									var _g3 = op.op;
									tmp = true;
								} else {
									tmp = false;
								}
								if(tmp) {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e11,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e21,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								var v5 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v5);
								this.buf.b += Std.string(" ");
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							var v6 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v6);
							this.buf.b += Std.string(" ");
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v7 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v7);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v8 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v8);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 5:
				if(_g11._hx_index == 5) {
					var _g31 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g5 = _g2.t;
						var _g4 = _g2.size;
						var n = _g11.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v9;
						switch(op._hx_index) {
						case 5:
							v9 = "equal";
							break;
						case 6:
							v9 = "notEqual";
							break;
						case 7:
							v9 = "greaterThan";
							break;
						case 8:
							v9 = "greaterThanEqual";
							break;
						case 9:
							v9 = "lessThan";
							break;
						case 10:
							v9 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v9);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v10 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v10);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v11 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v11);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 6:
				if(_g11._hx_index == 5) {
					var _g17 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g19 = _g2.t;
						var _g18 = _g2.size;
						var n1 = _g11.size;
						this.buf.b += Std.string("vec" + n1 + "(");
						var v12;
						switch(op._hx_index) {
						case 5:
							v12 = "equal";
							break;
						case 6:
							v12 = "notEqual";
							break;
						case 7:
							v12 = "greaterThan";
							break;
						case 8:
							v12 = "greaterThanEqual";
							break;
						case 9:
							v12 = "lessThan";
							break;
						case 10:
							v12 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v12);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v13 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v13);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v14 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v14);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 7:
				if(_g11._hx_index == 5) {
					var _g24 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g26 = _g2.t;
						var _g25 = _g2.size;
						var n2 = _g11.size;
						this.buf.b += Std.string("vec" + n2 + "(");
						var v15;
						switch(op._hx_index) {
						case 5:
							v15 = "equal";
							break;
						case 6:
							v15 = "notEqual";
							break;
						case 7:
							v15 = "greaterThan";
							break;
						case 8:
							v15 = "greaterThanEqual";
							break;
						case 9:
							v15 = "lessThan";
							break;
						case 10:
							v15 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v15);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v16 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v16);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v17 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v17);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 8:
				if(_g11._hx_index == 5) {
					var _g7 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g9 = _g2.t;
						var _g8 = _g2.size;
						var n3 = _g11.size;
						this.buf.b += Std.string("vec" + n3 + "(");
						var v18;
						switch(op._hx_index) {
						case 5:
							v18 = "equal";
							break;
						case 6:
							v18 = "notEqual";
							break;
						case 7:
							v18 = "greaterThan";
							break;
						case 8:
							v18 = "greaterThanEqual";
							break;
						case 9:
							v18 = "lessThan";
							break;
						case 10:
							v18 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v18);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v19 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v19);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v20 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v20);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 9:
				if(_g11._hx_index == 5) {
					var _g111 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g13 = _g2.t;
						var _g12 = _g2.size;
						var n4 = _g11.size;
						this.buf.b += Std.string("vec" + n4 + "(");
						var v21;
						switch(op._hx_index) {
						case 5:
							v21 = "equal";
							break;
						case 6:
							v21 = "notEqual";
							break;
						case 7:
							v21 = "greaterThan";
							break;
						case 8:
							v21 = "greaterThanEqual";
							break;
						case 9:
							v21 = "lessThan";
							break;
						case 10:
							v21 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v21);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v22 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v22);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v23 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v23);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 10:
				if(_g11._hx_index == 5) {
					var _g28 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g30 = _g2.t;
						var _g29 = _g2.size;
						var n5 = _g11.size;
						this.buf.b += Std.string("vec" + n5 + "(");
						var v24;
						switch(op._hx_index) {
						case 5:
							v24 = "equal";
							break;
						case 6:
							v24 = "notEqual";
							break;
						case 7:
							v24 = "greaterThan";
							break;
						case 8:
							v24 = "greaterThanEqual";
							break;
						case 9:
							v24 = "lessThan";
							break;
						case 10:
							v24 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v24);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v25 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v25);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v26 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v26);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e11,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e21,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					var tmp1;
					if(op._hx_index == 20) {
						var _g6 = op.op;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v27 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v27);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g11._hx_index == 5) {
						if(_g11.size == 3) {
							if(_g11.t._hx_index == 1) {
								if(_g2._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									var tmp2;
									if(op._hx_index == 20) {
										var _g10 = op.op;
										tmp2 = true;
									} else {
										tmp2 = false;
									}
									if(tmp2) {
										this.addValue(e11,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e11,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e21,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" ");
									var v28 = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v28);
									this.buf.b += Std.string(" ");
									this.addValue(e21,tabs);
								}
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								var v29 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v29);
								this.buf.b += Std.string(" ");
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							var v30 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v30);
							this.buf.b += Std.string(" ");
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v31 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v31);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						var tmp3;
						if(op._hx_index == 20) {
							var _g14 = op.op;
							tmp3 = true;
						} else {
							tmp3 = false;
						}
						if(tmp3) {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v32 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v32);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
					break;
				default:
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v33 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v33);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			default:
				this.addValue(e11,tabs);
				this.buf.b += Std.string(" ");
				var v34 = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v34);
				this.buf.b += Std.string(" ");
				this.addValue(e21,tabs);
			}
			break;
		case 6:
			var e12 = _g.e1;
			var op1 = _g.op;
			var _this = this.buf;
			var _this1 = _this.b;
			var tmp4;
			switch(op1._hx_index) {
			case 0:
				tmp4 = "++";
				break;
			case 1:
				tmp4 = "--";
				break;
			case 2:
				tmp4 = "!";
				break;
			case 3:
				tmp4 = "-";
				break;
			case 4:
				tmp4 = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp4);
			this.addValue(e12,tabs);
			break;
		case 7:
			var init = _g.init;
			var v35 = _g.v;
			this.locals.h[v35.id] = v35;
			if(init != null) {
				var v36 = this.varName(v35);
				this.buf.b += Std.string(v36);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _g35 = _g.args;
			var _g34 = _g.e;
			var _g38 = _g34.t;
			var _g37 = _g34.p;
			var _g36 = _g34.e;
			if(_g36._hx_index == 2) {
				var _g39 = _g36.g;
				switch(_g39._hx_index) {
				case 35:
					var args = _g35;
					var g1 = _g39;
					var v37 = this.getFunName(g1,args,e.t);
					this.buf.b += Std.string(v37);
					this.buf.b += Std.string("(");
					var _g15 = 0;
					while(_g15 < args.length) {
						var e3 = args[_g15];
						++_g15;
						this.addValue(e3,tabs);
						this.buf.b += Std.string(", ");
					}
					this.buf.b += Std.string("0)");
					break;
				case 53:
					if(_g35.length == 1) {
						var e4 = _g35[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e4,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v38 = _g34;
						var args1 = _g35;
						var _g16 = v38.e;
						if(_g16._hx_index == 2) {
							var g2 = _g16.g;
							var v39 = this.getFunName(g2,args1,e.t);
							this.buf.b += Std.string(v39);
						} else {
							this.addValue(v38,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g21 = 0;
						while(_g21 < args1.length) {
							var e5 = args1[_g21];
							++_g21;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e5,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				default:
					var args2 = _g35;
					var v40 = _g34;
					var _g20 = v40.e;
					if(_g20._hx_index == 2) {
						var g3 = _g20.g;
						var v41 = this.getFunName(g3,args2,e.t);
						this.buf.b += Std.string(v41);
					} else {
						this.addValue(v40,tabs);
					}
					this.buf.b += Std.string("(");
					var first1 = true;
					var _g22 = 0;
					while(_g22 < args2.length) {
						var e6 = args2[_g22];
						++_g22;
						if(first1) {
							first1 = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e6,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var args3 = _g35;
				var v42 = _g34;
				var _g23 = v42.e;
				if(_g23._hx_index == 2) {
					var g4 = _g23.g;
					var v43 = this.getFunName(g4,args3,e.t);
					this.buf.b += Std.string(v43);
				} else {
					this.addValue(v42,tabs);
				}
				this.buf.b += Std.string("(");
				var first2 = true;
				var _g27 = 0;
				while(_g27 < args3.length) {
					var e7 = args3[_g27];
					++_g27;
					if(first2) {
						first2 = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e7,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var regs = _g.regs;
			var e8 = _g.e;
			if(e8.t._hx_index == 3) {
				var _g32 = 0;
				while(_g32 < regs.length) {
					var r = regs[_g32];
					++_g32;
					if(r != hxsl_Component.X) {
						throw new js__$Boot_HaxeError("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e8,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				this.addValue(e8,tabs);
				this.buf.b += Std.string(".");
				var _g33 = 0;
				while(_g33 < regs.length) {
					var r1 = regs[_g33];
					++_g33;
					var _this2 = this.buf;
					var _this3 = _this2.b;
					var tmp5;
					switch(r1._hx_index) {
					case 0:
						tmp5 = "x";
						break;
					case 1:
						tmp5 = "y";
						break;
					case 2:
						tmp5 = "z";
						break;
					case 3:
						tmp5 = "w";
						break;
					}
					_this2.b = _this3 + Std.string(tmp5);
				}
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e9 = _g.e;
			if(e9 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e9,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v44 = _g.v;
			this.locals.h[v44.id] = v44;
			var _g40 = it.e;
			if(_g40._hx_index == 5) {
				if(_g40.op._hx_index == 21) {
					var e22 = _g40.e2;
					var e13 = _g40.e1;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v44.name + "=");
					this.addValue(e13,tabs);
					this.buf.b += Std.string(";" + v44.name + "<");
					this.addValue(e22,tabs);
					this.buf.b += Std.string(";" + v44.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var index = _g.index;
			var e10 = _g.e;
			this.addValue(e10,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el1 = _g.el;
			var _g41 = e.t;
			if(_g41._hx_index == 15) {
				var _g210 = _g41.size;
				var t = _g41.t;
				this.addType(t);
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			this.buf.b += Std.string("[" + el1.length + "]");
			this.buf.b += Std.string("(");
			var first3 = true;
			var _g310 = 0;
			while(_g310 < el1.length) {
				var e14 = el1[_g310];
				++_g310;
				if(first3) {
					first3 = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e14,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			var _g161 = _g.def;
			var _g151 = _g.cases;
			var _g141 = _g.e;
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _g112 = _g.loop;
			var _g101 = _g.e;
			if(_g.normalWhile == false) {
				var e15 = _g101;
				var loop1 = _g112;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop1,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e15,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var e16 = _g101;
				var loop2 = _g112;
				this.buf.b += Std.string("while( ");
				this.addValue(e16,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop2,tabs);
			}
			break;
		case 20:
			var _g71 = _g.args;
			var _g61 = _g.m;
			var e17 = _g.e;
			this.addExpr(e17,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		if(Object.prototype.hasOwnProperty.call(hxsl_GlslOut.KWDS.h,n)) {
			n = "_" + n;
		}
		if(Object.prototype.hasOwnProperty.call(this.allNames.h,n)) {
			var k = 2;
			n += "_";
			while(Object.prototype.hasOwnProperty.call(this.allNames.h,n + k)) ++k;
			n += k;
		}
		this.varNames.h[v.id] = n;
		this.allNames.h[n] = v.id;
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var _g1 = _g.el;
			return true;
		case 13:
			var _g6 = _g.it;
			var _g5 = _g.v;
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			var _g2 = _g.e;
			if(_g.normalWhile == true) {
				var loop1 = _g.loop;
				return this.isBlock(loop1);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			var _g = v.type;
			var tmp;
			if(_g._hx_index == 16) {
				var _g2 = _g.size;
				var _g1 = _g.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.buf.b += Std.string("layout(std140) ");
			}
			this.buf.b += Std.string("uniform ");
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g11 = 0;
			var _g21 = v.qualifiers;
			while(_g11 < _g21.length) {
				var q = _g21[_g11];
				++_g11;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		this.decl("precision mediump float;");
		if(s.funs.length != 1) {
			throw new js__$Boot_HaxeError("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		this.initVars(s);
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g2 = 0;
		while(_g2 < locals.length) {
			var v = locals[_g2];
			++_g2;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g3 = 0;
		var _g4 = this.exprValues;
		while(_g3 < _g4.length) {
			var e1 = _g4[_g3];
			++_g3;
			this.buf.b += Std.string(e1);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.read = new haxe_ds_IntMap();
	this.write = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(batchMode) {
	if(batchMode == null) {
		batchMode = false;
	}
	this.debugDepth = 0;
	this.batchMode = batchMode;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p) {
		switch(v.kind._hx_index) {
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 2:case 6:
			throw new js__$Boot_HaxeError("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g1 = v2.type;
		var _g2 = v.type;
		if(_g2._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var fl1 = _g2.vl;
				var fl2 = _g1.vl;
				var _g11 = 0;
				while(_g11 < fl1.length) {
					var f1 = fl1[_g11];
					++_g11;
					var ft = null;
					var _g12 = 0;
					while(_g12 < fl2.length) {
						var f2 = fl2[_g12];
						++_g12;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var v2 = this.varMap.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g2 = 0;
			var _g11 = v2.merged;
			while(_g2 < _g11.length) {
				var vm = _g11[_g2];
				++_g2;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			if(!(v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				tmp = v1.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || v1.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var a = this.varMap.h[key + k];
					if(a == null) {
						break;
					}
					var _g21 = 0;
					var _g3 = a.merged;
					while(_g21 < _g3.length) {
						var vm1 = _g3[_g21];
						++_g21;
						if(vm1 == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var vid = this.allVars.length + 1;
		var v21 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a1 = new hxsl__$Linker_AllocatedVar();
		a1.v = v21;
		a1.merged = [v];
		a1.path = key;
		a1.id = vid;
		a1.parent = parent;
		a1.instanceIndex = this.curInstance;
		this.allVars.push(a1);
		this.varMap.h[key] = a1;
		var _g4 = v21.type;
		if(_g4._hx_index == 13) {
			var vl = _g4.vl;
			var _g5 = [];
			var _g12 = 0;
			while(_g12 < vl.length) {
				var v3 = vl[_g12];
				++_g12;
				_g5.push(this.allocVar(v3,p,key,a1).v);
			}
			v21.type = hxsl_Type.TStruct(_g5);
		}
		return a1;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.write.h.hasOwnProperty(v1.id)) {
					this.curShader.read.h[v1.id] = v1;
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _g11 = _g1.v;
					var v2 = _g11;
					if(!this.locals.h.hasOwnProperty(v2.id)) {
						var e21 = this.mapExprVar(e2);
						var v3 = this.allocVar(v2,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v3.id] = v3;
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v3.v), t : v3.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v4 = _g11;
						if(!this.locals.h.hasOwnProperty(v4.id)) {
							var e11 = this.mapExprVar(e1);
							var e22 = this.mapExprVar(e2);
							var v5 = this.allocVar(v4,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v5.id] = v5;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e22), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _g3 = _g1.regs;
					var _g2 = _g1.e;
					var _g6 = _g2.t;
					var _g5 = _g2.p;
					var _g4 = _g2.e;
					if(_g4._hx_index == 1) {
						var v6 = _g4.v;
						if(!this.locals.h.hasOwnProperty(v6.id)) {
							var e12 = this.mapExprVar(e1);
							var e23 = this.mapExprVar(e2);
							var v7 = this.allocVar(v6,e12.p);
							if(this.curShader != null) {
								this.curShader.write.h[v7.id] = v7;
							}
							return { e : hxsl_TExprDef.TBinop(op,e12,e23), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				var _g8 = op.op;
				switch(_g1._hx_index) {
				case 1:
					var v8 = _g1.v;
					if(!this.locals.h.hasOwnProperty(v8.id)) {
						var e13 = this.mapExprVar(e1);
						var e24 = this.mapExprVar(e2);
						var v9 = this.allocVar(v8,e13.p);
						if(this.curShader != null) {
							this.curShader.write.h[v9.id] = v9;
						}
						return { e : hxsl_TExprDef.TBinop(op,e13,e24), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _g111 = _g1.regs;
					var _g10 = _g1.e;
					var _g14 = _g10.t;
					var _g13 = _g10.p;
					var _g12 = _g10.e;
					if(_g12._hx_index == 1) {
						var v10 = _g12.v;
						if(!this.locals.h.hasOwnProperty(v10.id)) {
							var e14 = this.mapExprVar(e1);
							var e25 = this.mapExprVar(e2);
							var v11 = this.allocVar(v10,e14.p);
							if(this.curShader != null) {
								this.curShader.write.h[v11.id] = v11;
							}
							return { e : hxsl_TExprDef.TBinop(op,e14,e25), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var _g61 = _g.init;
			var v12 = _g.v;
			this.locals.h[v12.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var _g41 = _g.loop;
			var _g31 = _g.it;
			var v13 = _g.v;
			this.locals.h[v13.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var r = s.read.iterator();
		while(r.hasNext()) {
			var r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d2 = s.deps.keys();
			while(d2.hasNext()) {
				var d3 = d2.next();
				if(d3.vertex == null) {
					d3.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g1 = 0;
		while(_g1 < deps.length) {
			var d2 = deps[_g1];
			++_g1;
			this.collect(d2,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	,uniqueLocals: function(expr,locals) {
		var _g = expr.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var _g1 = new haxe_ds_StringMap();
			var k = haxe_ds_StringMap.keysIterator(locals.h);
			while(k.hasNext()) {
				var k1 = k.next();
				_g1.h[k1] = true;
			}
			var locals1 = _g1;
			var _g11 = 0;
			while(_g11 < el.length) {
				var e = el[_g11];
				++_g11;
				this.uniqueLocals(e,locals1);
			}
			break;
		case 7:
			var _g3 = _g.init;
			var v = _g.v;
			if(Object.prototype.hasOwnProperty.call(locals.h,v.name)) {
				var k2 = 2;
				while(Object.prototype.hasOwnProperty.call(locals.h,v.name + k2)) ++k2;
				v.name += k2;
			}
			locals.h[v.name] = true;
			break;
		default:
			var f = $bind(this,this.uniqueLocals);
			var locals2 = locals;
			hxsl_Tools.iter(expr,function(expr1) {
				f(expr1,locals2);
			});
		}
	}
	,link: function(shadersData) {
		var _gthis = this;
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = new haxe_ds_ObjectMap();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shadersData.length) {
			var s = shadersData[_g1];
			++_g1;
			var s1 = s;
			var sreal = s1;
			if(dupShaders.h.__keys__[s1.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s1);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g2 = 0;
		while(_g2 < shadersData.length) {
			var s2 = shadersData[_g2];
			++_g2;
			this.isBatchShader = this.batchMode && StringTools.startsWith(s2.name,"batchShader_");
			var _g21 = 0;
			var _g3 = s2.vars;
			while(_g21 < _g3.length) {
				var v = _g3[_g21];
				++_g21;
				var v2 = this.allocVar(v,null);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g4 = 0;
			var _g5 = s2.funs;
			while(_g4 < _g5.length) {
				var f = _g5[_g4];
				++_g4;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var _g31 = 0;
		while(_g31 < shadersData.length) {
			var s3 = shadersData[_g31];
			++_g31;
			var _g32 = 0;
			var _g41 = s3.funs;
			while(_g32 < _g41.length) {
				var f1 = _g41[_g32];
				++_g32;
				var v3 = this.allocVar(f1.ref,f1.expr.p);
				if(v3.kind == null) {
					throw new js__$Boot_HaxeError("assert");
				}
				switch(v3.kind._hx_index) {
				case 0:case 1:
					this.addShader(s3.name + "." + (v3.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v3.kind == hxsl_FunctionKind.Vertex,f1.expr,priority);
					break;
				case 2:
					var prio;
					var status;
					switch(f1.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g42 = f1.expr.e;
					if(_g42._hx_index == 4) {
						var el = _g42.el;
						var index = 0;
						var _g43 = 0;
						while(_g43 < el.length) {
							var e = el[_g43];
							++_g43;
							this.addShader(s3.name + "." + f1.ref.name + index++,status,e,prio[0]++);
						}
					} else {
						this.addShader(s3.name + "." + f1.ref.name,status,f1.expr,prio[0]++);
					}
					break;
				case 3:
					throw new js__$Boot_HaxeError("Unexpected helper function in linker " + v3.v.name);
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g44 = 0;
		while(_g44 < outVars.length) {
			var v4 = outVars[_g44];
			++_g44;
			this.buildDependency(entry,this.allocVar(v4,null),false);
		}
		var _g51 = 0;
		var _g6 = this.shaders;
		while(_g51 < _g6.length) {
			var s4 = _g6[_g51];
			++_g51;
			if(s4.hasDiscard) {
				this.initDependencies(s4);
				entry.deps.set(s4,true);
			}
		}
		var _g7 = 0;
		var _g8 = this.shaders;
		while(_g7 < _g8.length) {
			var s5 = _g8[_g7];
			++_g7;
			if(s5.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var r = s5.read.iterator();
			while(r.hasNext()) {
				var r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s5.vertex = false;
			}
		}
		var v5 = [];
		var f2 = [];
		this.collect(entry,v5,true);
		this.collect(entry,f2,false);
		if(f2.pop() != entry) {
			throw new js__$Boot_HaxeError("assert");
		}
		var _g9 = 0;
		var _g10 = this.shaders;
		while(_g9 < _g10.length) {
			var s6 = _g10[_g9];
			++_g9;
			s6.marked = null;
		}
		var _g11 = 0;
		var _g12 = v5.concat(f2);
		while(_g11 < _g12.length) {
			var s7 = _g12[_g11];
			++_g11;
			var d = s7.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s7.name + " is unreachable",null);
				}
			}
			s7.marked = true;
		}
		var outVars1 = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v6) {
			if(varMap_h.hasOwnProperty(v6.id)) {
				return;
			}
			varMap_h[v6.id] = true;
			if(v6.v.parent != null) {
				addVar(v6.parent);
			} else {
				outVars1.push(v6.v);
			}
		};
		var _g13 = 0;
		var _g14 = v5.concat(f2);
		while(_g13 < _g14.length) {
			var s8 = _g14[_g13];
			++_g13;
			var v7 = s8.read.iterator();
			while(v7.hasNext()) {
				var v8 = v7.next();
				addVar(v8);
			}
			var v9 = s8.write.iterator();
			while(v9.hasNext()) {
				var v10 = v9.next();
				addVar(v10);
			}
		}
		var cleanVar = null;
		cleanVar = function(v11) {
			var _g15 = v11.type;
			if(_g15._hx_index == 13) {
				var vl = _g15.vl;
				if(v11.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g151 = 0;
					while(_g151 < vl.length) {
						var v12 = vl[_g151];
						++_g151;
						if(varMap_h.hasOwnProperty(v12.id)) {
							cleanVar(v12);
							vout.push(v12);
						}
					}
					v11.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g152 = 0;
		while(_g152 < outVars1.length) {
			var v13 = outVars1[_g152];
			++_g152;
			cleanVar(v13);
		}
		var build = function(kind,name,a) {
			var v14 = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars1.push(v14);
			var exprs = [];
			var _g16 = 0;
			while(_g16 < a.length) {
				var s9 = a[_g16];
				++_g16;
				var _g161 = s9.body.e;
				if(_g161._hx_index == 4) {
					var el1 = _g161.el;
					var _g162 = 0;
					while(_g162 < el1.length) {
						var e1 = el1[_g162];
						++_g162;
						exprs.push(e1);
					}
				} else {
					exprs.push(s9.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v14, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = [build(hxsl_FunctionKind.Vertex,"vertex",v5),build(hxsl_FunctionKind.Fragment,"fragment",f2)];
		var s10 = dupShaders.keys();
		while(s10.hasNext()) {
			var s11 = s10.next();
			var sreal1 = dupShaders.h[s11.__id__];
			if(s11 == sreal1) {
				continue;
			}
			var _g163 = 0;
			var _g17 = s11.vars.length;
			while(_g163 < _g17) {
				var i = _g163++;
				this.allocVar(s11.vars[i],null).merged.unshift(sreal1.vars[i]);
			}
		}
		return { name : "out", vars : outVars1, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__ : "hxsl.Output", __constructs__ : ["Const","Value","PackNormal","PackFloat","Vec2","Vec3","Vec4","Swiz"]
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a","swiz"],$_)
};
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	case 23:
		return " in ";
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.prototype = {
	shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,hxsl_VarKind.Var);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g2 = 0;
		var _g3 = s.funs;
		while(_g2 < _g3.length) {
			var f = _g3[_g2];
			++_g2;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index].toLowerCase() + "p";
					break;
				case 7:
					var max1 = q.max;
					var min = q.min;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@var ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g2 = v.type;
		if(_g2._hx_index == 13) {
			var vl = _g2.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g3 = 0;
			while(_g3 < vl.length) {
				var v2 = vl[_g3];
				++_g3;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v2,v2.kind,tabs,v2);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v3 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v3);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v1 = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v1);
			break;
		case 3:
			var e1 = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e2,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			this.addExpr(e11,tabs);
			var v2 = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v2);
			this.addExpr(e21,tabs);
			break;
		case 6:
			var e3 = _g.e1;
			var op1 = _g.op;
			var _this = this.buffer;
			var _this1 = _this.b;
			var tmp;
			switch(op1._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addExpr(e3,tabs);
			break;
		case 7:
			var init = _g.init;
			var v3 = _g.v;
			this.addVar(v3,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var el1 = _g.args;
			var e4 = _g.e;
			this.addExpr(e4,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g2 = 0;
			while(_g2 < el1.length) {
				var e5 = el1[_g2];
				++_g2;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e5,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var regs = _g.regs;
			var e6 = _g.e;
			this.addExpr(e6,tabs);
			this.buffer.b += Std.string(".");
			var _g3 = 0;
			while(_g3 < regs.length) {
				var r = regs[_g3];
				++_g3;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var cond = _g.econd;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e7 = _g.e;
			this.buffer.b += Std.string("return");
			if(e7 != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e7,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v4 = _g.v;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v4);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e22 = _g.index;
			var e12 = _g.e;
			this.addExpr(e12,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e22,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el2 = _g.el;
			this.buffer.b += Std.string("[");
			var first1 = true;
			var _g4 = 0;
			while(_g4 < el2.length) {
				var e8 = el2[_g4];
				++_g4;
				if(first1) {
					first1 = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e8,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e9 = _g.e;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e9,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g5 = 0;
			while(_g5 < cases.length) {
				var c1 = cases[_g5];
				++_g5;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first2 = true;
				var _g6 = 0;
				var _g11 = c1.values;
				while(_g6 < _g11.length) {
					var v5 = _g11[_g6];
					++_g6;
					if(first2) {
						first2 = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v5,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c1.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _g111 = _g.loop;
			var _g10 = _g.e;
			if(_g.normalWhile == false) {
				var e10 = _g10;
				var loop1 = _g111;
				var old1 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop1,tabs);
				tabs = old1;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e10,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var e13 = _g10;
				var loop2 = _g111;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e13,tabs);
				var old2 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop2,tabs);
				tabs = old2;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var e14 = _g.e;
			var args = _g.args;
			var m = _g.m;
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first3 = true;
				var _g7 = 0;
				while(_g7 < args.length) {
					var c2 = args[_g7];
					++_g7;
					if(first3) {
						first3 = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c2);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e14,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
};
$hxClasses["hxsl.Serializer"] = hxsl_Serializer;
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.prototype = {
	readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl_Type.TSampler2D;
		case 11:
			return hxsl_Type.TSampler2DArray;
		case 12:
			return hxsl_Type.TSamplerCube;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t1 = this.readType();
			var v1 = this.readVar();
			return hxsl_Type.TArray(t1,v1 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v1));
		case 16:
			var t2 = this.readType();
			var v2 = this.readVar();
			return hxsl_Type.TBuffer(t2,v2 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v2));
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f1 = $bind(this,this.readExpr);
			var _g3 = [];
			var _g11 = 0;
			var _g21 = this.readVarInt();
			while(_g11 < _g21) {
				var i1 = _g11++;
				_g3.push(f1());
			}
			e = hxsl_TExprDef.TCall(e1,_g3);
			break;
		case 9:
			var e2 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g4 = [];
				var _g12 = 0;
				var _g22 = (bits & 3) + 1;
				while(_g12 < _g22) {
					var i2 = _g12++;
					_g4.push(hxsl_Serializer.REGS[bits >> i2 * 2 + 2 & 3]);
				}
				swiz = _g4;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e2,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f2 = $bind(this,this.readExpr);
			var _g5 = [];
			var _g13 = 0;
			var _g23 = this.readVarInt();
			while(_g13 < _g23) {
				var i3 = _g13++;
				_g5.push(f2());
			}
			e = hxsl_TExprDef.TArrayDecl(_g5);
			break;
		case 18:
			var e3 = this.readExpr();
			var _g6 = [];
			var _g14 = 0;
			var _g24 = this.readVarInt();
			while(_g14 < _g24) {
				var i4 = _g14++;
				var f3 = $bind(_gthis,_gthis.readExpr);
				var _g7 = [];
				var _g15 = 0;
				var _g25 = _gthis.readVarInt();
				while(_g15 < _g25) {
					var i5 = _g15++;
					_g7.push(f3());
				}
				_g6.push({ values : _g7, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e3,_g6,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e4 = this.readString();
			var f4 = $bind(this,this.readConst);
			var _g8 = [];
			var _g16 = 0;
			var _g26 = this.readVarInt();
			while(_g16 < _g26) {
				var i6 = _g16++;
				_g8.push(f4());
			}
			e = hxsl_TExprDef.TMeta(e4,_g8,this.readExpr());
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 16 & 255)) {
			throw new js__$Boot_HaxeError("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f1 = $bind(this,this.readFun);
		var _g3 = [];
		var _g11 = 0;
		var _g21 = this.readVarInt();
		while(_g11 < _g21) {
			var i1 = _g11++;
			_g3.push(f1());
		}
		return { name : tmp, vars : tmp1, funs : _g3};
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		return new hxsl_ShaderList(s,shaders);
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	return shaders;
};
hxsl_ShaderList.prototype = {
	__class__: hxsl_ShaderList
};
var hxsl_ShaderInstance = function(shader) {
	this.id = hxsl_Tools.allocVarId();
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = new hxsl_Serializer().unserialize(src);
	this.initialize();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var _g = c.v.type;
			var tmp;
			switch(_g._hx_index) {
			case 1:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				var _g1 = _g.size;
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var i = new hxsl_ShaderInstance($eval.eval(this.data));
		this.paramsCount = 0;
		var _g2 = 0;
		var _g11 = this.data.vars;
		while(_g2 < _g11.length) {
			var v = _g11[_g2];
			++_g2;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,browseVar: function(v,path) {
		v.id = hxsl_Tools.allocVarId();
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var vs = vl[_g1];
				++_g1;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	split: function(s) {
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g2 = 0;
		var _g3 = Lambda.array(vvars);
		while(_g2 < _g3.length) {
			var inf = _g3[_g2];
			++_g2;
			var v = inf.v;
			switch(v.kind._hx_index) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v.kind._hx_index) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					var ninf = this.get(nv);
					v.kind = hxsl_VarKind.Local;
					var p = vfun.expr.p;
					var e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						var old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						var np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		var finits = [];
		var todo = [];
		var inf1 = fvars.iterator();
		while(inf1.hasNext()) {
			var inf2 = inf1.next();
			var v1 = inf2.v;
			switch(v1.kind._hx_index) {
			case 1:
				var nv1 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Var, type : v1.type};
				this.uniqueName(nv1);
				var i = vvars.h[v1.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v1);
					vvars.h[v1.id] = i;
				}
				i.read++;
				var vp = new hxsl__$Splitter_VarProps(nv1);
				vp.write = 1;
				vvars.h[nv1.id] = vp;
				var fp = new hxsl__$Splitter_VarProps(nv1);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv1), t : v1.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : vfun.expr.p}), t : v1.type, p : vfun.expr.p});
				this.varMap.set(v1,nv1);
				inf2.local = true;
				break;
			case 3:
				if(inf2.write > 0) {
					var nv2 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Local, type : v1.type};
					this.uniqueName(nv2);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv2,{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v1,nv2);
				}
				break;
			default:
			}
		}
		var _g4 = 0;
		while(_g4 < todo.length) {
			var v2 = todo[_g4];
			++_g4;
			fvars.h[v2.v.id] = v2;
		}
		var v3 = vvars.iterator();
		while(v3.hasNext()) {
			var v4 = v3.next();
			this.checkVar(v4,true,vvars,vfun.expr.p);
		}
		var v5 = fvars.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			this.checkVar(v6,false,vvars,ffun.expr.p);
		}
		var v7 = this.varMap.keys();
		while(v7.hasNext()) {
			var v8 = v7.next();
			var v21 = this.varMap.h[this.varMap.h[v8.__id__].__id__];
			if(v21 != null) {
				this.varMap.set(v8,v21);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		var _g5 = ffun.expr.e;
		if(_g5._hx_index == 4) {
			var el = _g5.el;
			var _g51 = 0;
			while(_g51 < finits.length) {
				var e1 = finits[_g51];
				++_g51;
				el.unshift(e1);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		var _g7 = [];
		var v9 = vvars.iterator();
		while(v9.hasNext()) {
			var v10 = v9.next();
			if(!v10.local) {
				_g7.push(v10.v);
			}
		}
		var vvars1 = _g7;
		var _g8 = [];
		var v11 = fvars.iterator();
		while(v11.hasNext()) {
			var v12 = v11.next();
			if(!v12.local) {
				_g8.push(v12.v);
			}
		}
		var fvars1 = _g8;
		vvars1.sort(function(v13,v22) {
			return v13.id - v22.id;
		});
		fvars1.sort(function(v14,v23) {
			return v14.id - v23.id;
		});
		return { vertex : { name : "vertex", vars : vvars1, funs : [vfun]}, fragment : { name : "fragment", vars : fvars1, funs : [ffun]}};
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw new js__$Boot_HaxeError(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw new js__$Boot_HaxeError(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			var v21 = this.varMap.h[v1.__id__];
			if(v21 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v21,this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v3 = _g.v;
			var v22 = this.varMap.h[v3.__id__];
			if(v22 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v22,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				return this.get(v2);
			}
			var oldName = v.name;
			this.uniqueName(v);
			if(v.kind == hxsl_VarKind.Local && oldName != v.name) {
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
				this.varMap.set(v,nv);
				v.name = oldName;
				v = nv;
			}
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		var n = this.varNames.h[v.name];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(Object.prototype.hasOwnProperty.call(this.varNames.h,prefix + k)) ++k;
			v.name = prefix + k;
		}
		this.varNames.h[v.name] = v;
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _g9 = _g.e2;
			var _g8 = _g.e1;
			var _g7 = _g.op;
			switch(_g7._hx_index) {
			case 4:
				var _g12 = _g8.t;
				var _g11 = _g8.p;
				var _g10 = _g8.e;
				switch(_g10._hx_index) {
				case 1:
					var e1 = _g9;
					var v1 = _g10.v;
					var inf1 = this.get(v1);
					inf1.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g15 = _g10.regs;
					var _g14 = _g10.e;
					var _g18 = _g14.t;
					var _g17 = _g14.p;
					var _g16 = _g14.e;
					if(_g16._hx_index == 1) {
						var e2 = _g9;
						var v2 = _g16.v;
						var inf2 = this.get(v2);
						inf2.write++;
						this.checkExpr(e2);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _g20 = _g7.op;
				var _g23 = _g8.t;
				var _g22 = _g8.p;
				var _g21 = _g8.e;
				switch(_g21._hx_index) {
				case 1:
					var e3 = _g9;
					var v3 = _g21.v;
					var inf3 = this.get(v3);
					if(inf3.write == 0) {
						inf3.requireInit = true;
					}
					inf3.read++;
					inf3.write++;
					this.checkExpr(e3);
					break;
				case 9:
					var _g26 = _g21.regs;
					var _g25 = _g21.e;
					var _g29 = _g25.t;
					var _g28 = _g25.p;
					var _g27 = _g25.e;
					if(_g27._hx_index == 1) {
						var e4 = _g9;
						var v4 = _g27.v;
						var inf4 = this.get(v4);
						if(inf4.write == 0) {
							inf4.requireInit = true;
						}
						inf4.read++;
						inf4.write++;
						this.checkExpr(e4);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var init = _g.init;
			var v5 = _g.v;
			var inf5 = this.get(v5);
			inf5.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf5.write++;
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v6 = _g.v;
			this.checkExpr(it);
			var inf6 = this.get(v6);
			inf6.local = true;
			inf6.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
Math.__name__ = "Math";
var stb_format_tools_Crc32 = function() { };
$hxClasses["stb.format.tools.Crc32"] = stb_format_tools_Crc32;
stb_format_tools_Crc32.__name__ = "stb.format.tools.Crc32";
stb_format_tools_Crc32.init = function() {
	if(stb_format_tools_Crc32.table != null) {
		return;
	}
	var this1 = new Array(256);
	stb_format_tools_Crc32.table = this1;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		stb_format_tools_Crc32.table[i] = s;
	}
};
var stb_format_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = stb_format_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["stb.format.vorbis.Reader"] = stb_format_vorbis_Reader;
stb_format_vorbis_Reader.__name__ = "stb.format.vorbis.Reader";
stb_format_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var bytes1 = input;
	return new stb_format_vorbis_Reader(input,function(pos) {
		stb_format_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
};
stb_format_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
stb_format_vorbis_Reader.prototype = {
	get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,__class__: stb_format_vorbis_Reader
};
var stb_format_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new stb_format_vorbis_data_Page();
	stb_format_tools_Crc32.init();
};
$hxClasses["stb.format.vorbis.VorbisDecodeState"] = stb_format_vorbis_VorbisDecodeState;
stb_format_vorbis_VorbisDecodeState.__name__ = "stb.format.vorbis.VorbisDecodeState";
stb_format_vorbis_VorbisDecodeState.prototype = {
	setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var this1 = new Array(segmentCount);
		var vec = this1;
		var _g = 0;
		var _g1 = segmentCount;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i1 = segmentCount - 1;
			while(i1 >= 0) {
				if(this.segments[i1] < 255) {
					break;
				}
				if(i1 >= 0) {
					this.endSegWithKnownLoc = i1;
					this.knownLocForPacket = loc0;
				}
				--i1;
			}
		}
		if(this.firstDecode) {
			var i2 = 0;
			var len = 0;
			var p = new stb_format_vorbis_data_ProbedPage();
			var _g2 = 0;
			var _g11 = segmentCount;
			while(_g2 < _g11) {
				var i3 = _g2++;
				len += this.segments[i3];
			}
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Object.create(stb_format_vorbis_VorbisDecodeState.prototype);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof stb_format_vorbis_data_ReaderError)) {
					this.lastSeg = true;
					this.error = e1;
					return 0;
				} else {
					throw e;
				}
			}
			if((this.page.flag & 1) == 0) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 171, className : "stb.format.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 193, className : "stb.format.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof haxe_io_Eof)) {
					var e2 = e1;
					eof = true;
					x = 0;
				} else {
					throw e;
				}
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 218, className : "stb.format.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z1 = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z1;
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 307, className : "stb.format.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 310, className : "stb.format.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		} else {
			var tmp = previousLength == 0 && currentLocValid;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = _$UInt_UInt_$Impl_$.gte(inputLength,65536) && _$UInt_UInt_$Impl_$.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g._hx_index) {
		case 0:
			var l = _g.last;
			var e = _g.end;
			end = e;
			last = l;
			break;
		case 1:
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 518, className : "stb.format.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		var lastPageLoc = this.inputPosition;
		_hx_loop1: while(!last) {
			seekFunc(this.inputPosition = end);
			var _g3 = this.findPage(seekFunc,inputLength);
			switch(_g3._hx_index) {
			case 0:
				var l1 = _g3.last;
				var e1 = _g3.end;
				end = e1;
				last = l1;
				break;
			case 1:
				break _hx_loop1;
			}
			previousSafe = lastPageLoc + 1;
			lastPageLoc = this.inputPosition;
		}
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var this1 = new Array(6);
		var vec = this1;
		var _g1 = 0;
		var _g11 = 6;
		while(_g1 < _g11) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		var vorbisHeader = vec;
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 552, className : "stb.format.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new stb_format_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				var n = this.input.readByte();
				if(n == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var this1 = new Array(27);
					var header = this1;
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					this.inputPosition += 1;
					header[4] = this.input.readByte();
					this.inputPosition += 1;
					header[5] = this.input.readByte();
					this.inputPosition += 1;
					header[6] = this.input.readByte();
					this.inputPosition += 1;
					header[7] = this.input.readByte();
					this.inputPosition += 1;
					header[8] = this.input.readByte();
					this.inputPosition += 1;
					header[9] = this.input.readByte();
					this.inputPosition += 1;
					header[10] = this.input.readByte();
					this.inputPosition += 1;
					header[11] = this.input.readByte();
					this.inputPosition += 1;
					header[12] = this.input.readByte();
					this.inputPosition += 1;
					header[13] = this.input.readByte();
					this.inputPosition += 1;
					header[14] = this.input.readByte();
					this.inputPosition += 1;
					header[15] = this.input.readByte();
					this.inputPosition += 1;
					header[16] = this.input.readByte();
					this.inputPosition += 1;
					header[17] = this.input.readByte();
					this.inputPosition += 1;
					header[18] = this.input.readByte();
					this.inputPosition += 1;
					header[19] = this.input.readByte();
					this.inputPosition += 1;
					header[20] = this.input.readByte();
					this.inputPosition += 1;
					header[21] = this.input.readByte();
					this.inputPosition += 1;
					header[22] = this.input.readByte();
					this.inputPosition += 1;
					header[23] = this.input.readByte();
					this.inputPosition += 1;
					header[24] = this.input.readByte();
					this.inputPosition += 1;
					header[25] = this.input.readByte();
					this.inputPosition += 1;
					header[26] = this.input.readByte();
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					header[22] = 0;
					header[23] = 0;
					header[24] = 0;
					header[25] = 0;
					var crc = 0;
					var _g = 0;
					while(_g < 27) {
						var i = _g++;
						crc = crc << 8 ^ stb_format_tools_Crc32.table[header[i] ^ crc >>> 24];
					}
					var len = 0;
					try {
						var _g1 = 0;
						var _g2 = header[26];
						while(_g1 < _g2) {
							var i1 = _g1++;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ stb_format_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g3 = 0;
						var _g4 = len;
						while(_g3 < _g4) {
							var i2 = _g3++;
							this.inputPosition += 1;
							var byte = this.input.readByte();
							crc = crc << 8 ^ stb_format_tools_Crc32.table[byte ^ crc >>> 24];
						}
					} catch( e ) {
						var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
						if(((e1) instanceof haxe_io_Eof)) {
							var e2 = e1;
							return stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else {
							throw e;
						}
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return stb_format_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof haxe_io_Eof)) {
				var e5 = e4;
				return stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else {
				throw e3;
			}
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new stb_format_vorbis_data_ProbedPage();
		var this1 = new Array(255);
		var packetType = this1;
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var this2 = new Array(27);
		var vec = this2;
		var _g = 0;
		var _g1 = 27;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		var pageHeader = vec;
		var n = pageHeader[26];
		this.inputPosition += n;
		var this3 = new Array(n);
		var vec1 = this3;
		var _g2 = 0;
		var _g11 = n;
		while(_g2 < _g11) {
			var i1 = _g2++;
			vec1[i1] = this.input.readByte();
		}
		var lacing = vec1;
		var len = 0;
		var _g3 = 0;
		var _g12 = pageHeader[26];
		while(_g3 < _g12) {
			var i2 = _g3++;
			len += lacing[i2];
		}
		z.pageEnd = z.pageStart + 27 + pageHeader[26] + len;
		z.lastDecodedSample = pageHeader[6] + (pageHeader[7] << 8) + (pageHeader[8] << 16) + (pageHeader[9] << 16);
		if((pageHeader[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (pageHeader[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g21 = 0;
		var _g31 = pageHeader[26];
		while(_g21 < _g31) {
			var i3 = _g21++;
			if(packetStart) {
				if(lacing[i3] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n1 = this.input.readByte();
				if((n1 & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n1 >>= 1;
				var n2 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				var b = n2 < 16384 ? n2 < 16 ? log2_4[n2] : n2 < 512 ? 5 + log2_4[n2 >> 5] : 10 + log2_4[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_4[n2 >> 15] : 20 + log2_4[n2 >> 20] : n2 < 536870912 ? 25 + log2_4[n2 >> 25] : n2 < -2147483648 ? 30 + log2_4[n2 >> 30] : 0;
				n1 &= (1 << b) - 1;
				if(n1 >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n1].blockflag;
				var len1 = lacing[i3] - 1;
				this.inputPosition += len1;
				var this4 = new Array(len1);
				var vec2 = this4;
				var _g4 = 0;
				var _g13 = len1;
				while(_g4 < _g13) {
					var i4 = _g4++;
					vec2[i4] = this.input.readByte();
				}
			} else {
				var len2 = lacing[i3];
				this.inputPosition += len2;
				var this5 = new Array(len2);
				var vec3 = this5;
				var _g5 = 0;
				var _g14 = len2;
				while(_g5 < _g14) {
					var i5 = _g5++;
					vec3[i5] = this.input.readByte();
				}
			}
			packetStart = lacing[i3] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples += packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i6 = numPacket - 2;
		while(i6 >= 1) {
			--i6;
			if(packetType[i6]) {
				if(packetType[i6 + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i6;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n1 = c.sortedEntries;
			while(n1 > 1) {
				var m = x + (n1 >> 1);
				if(_$UInt_UInt_$Impl_$.gte(code,sortedCodewords[m])) {
					x = m;
					n1 -= n1 >> 1;
				} else {
					n1 >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var i = _g++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 846, className : "stb.format.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: stb_format_vorbis_VorbisDecodeState
};
var stb_format_vorbis__$VorbisDecodeState_FindPageResult = $hxEnums["stb.format.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : "stb.format.vorbis._VorbisDecodeState.FindPageResult", __constructs__ : ["Found","NotFound"]
	,Found: ($_=function(end,last) { return {_hx_index:0,end:end,last:last,__enum__:"stb.format.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}; },$_.__params__ = ["end","last"],$_)
	,NotFound: {_hx_index:1,__enum__:"stb.format.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}
};
stb_format_vorbis__$VorbisDecodeState_FindPageResult.__empty_constructs__ = [stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound];
var stb_format_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	var this1 = new Array(header.channel);
	this.channelBuffers = this1;
	var this2 = new Array(header.channel);
	this.previousWindow = this2;
	var this3 = new Array(header.channel);
	this.finalY = this3;
	var _g = 0;
	var _g1 = header.channel;
	while(_g < _g1) {
		var i = _g++;
		var this4 = this.channelBuffers;
		var this5 = new Array(header.blocksize1);
		var vec = this5;
		this4[i] = vec;
		var this6 = this.previousWindow;
		var this7 = new Array(header.blocksize1 / 2 | 0);
		var vec1 = this7;
		this6[i] = vec1;
		this.finalY[i] = [];
	}
	var this8 = new Array(2);
	this.a = this8;
	var this9 = new Array(2);
	this.b = this9;
	var this10 = new Array(2);
	this.c = this10;
	var this11 = new Array(2);
	this.window = this11;
	var this12 = new Array(2);
	this.bitReverseData = this12;
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["stb.format.vorbis.VorbisDecoder"] = stb_format_vorbis_VorbisDecoder;
stb_format_vorbis_VorbisDecoder.__name__ = "stb.format.vorbis.VorbisDecoder";
stb_format_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new stb_format_vorbis_VorbisDecodeState(input);
	var header = stb_format_vorbis_data_Header.read(decodeState);
	var decoder = new stb_format_vorbis_VorbisDecoder(header,decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
stb_format_vorbis_VorbisDecoder.prototype = {
	read: function(output,samples,channels,sampleRate,useFloat) {
		var b = this.header.sampleRate;
		if((_$UInt_UInt_$Impl_$.toFloat(sampleRate) % _$UInt_UInt_$Impl_$.toFloat(b) | 0) != 0) {
			throw new js__$Boot_HaxeError("Unsupported sampleRate : can't convert " + (this.header.sampleRate == null ? "null" : Std.string(_$UInt_UInt_$Impl_$.toFloat(this.header.sampleRate))) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw new js__$Boot_HaxeError("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var b1 = this.header.sampleRate;
		var sampleRepeat = _$UInt_UInt_$Impl_$.toFloat(sampleRate) / _$UInt_UInt_$Impl_$.toFloat(b1) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var tot = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g = this.channelBufferStart;
			var _g1 = this.channelBufferStart + k;
			while(_g < _g1) {
				var j = _g++;
				var _g2 = 0;
				var _g11 = sampleRepeat;
				while(_g2 < _g11) {
					var sr = _g2++;
					var _g3 = 0;
					var _g12 = this.header.channel;
					while(_g3 < _g12) {
						var i = _g3++;
						var _g4 = 0;
						var _g13 = channelRepeat;
						while(_g4 < _g13) {
							var cr = _g4++;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output.writeFloat(value);
							} else {
								output.writeInt16(Math.floor(value * 32767));
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g5 = n;
		var _g14 = len;
		while(_g5 < _g14) {
			var j1 = _g5++;
			var _g6 = 0;
			var _g15 = sampleRepeat;
			while(_g6 < _g15) {
				var sr1 = _g6++;
				var _g7 = 0;
				var _g16 = this.header.channel;
				while(_g7 < _g16) {
					var i1 = _g7++;
					var _g8 = 0;
					var _g17 = channelRepeat;
					while(_g8 < _g17) {
						var cr1 = _g8++;
						if(useFloat) {
							output.writeFloat(0);
						} else {
							output.writeInt16(0);
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 184, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 216, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(_$UInt_UInt_$Impl_$.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(_$UInt_UInt_$Impl_$.toFloat(endOffset - startOffset) / _$UInt_UInt_$Impl_$.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					probe = attempts >= 8 ? probe2 : _$UInt_UInt_$Impl_$.gt(probe2,probe) ? probe + (probe2 - probe >>> 1) : probe2 + (probe - probe2 >>> 1);
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				var _g = this.decodeState.findPage(seekFunc,inputLength);
				switch(_g._hx_index) {
				case 0:
					var _g2 = _g.last;
					var _g1 = _g.end;
					break;
				case 1:
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 246, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 252, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 272, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g = 0;
			var _g1 = this.header.channel;
			while(_g < _g1) {
				var i = _g++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g2 = 0;
				var _g11 = n;
				while(_g2 < _g11) {
					var j = _g2++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g3 = 0;
		var _g12 = this.header.channel;
		while(_g3 < _g12) {
			var i1 = _g3++;
			var pw1 = this.previousWindow[i1];
			var cb1 = this.channelBuffers[i1];
			var _g4 = 0;
			var _g13 = len - right;
			while(_g4 < _g13) {
				var j1 = _g4++;
				pw1[j1] = cb1[right + j1];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			return null;
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = this.a;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this3 = this.b;
		var this4 = new Array(n2);
		this3[bs] = this4;
		var this5 = this.c;
		var this6 = new Array(n4);
		this5[bs] = this6;
		var this7 = this.window;
		var this8 = new Array(n2);
		this7[bs] = this8;
		var this9 = this.bitReverseData;
		var this10 = new Array(n8);
		this9[bs] = this10;
		stb_format_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		stb_format_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		stb_format_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = new Array(n2);
		var buf2 = this1;
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		var eStopOffset = n2;
		while(eOffset != eStopOffset) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var u = buffer;
		var v = buf2;
		var aaOffset1 = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset1 >= 0) {
			var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
			var v40_20 = v[eOffset0] - v[eOffset1];
			u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
			u[dOffset0] = v[eOffset0] + v[eOffset1];
			u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
			u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
			v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
			v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
			u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
			u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
			u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
			u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
			aaOffset1 -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
			u[eeOffset0] += u[eeOffset2];
			u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
			k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
			u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
			u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
			u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
			k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
			u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
			u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
			u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
			k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
			u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
			u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
			u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off1 = n2 - 1 - n4;
		var eeOffset01 = i_off1;
		var eeOffset21 = i_off1 + -(n >> 3);
		var aOffset1 = 0;
		var i1 = (n >> 4 >> 2) + 1;
		while(--i1 > 0) {
			var k00_201 = u[eeOffset01] - u[eeOffset21];
			var k01_211 = u[eeOffset01 + (-1)] - u[eeOffset21 + (-1)];
			u[eeOffset01] += u[eeOffset21];
			u[eeOffset01 + (-1)] += u[eeOffset21 + (-1)];
			u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-1)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + (-2)] - u[eeOffset21 + (-2)];
			k01_211 = u[eeOffset01 + (-3)] - u[eeOffset21 + (-3)];
			u[eeOffset01 + (-2)] += u[eeOffset21 + (-2)];
			u[eeOffset01 + (-3)] += u[eeOffset21 + (-3)];
			u[eeOffset21 + (-2)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-3)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + (-4)] - u[eeOffset21 + (-4)];
			k01_211 = u[eeOffset01 + (-5)] - u[eeOffset21 + (-5)];
			u[eeOffset01 + (-4)] += u[eeOffset21 + (-4)];
			u[eeOffset01 + (-5)] += u[eeOffset21 + (-5)];
			u[eeOffset21 + (-4)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-5)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + (-6)] - u[eeOffset21 + (-6)];
			k01_211 = u[eeOffset01 + (-7)] - u[eeOffset21 + (-7)];
			u[eeOffset01 + (-6)] += u[eeOffset21 + (-6)];
			u[eeOffset01 + (-7)] += u[eeOffset21 + (-7)];
			u[eeOffset21 + (-6)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-7)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			eeOffset01 -= 8;
			eeOffset21 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset2 = 0;
		var eOffset01 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i2 = (n >> 5 >> 2) + 1;
		while(--i2 > 0) {
			var k00_202 = u[eOffset01] - u[eOffset2];
			var k01_212 = u[eOffset01 + (-1)] - u[eOffset2 + (-1)];
			u[eOffset01] += u[eOffset2];
			u[eOffset01 + (-1)] += u[eOffset2 + (-1)];
			u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-1)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + (-2)] - u[eOffset2 + (-2)];
			k01_212 = u[eOffset01 + (-3)] - u[eOffset2 + (-3)];
			u[eOffset01 + (-2)] += u[eOffset2 + (-2)];
			u[eOffset01 + (-3)] += u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-3)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + (-4)] - u[eOffset2 + (-4)];
			k01_212 = u[eOffset01 + (-5)] - u[eOffset2 + (-5)];
			u[eOffset01 + (-4)] += u[eOffset2 + (-4)];
			u[eOffset01 + (-5)] += u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-5)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + (-6)] - u[eOffset2 + (-6)];
			k01_212 = u[eOffset01 + (-7)] - u[eOffset2 + (-7)];
			u[eOffset01 + (-6)] += u[eOffset2 + (-6)];
			u[eOffset01 + (-7)] += u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-7)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			eOffset01 -= 8;
			eOffset2 -= 8;
			aOffset2 += 16;
		}
		var d01 = n2 - 1 - n8;
		var aOffset3 = 0;
		var eOffset02 = d01;
		var eOffset21 = d01 + -(n >> 4);
		var i3 = (n >> 5 >> 2) + 1;
		while(--i3 > 0) {
			var k00_203 = u[eOffset02] - u[eOffset21];
			var k01_213 = u[eOffset02 + (-1)] - u[eOffset21 + (-1)];
			u[eOffset02] += u[eOffset21];
			u[eOffset02 + (-1)] += u[eOffset21 + (-1)];
			u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-1)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + (-2)] - u[eOffset21 + (-2)];
			k01_213 = u[eOffset02 + (-3)] - u[eOffset21 + (-3)];
			u[eOffset02 + (-2)] += u[eOffset21 + (-2)];
			u[eOffset02 + (-3)] += u[eOffset21 + (-3)];
			u[eOffset21 + (-2)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-3)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + (-4)] - u[eOffset21 + (-4)];
			k01_213 = u[eOffset02 + (-5)] - u[eOffset21 + (-5)];
			u[eOffset02 + (-4)] += u[eOffset21 + (-4)];
			u[eOffset02 + (-5)] += u[eOffset21 + (-5)];
			u[eOffset21 + (-4)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-5)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + (-6)] - u[eOffset21 + (-6)];
			k01_213 = u[eOffset02 + (-7)] - u[eOffset21 + (-7)];
			u[eOffset02 + (-6)] += u[eOffset21 + (-6)];
			u[eOffset02 + (-7)] += u[eOffset21 + (-7)];
			u[eOffset21 + (-6)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-7)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			eOffset02 -= 8;
			eOffset21 -= 8;
			aOffset3 += 16;
		}
		var d02 = n2 - 1 - n8 * 2;
		var aOffset4 = 0;
		var eOffset03 = d02;
		var eOffset22 = d02 + -(n >> 4);
		var i4 = (n >> 5 >> 2) + 1;
		while(--i4 > 0) {
			var k00_204 = u[eOffset03] - u[eOffset22];
			var k01_214 = u[eOffset03 + (-1)] - u[eOffset22 + (-1)];
			u[eOffset03] += u[eOffset22];
			u[eOffset03 + (-1)] += u[eOffset22 + (-1)];
			u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-1)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + (-2)] - u[eOffset22 + (-2)];
			k01_214 = u[eOffset03 + (-3)] - u[eOffset22 + (-3)];
			u[eOffset03 + (-2)] += u[eOffset22 + (-2)];
			u[eOffset03 + (-3)] += u[eOffset22 + (-3)];
			u[eOffset22 + (-2)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-3)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + (-4)] - u[eOffset22 + (-4)];
			k01_214 = u[eOffset03 + (-5)] - u[eOffset22 + (-5)];
			u[eOffset03 + (-4)] += u[eOffset22 + (-4)];
			u[eOffset03 + (-5)] += u[eOffset22 + (-5)];
			u[eOffset22 + (-4)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-5)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + (-6)] - u[eOffset22 + (-6)];
			k01_214 = u[eOffset03 + (-7)] - u[eOffset22 + (-7)];
			u[eOffset03 + (-6)] += u[eOffset22 + (-6)];
			u[eOffset03 + (-7)] += u[eOffset22 + (-7)];
			u[eOffset22 + (-6)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-7)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			eOffset03 -= 8;
			eOffset22 -= 8;
			aOffset4 += 16;
		}
		var d03 = n2 - 1 - n8 * 3;
		var aOffset5 = 0;
		var eOffset04 = d03;
		var eOffset23 = d03 + -(n >> 4);
		var i5 = (n >> 5 >> 2) + 1;
		while(--i5 > 0) {
			var k00_205 = u[eOffset04] - u[eOffset23];
			var k01_215 = u[eOffset04 + (-1)] - u[eOffset23 + (-1)];
			u[eOffset04] += u[eOffset23];
			u[eOffset04 + (-1)] += u[eOffset23 + (-1)];
			u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-1)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + (-2)] - u[eOffset23 + (-2)];
			k01_215 = u[eOffset04 + (-3)] - u[eOffset23 + (-3)];
			u[eOffset04 + (-2)] += u[eOffset23 + (-2)];
			u[eOffset04 + (-3)] += u[eOffset23 + (-3)];
			u[eOffset23 + (-2)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-3)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + (-4)] - u[eOffset23 + (-4)];
			k01_215 = u[eOffset04 + (-5)] - u[eOffset23 + (-5)];
			u[eOffset04 + (-4)] += u[eOffset23 + (-4)];
			u[eOffset04 + (-5)] += u[eOffset23 + (-5)];
			u[eOffset23 + (-4)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-5)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + (-6)] - u[eOffset23 + (-6)];
			k01_215 = u[eOffset04 + (-7)] - u[eOffset23 + (-7)];
			u[eOffset04 + (-6)] += u[eOffset23 + (-6)];
			u[eOffset04 + (-7)] += u[eOffset23 + (-7)];
			u[eOffset23 + (-6)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-7)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			eOffset04 -= 8;
			eOffset23 -= 8;
			aOffset5 += 16;
		}
		var _g = 2;
		var _g1 = ld - 3 >> 1;
		while(_g < _g1) {
			var l = _g++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g2 = 0;
			var _g11 = lim;
			while(_g2 < _g11) {
				var i6 = _g2++;
				var d04 = n2 - 1 - k0 * i6;
				var k1 = 1 << l + 3;
				var aOffset6 = 0;
				var eOffset05 = d04;
				var eOffset24 = d04 + -k0_2;
				var i7 = (n >> l + 4 >> 2) + 1;
				while(--i7 > 0) {
					var k00_206 = u[eOffset05] - u[eOffset24];
					var k01_216 = u[eOffset05 + (-1)] - u[eOffset24 + (-1)];
					u[eOffset05] += u[eOffset24];
					u[eOffset05 + (-1)] += u[eOffset24 + (-1)];
					u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-1)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + (-2)] - u[eOffset24 + (-2)];
					k01_216 = u[eOffset05 + (-3)] - u[eOffset24 + (-3)];
					u[eOffset05 + (-2)] += u[eOffset24 + (-2)];
					u[eOffset05 + (-3)] += u[eOffset24 + (-3)];
					u[eOffset24 + (-2)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-3)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + (-4)] - u[eOffset24 + (-4)];
					k01_216 = u[eOffset05 + (-5)] - u[eOffset24 + (-5)];
					u[eOffset05 + (-4)] += u[eOffset24 + (-4)];
					u[eOffset05 + (-5)] += u[eOffset24 + (-5)];
					u[eOffset24 + (-4)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-5)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + (-6)] - u[eOffset24 + (-6)];
					k01_216 = u[eOffset05 + (-7)] - u[eOffset24 + (-7)];
					u[eOffset05 + (-6)] += u[eOffset24 + (-6)];
					u[eOffset05 + (-7)] += u[eOffset24 + (-7)];
					u[eOffset24 + (-6)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-7)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					eOffset05 -= 8;
					eOffset24 -= 8;
					aOffset6 += k1;
				}
			}
		}
		var _g21 = ld - 3 >> 1;
		var _g3 = ld - 6;
		while(_g21 < _g3) {
			var l1 = _g21++;
			var k01 = n >> l1 + 2;
			var k11 = 1 << l1 + 3;
			var k0_21 = k01 >> 1;
			var rlim = n >> l1 + 6;
			var lim1 = 1 << l1 + 1;
			var aOffset7 = 0;
			var i_off2 = n2 - 1;
			var r = rlim + 1;
			while(--r > 0) {
				var A0 = a[aOffset7];
				var A1 = a[aOffset7 + 1];
				var A2 = a[aOffset7 + k11];
				var A3 = a[aOffset7 + k11 + 1];
				var A4 = a[aOffset7 + k11 * 2];
				var A5 = a[aOffset7 + k11 * 2 + 1];
				var A6 = a[aOffset7 + k11 * 3];
				var A7 = a[aOffset7 + k11 * 3 + 1];
				var eeOffset02 = i_off2;
				var eeOffset22 = i_off2 + -k0_21;
				var i8 = lim1 + 1;
				while(--i8 > 0) {
					var k00 = u[eeOffset02] - u[eeOffset22];
					var k111 = u[eeOffset02 + (-1)] - u[eeOffset22 + (-1)];
					u[eeOffset02] += u[eeOffset22];
					u[eeOffset02 + (-1)] += u[eeOffset22 + (-1)];
					u[eeOffset22] = k00 * A0 - k111 * A1;
					u[eeOffset22 + (-1)] = k111 * A0 + k00 * A1;
					k00 = u[eeOffset02 + (-2)] - u[eeOffset22 + (-2)];
					k111 = u[eeOffset02 + (-3)] - u[eeOffset22 + (-3)];
					u[eeOffset02 + (-2)] += u[eeOffset22 + (-2)];
					u[eeOffset02 + (-3)] += u[eeOffset22 + (-3)];
					u[eeOffset22 + (-2)] = k00 * A2 - k111 * A3;
					u[eeOffset22 + (-3)] = k111 * A2 + k00 * A3;
					k00 = u[eeOffset02 + (-4)] - u[eeOffset22 + (-4)];
					k111 = u[eeOffset02 + (-5)] - u[eeOffset22 + (-5)];
					u[eeOffset02 + (-4)] += u[eeOffset22 + (-4)];
					u[eeOffset02 + (-5)] += u[eeOffset22 + (-5)];
					u[eeOffset22 + (-4)] = k00 * A4 - k111 * A5;
					u[eeOffset22 + (-5)] = k111 * A4 + k00 * A5;
					k00 = u[eeOffset02 + (-6)] - u[eeOffset22 + (-6)];
					k111 = u[eeOffset02 + (-7)] - u[eeOffset22 + (-7)];
					u[eeOffset02 + (-6)] += u[eeOffset22 + (-6)];
					u[eeOffset02 + (-7)] += u[eeOffset22 + (-7)];
					u[eeOffset22 + (-6)] = k00 * A6 - k111 * A7;
					u[eeOffset22 + (-7)] = k111 * A6 + k00 * A7;
					eeOffset02 -= k01;
					eeOffset22 -= k01;
				}
				aOffset7 += k11 * 4;
				i_off2 -= 8;
			}
		}
		var i_off3 = n2 - 1;
		var A21 = a[n >> 3];
		var zOffset = i_off3;
		var baseOffset = i_off3 - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = u[zOffset];
			var t1 = u[zOffset + (-8)];
			u[zOffset + (-8)] = t0 - t1;
			u[zOffset] = t0 + t1;
			t0 = u[zOffset + (-1)];
			t1 = u[zOffset + (-9)];
			u[zOffset + (-9)] = t0 - t1;
			u[zOffset + (-1)] = t0 + t1;
			t0 = u[zOffset + (-2)];
			t1 = u[zOffset + (-10)];
			var k001 = t0 - t1;
			u[zOffset + (-2)] = t0 + t1;
			t0 = u[zOffset + (-3)];
			t1 = u[zOffset + (-11)];
			var k112 = t0 - t1;
			u[zOffset + (-3)] = t0 + t1;
			u[zOffset + (-10)] = (k001 + k112) * A21;
			u[zOffset + (-11)] = (k112 - k001) * A21;
			t0 = u[zOffset + (-4)];
			t1 = u[zOffset + (-12)];
			k001 = t1 - t0;
			u[zOffset + (-4)] = t0 + t1;
			t0 = u[zOffset + (-5)];
			t1 = u[zOffset + (-13)];
			k112 = t0 - t1;
			u[zOffset + (-5)] = t0 + t1;
			u[zOffset + (-12)] = k112;
			u[zOffset + (-13)] = k001;
			t0 = u[zOffset + (-6)];
			t1 = u[zOffset + (-14)];
			k001 = t1 - t0;
			u[zOffset + (-6)] = t0 + t1;
			t0 = u[zOffset + (-7)];
			t1 = u[zOffset + (-15)];
			k112 = t0 - t1;
			u[zOffset + (-7)] = t0 + t1;
			u[zOffset + (-14)] = (k001 + k112) * A21;
			u[zOffset + (-15)] = (k001 - k112) * A21;
			var t01 = u[zOffset];
			var t11 = u[zOffset + (-4)];
			var k002 = t01 - t11;
			var y0 = t01 + t11;
			t01 = u[zOffset + (-2)];
			t11 = u[zOffset + (-6)];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			u[zOffset] = y0 + y2;
			u[zOffset + (-2)] = y0 - y2;
			var k33 = u[zOffset + (-3)] - u[zOffset + (-7)];
			u[zOffset + (-4)] = k002 + k33;
			u[zOffset + (-6)] = k002 - k33;
			t01 = u[zOffset + (-1)];
			t11 = u[zOffset + (-5)];
			var k113 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = u[zOffset + (-3)] + u[zOffset + (-7)];
			u[zOffset + (-1)] = y1 + y3;
			u[zOffset + (-3)] = y1 - y3;
			u[zOffset + (-5)] = k113 - k22;
			u[zOffset + (-7)] = k113 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = u[zOffset1];
			var t12 = u[zOffset1 + (-4)];
			var k003 = t02 - t12;
			var y01 = t02 + t12;
			t02 = u[zOffset1 + (-2)];
			t12 = u[zOffset1 + (-6)];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			u[zOffset1] = y01 + y21;
			u[zOffset1 + (-2)] = y01 - y21;
			var k331 = u[zOffset1 + (-3)] - u[zOffset1 + (-7)];
			u[zOffset1 + (-4)] = k003 + k331;
			u[zOffset1 + (-6)] = k003 - k331;
			t02 = u[zOffset1 + (-1)];
			t12 = u[zOffset1 + (-5)];
			var k114 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = u[zOffset1 + (-3)] + u[zOffset1 + (-7)];
			u[zOffset1 + (-1)] = y11 + y31;
			u[zOffset1 + (-3)] = y11 - y31;
			u[zOffset1 + (-5)] = k114 - k221;
			u[zOffset1 + (-7)] = k114 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset01 = n4 - 4;
		var dOffset11 = n2 - 4;
		while(dOffset01 >= 0) {
			var k4 = bitReverse[brOffset];
			v[dOffset11 + 3] = u[k4];
			v[dOffset11 + 2] = u[k4 + 1];
			v[dOffset01 + 3] = u[k4 + 2];
			v[dOffset01 + 2] = u[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			v[dOffset11 + 1] = u[k4];
			v[dOffset11] = u[k4 + 1];
			v[dOffset01 + 1] = u[k4 + 2];
			v[dOffset01] = u[k4 + 3];
			dOffset01 -= 4;
			dOffset11 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset2 = 0;
		var eOffset3 = n2 - 4;
		while(dOffset2 < eOffset3) {
			var a02 = v[dOffset2] - v[eOffset3 + 2];
			var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = v[dOffset2] + v[eOffset3 + 2];
			var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
			v[dOffset2] = b2 + b0;
			v[dOffset2 + 1] = b3 + b1;
			v[eOffset3 + 2] = b2 - b0;
			v[eOffset3 + 3] = b1 - b3;
			a02 = v[dOffset2 + 2] - v[eOffset3];
			a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = v[dOffset2 + 2] + v[eOffset3];
			b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
			v[dOffset2 + 2] = b2 + b0;
			v[dOffset2 + 3] = b3 + b1;
			v[eOffset3] = b2 - b0;
			v[eOffset3 + 1] = b1 - b3;
			cOffset += 4;
			dOffset2 += 4;
			eOffset3 -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset4 = n2 - 8;
		var dOffset02 = 0;
		var dOffset12 = n2 - 4;
		var dOffset21 = n2;
		var dOffset3 = n - 4;
		while(eOffset4 >= 0) {
			var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
			buffer[dOffset02] = p3;
			buffer[dOffset12 + 3] = -p3;
			buffer[dOffset21] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
			buffer[dOffset02 + 1] = p1;
			buffer[dOffset12 + 2] = -p1;
			buffer[dOffset21 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
			buffer[dOffset02 + 2] = p3;
			buffer[dOffset12 + 1] = -p3;
			buffer[dOffset21 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
			p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
			buffer[dOffset02 + 3] = p1;
			buffer[dOffset12] = -p1;
			buffer[dOffset21 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset4 -= 8;
			dOffset02 += 4;
			dOffset21 += 4;
			dOffset12 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		var rest = this.decodePacketRest(result);
		return rest;
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			var _this = this.decodeState;
			var tmp;
			if(_this.validBits < 0) {
				tmp = 0;
			} else if(_this.validBits < 1) {
				if(_this.validBits == 0) {
					_this.acc = 0;
				}
				while(true) {
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						_this.validBits = -1;
						break;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						_this.acc = _this.acc + (_this.input.readByte() << _this.validBits);
						_this.validBits += 8;
					}
					if(!(_this.validBits < 1)) {
						break;
					}
				}
				if(_this.validBits < 0) {
					tmp = 0;
				} else {
					var z = _this.acc & 1;
					_this.acc = _this.acc >>> 1;
					_this.validBits -= 1;
					tmp = z;
				}
			} else {
				var z1 = _this.acc & 1;
				_this.acc = _this.acc >>> 1;
				_this.validBits -= 1;
				tmp = z1;
			}
			if(tmp != 0) {
				while(true) {
					var _this1 = this.decodeState;
					var x;
					if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
						x = -1;
					} else {
						_this1.bytesInSeg--;
						_this1.inputPosition += 1;
						x = _this1.input.readByte();
					}
					_this1.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var _this2 = this.decodeState;
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var n1 = n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0;
		var i;
		if(_this2.validBits < 0) {
			i = 0;
		} else if(_this2.validBits < n1) {
			if(n1 > 24) {
				var i1;
				if(_this2.validBits < 0) {
					i1 = 0;
				} else if(_this2.validBits < 24) {
					if(_this2.validBits == 0) {
						_this2.acc = 0;
					}
					while(true) {
						if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
							_this2.validBits = -1;
							break;
						} else {
							_this2.bytesInSeg--;
							_this2.inputPosition += 1;
							_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
							_this2.validBits += 8;
						}
						if(!(_this2.validBits < 24)) {
							break;
						}
					}
					if(_this2.validBits < 0) {
						i1 = 0;
					} else {
						var z2 = _this2.acc & 16777215;
						_this2.acc = _this2.acc >>> 24;
						_this2.validBits -= 24;
						i1 = z2;
					}
				} else {
					var z3 = _this2.acc & 16777215;
					_this2.acc = _this2.acc >>> 24;
					_this2.validBits -= 24;
					i1 = z3;
				}
				var n2 = n1 - 24;
				var i2;
				if(_this2.validBits < 0) {
					i2 = 0;
				} else if(_this2.validBits < n2) {
					if(n2 > 24) {
						i2 = _this2.readBits(24) + (_this2.readBits(n2 - 24) << 24);
					} else {
						if(_this2.validBits == 0) {
							_this2.acc = 0;
						}
						while(true) {
							if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
								_this2.validBits = -1;
								break;
							} else {
								_this2.bytesInSeg--;
								_this2.inputPosition += 1;
								_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
								_this2.validBits += 8;
							}
							if(!(_this2.validBits < n2)) {
								break;
							}
						}
						if(_this2.validBits < 0) {
							i2 = 0;
						} else {
							var z4 = _this2.acc & (1 << n2) - 1;
							_this2.acc = _this2.acc >>> n2;
							_this2.validBits -= n2;
							i2 = z4;
						}
					}
				} else {
					var z5 = _this2.acc & (1 << n2) - 1;
					_this2.acc = _this2.acc >>> n2;
					_this2.validBits -= n2;
					i2 = z5;
				}
				i = i1 + (i2 << 24);
			} else {
				if(_this2.validBits == 0) {
					_this2.acc = 0;
				}
				while(true) {
					if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
						_this2.validBits = -1;
						break;
					} else {
						_this2.bytesInSeg--;
						_this2.inputPosition += 1;
						_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
						_this2.validBits += 8;
					}
					if(!(_this2.validBits < n1)) {
						break;
					}
				}
				if(_this2.validBits < 0) {
					i = 0;
				} else {
					var z6 = _this2.acc & (1 << n1) - 1;
					_this2.acc = _this2.acc >>> n1;
					_this2.validBits -= n1;
					i = z6;
				}
			}
		} else {
			var z7 = _this2.acc & (1 << n1) - 1;
			_this2.acc = _this2.acc >>> n1;
			_this2.validBits -= n1;
			i = z7;
		}
		if(i == -1 || i >= this.header.modes.length) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 516, className : "stb.format.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n3;
		var prev;
		var next;
		if(m.blockflag) {
			n3 = this.header.blocksize1;
			var _this3 = this.decodeState;
			if(_this3.validBits < 0) {
				prev = 0;
			} else if(_this3.validBits < 1) {
				if(_this3.validBits == 0) {
					_this3.acc = 0;
				}
				while(true) {
					if(_this3.bytesInSeg == 0 && (_this3.lastSeg || _this3.next() == 0)) {
						_this3.validBits = -1;
						break;
					} else {
						_this3.bytesInSeg--;
						_this3.inputPosition += 1;
						_this3.acc = _this3.acc + (_this3.input.readByte() << _this3.validBits);
						_this3.validBits += 8;
					}
					if(!(_this3.validBits < 1)) {
						break;
					}
				}
				if(_this3.validBits < 0) {
					prev = 0;
				} else {
					var z8 = _this3.acc & 1;
					_this3.acc = _this3.acc >>> 1;
					_this3.validBits -= 1;
					prev = z8;
				}
			} else {
				var z9 = _this3.acc & 1;
				_this3.acc = _this3.acc >>> 1;
				_this3.validBits -= 1;
				prev = z9;
			}
			var _this4 = this.decodeState;
			if(_this4.validBits < 0) {
				next = 0;
			} else if(_this4.validBits < 1) {
				if(_this4.validBits == 0) {
					_this4.acc = 0;
				}
				while(true) {
					if(_this4.bytesInSeg == 0 && (_this4.lastSeg || _this4.next() == 0)) {
						_this4.validBits = -1;
						break;
					} else {
						_this4.bytesInSeg--;
						_this4.inputPosition += 1;
						_this4.acc = _this4.acc + (_this4.input.readByte() << _this4.validBits);
						_this4.validBits += 8;
					}
					if(!(_this4.validBits < 1)) {
						break;
					}
				}
				if(_this4.validBits < 0) {
					next = 0;
				} else {
					var z10 = _this4.acc & 1;
					_this4.acc = _this4.acc >>> 1;
					_this4.validBits -= 1;
					next = z10;
				}
			} else {
				var z11 = _this4.acc & 1;
				_this4.acc = _this4.acc >>> 1;
				_this4.validBits -= 1;
				next = z11;
			}
		} else {
			next = 0;
			prev = next;
			n3 = this.header.blocksize0;
		}
		var windowCenter = n3 >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n3 - this.header.blocksize0 >> 2, end : n3 + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n3 * 3 - this.header.blocksize0 >> 2, end : n3 * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n3}};
	}
	,decodePacketRest: function(r) {
		var len = 0;
		var m = this.header.modes[r.mode];
		var this1 = new Array(256);
		var zeroChannel = this1;
		var this2 = new Array(256);
		var reallyZeroChannel = this2;
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 578, className : "stb.format.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				var _this = this.decodeState;
				var tmp;
				if(_this.validBits < 0) {
					tmp = 0;
				} else if(_this.validBits < 1) {
					if(_this.validBits == 0) {
						_this.acc = 0;
					}
					while(true) {
						if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
							_this.validBits = -1;
							break;
						} else {
							_this.bytesInSeg--;
							_this.inputPosition += 1;
							_this.acc = _this.acc + (_this.input.readByte() << _this.validBits);
							_this.validBits += 8;
						}
						if(!(_this.validBits < 1)) {
							break;
						}
					}
					if(_this.validBits < 0) {
						tmp = 0;
					} else {
						var z = _this.acc & 1;
						_this.acc = _this.acc >>> 1;
						_this.validBits -= 1;
						tmp = z;
					}
				} else {
					var z1 = _this.acc & 1;
					_this.acc = _this.acc >>> 1;
					_this.validBits -= 1;
					tmp = z1;
				}
				if(tmp != 0) {
					var fy = [];
					var this3 = new Array(256);
					var step2Flag = this3;
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var _this1 = this.decodeState;
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					var n1 = (range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1;
					var tmp1;
					if(_this1.validBits < 0) {
						tmp1 = 0;
					} else if(_this1.validBits < n1) {
						if(n1 > 24) {
							var tmp2;
							if(_this1.validBits < 0) {
								tmp2 = 0;
							} else if(_this1.validBits < 24) {
								if(_this1.validBits == 0) {
									_this1.acc = 0;
								}
								while(true) {
									if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
										_this1.validBits = -1;
										break;
									} else {
										_this1.bytesInSeg--;
										_this1.inputPosition += 1;
										_this1.acc = _this1.acc + (_this1.input.readByte() << _this1.validBits);
										_this1.validBits += 8;
									}
									if(!(_this1.validBits < 24)) {
										break;
									}
								}
								if(_this1.validBits < 0) {
									tmp2 = 0;
								} else {
									var z2 = _this1.acc & 16777215;
									_this1.acc = _this1.acc >>> 24;
									_this1.validBits -= 24;
									tmp2 = z2;
								}
							} else {
								var z3 = _this1.acc & 16777215;
								_this1.acc = _this1.acc >>> 24;
								_this1.validBits -= 24;
								tmp2 = z3;
							}
							var n3 = n1 - 24;
							var tmp3;
							if(_this1.validBits < 0) {
								tmp3 = 0;
							} else if(_this1.validBits < n3) {
								if(n3 > 24) {
									tmp3 = _this1.readBits(24) + (_this1.readBits(n3 - 24) << 24);
								} else {
									if(_this1.validBits == 0) {
										_this1.acc = 0;
									}
									while(true) {
										if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
											_this1.validBits = -1;
											break;
										} else {
											_this1.bytesInSeg--;
											_this1.inputPosition += 1;
											_this1.acc = _this1.acc + (_this1.input.readByte() << _this1.validBits);
											_this1.validBits += 8;
										}
										if(!(_this1.validBits < n3)) {
											break;
										}
									}
									if(_this1.validBits < 0) {
										tmp3 = 0;
									} else {
										var z4 = _this1.acc & (1 << n3) - 1;
										_this1.acc = _this1.acc >>> n3;
										_this1.validBits -= n3;
										tmp3 = z4;
									}
								}
							} else {
								var z5 = _this1.acc & (1 << n3) - 1;
								_this1.acc = _this1.acc >>> n3;
								_this1.validBits -= n3;
								tmp3 = z5;
							}
							tmp1 = tmp2 + (tmp3 << 24);
						} else {
							if(_this1.validBits == 0) {
								_this1.acc = 0;
							}
							while(true) {
								if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
									_this1.validBits = -1;
									break;
								} else {
									_this1.bytesInSeg--;
									_this1.inputPosition += 1;
									_this1.acc = _this1.acc + (_this1.input.readByte() << _this1.validBits);
									_this1.validBits += 8;
								}
								if(!(_this1.validBits < n1)) {
									break;
								}
							}
							if(_this1.validBits < 0) {
								tmp1 = 0;
							} else {
								var z6 = _this1.acc & (1 << n1) - 1;
								_this1.acc = _this1.acc >>> n1;
								_this1.validBits -= n1;
								tmp1 = z6;
							}
						}
					} else {
						var z7 = _this1.acc & (1 << n1) - 1;
						_this1.acc = _this1.acc >>> n1;
						_this1.validBits -= n1;
						tmp1 = z7;
					}
					fy[0] = tmp1;
					var _this2 = this.decodeState;
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					var n4 = (range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1;
					var tmp4;
					if(_this2.validBits < 0) {
						tmp4 = 0;
					} else if(_this2.validBits < n4) {
						if(n4 > 24) {
							var tmp5;
							if(_this2.validBits < 0) {
								tmp5 = 0;
							} else if(_this2.validBits < 24) {
								if(_this2.validBits == 0) {
									_this2.acc = 0;
								}
								while(true) {
									if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
										_this2.validBits = -1;
										break;
									} else {
										_this2.bytesInSeg--;
										_this2.inputPosition += 1;
										_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
										_this2.validBits += 8;
									}
									if(!(_this2.validBits < 24)) {
										break;
									}
								}
								if(_this2.validBits < 0) {
									tmp5 = 0;
								} else {
									var z8 = _this2.acc & 16777215;
									_this2.acc = _this2.acc >>> 24;
									_this2.validBits -= 24;
									tmp5 = z8;
								}
							} else {
								var z9 = _this2.acc & 16777215;
								_this2.acc = _this2.acc >>> 24;
								_this2.validBits -= 24;
								tmp5 = z9;
							}
							var n5 = n4 - 24;
							var tmp6;
							if(_this2.validBits < 0) {
								tmp6 = 0;
							} else if(_this2.validBits < n5) {
								if(n5 > 24) {
									tmp6 = _this2.readBits(24) + (_this2.readBits(n5 - 24) << 24);
								} else {
									if(_this2.validBits == 0) {
										_this2.acc = 0;
									}
									while(true) {
										if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
											_this2.validBits = -1;
											break;
										} else {
											_this2.bytesInSeg--;
											_this2.inputPosition += 1;
											_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
											_this2.validBits += 8;
										}
										if(!(_this2.validBits < n5)) {
											break;
										}
									}
									if(_this2.validBits < 0) {
										tmp6 = 0;
									} else {
										var z10 = _this2.acc & (1 << n5) - 1;
										_this2.acc = _this2.acc >>> n5;
										_this2.validBits -= n5;
										tmp6 = z10;
									}
								}
							} else {
								var z11 = _this2.acc & (1 << n5) - 1;
								_this2.acc = _this2.acc >>> n5;
								_this2.validBits -= n5;
								tmp6 = z11;
							}
							tmp4 = tmp5 + (tmp6 << 24);
						} else {
							if(_this2.validBits == 0) {
								_this2.acc = 0;
							}
							while(true) {
								if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
									_this2.validBits = -1;
									break;
								} else {
									_this2.bytesInSeg--;
									_this2.inputPosition += 1;
									_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
									_this2.validBits += 8;
								}
								if(!(_this2.validBits < n4)) {
									break;
								}
							}
							if(_this2.validBits < 0) {
								tmp4 = 0;
							} else {
								var z12 = _this2.acc & (1 << n4) - 1;
								_this2.acc = _this2.acc >>> n4;
								_this2.validBits -= n4;
								tmp4 = z12;
							}
						}
					} else {
						var z13 = _this2.acc & (1 << n4) - 1;
						_this2.acc = _this2.acc >>> n4;
						_this2.validBits -= n4;
						tmp4 = z13;
					}
					fy[1] = tmp4;
					var _g2 = 0;
					var _g11 = g.partitions;
					while(_g2 < _g11) {
						var j = _g2++;
						var pclass = g.partitionClassList[j];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this3 = this.decodeState;
							if(_this3.validBits < 10) {
								_this3.prepHuffman();
							}
							var i1 = c.fastHuffman[_this3.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this3.acc = _this3.acc >>> l;
								_this3.validBits -= l;
								if(_this3.validBits < 0) {
									_this3.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this3.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g3 = 0;
						var _g12 = cdim;
						while(_g3 < _g12) {
							var k = _g3++;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp7 = offset++;
							var tmp8;
							if(book >= 0) {
								var _this4 = this.decodeState;
								var c1 = codebooks[book];
								if(_this4.validBits < 10) {
									_this4.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this4.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this4.acc = _this4.acc >>> l1;
									_this4.validBits -= l1;
									if(_this4.validBits < 0) {
										_this4.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this4.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp8 = val1;
							} else {
								tmp8 = 0;
							}
							fy[tmp7] = tmp8;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[0] = step2Flag[1] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g21 = 2;
					var _g31 = g.values;
					while(_g21 < _g31) {
						var j1 = _g21++;
						var low = naighbors[j1][0];
						var high = naighbors[j1][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var adx = xlist[high] - x0;
						var err = Math.abs(dy) * (xlist[j1] - x0);
						var off = err / adx | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j1];
						var highroom = range - lowroom;
						var room = highroom < lowroom ? highroom * 2 : lowroom * 2;
						if(val2 != 0) {
							step2Flag[low] = step2Flag[high] = true;
							step2Flag[j1] = true;
							if(val2 >= room) {
								if(highroom > lowroom) {
									fy[j1] = val2 - lowroom + lowroom;
								} else {
									fy[j1] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j1] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j1] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j1] = false;
							fy[j1] = lowroom;
						}
					}
					var _g4 = 0;
					var _g5 = g.values;
					while(_g4 < _g5) {
						var j2 = _g4++;
						if(!step2Flag[j2]) {
							fy[j2] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g22 = 0;
		var _g32 = this.header.channel;
		while(_g22 < _g32) {
			var i3 = _g22++;
			reallyZeroChannel[i3] = zeroChannel[i3];
		}
		var _g41 = 0;
		var _g51 = map.couplingSteps;
		while(_g41 < _g51) {
			var i4 = _g41++;
			if(!zeroChannel[map.chan[i4].magnitude] || !zeroChannel[map.chan[i4].angle]) {
				zeroChannel[map.chan[i4].magnitude] = zeroChannel[map.chan[i4].angle] = false;
			}
		}
		var _g6 = 0;
		var _g7 = map.submaps;
		while(_g6 < _g7) {
			var i5 = _g6++;
			var this4 = new Array(this.header.channel);
			var residueBuffers = this4;
			var this5 = new Array(256);
			var doNotDecode = this5;
			var ch = 0;
			var _g61 = 0;
			var _g71 = this.header.channel;
			while(_g61 < _g71) {
				var j3 = _g61++;
				if(map.chan[j3].mux == i5) {
					if(zeroChannel[j3]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j3];
					}
					++ch;
				}
			}
			var r1 = map.submapResidue[i5];
			var residue = this.header.residueConfig[r1];
			residue.decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i6 = map.couplingSteps;
		var n21 = n >> 1;
		while(--i6 >= 0) {
			var m1 = this.channelBuffers[map.chan[i6].magnitude];
			var a = this.channelBuffers[map.chan[i6].angle];
			var _g8 = 0;
			var _g9 = n21;
			while(_g8 < _g9) {
				var j4 = _g8++;
				var a2;
				var m2;
				if(m1[j4] > 0) {
					if(a[j4] > 0) {
						m2 = m1[j4];
						a2 = m1[j4] - a[j4];
					} else {
						a2 = m1[j4];
						m2 = m1[j4] + a[j4];
					}
				} else if(a[j4] > 0) {
					m2 = m1[j4];
					a2 = m1[j4] + a[j4];
				} else {
					a2 = m1[j4];
					m2 = m1[j4] - a[j4];
				}
				m1[j4] = m2;
				a[j4] = a2;
			}
		}
		var _g81 = 0;
		var _g91 = this.header.channel;
		while(_g81 < _g91) {
			var i7 = _g81++;
			if(reallyZeroChannel[i7]) {
				var _g82 = 0;
				var _g92 = n21;
				while(_g82 < _g92) {
					var j5 = _g82++;
					this.channelBuffers[i7][j5] = 0;
				}
			} else {
				map.doFloor(this.header.floorConfig,i7,n,this.channelBuffers[i7],this.finalY[i7],null);
			}
		}
		var _g10 = 0;
		var _g111 = this.header.channel;
		while(_g10 < _g111) {
			var i8 = _g10++;
			this.inverseMdct(this.channelBuffers[i8],n,m.blockflag);
		}
		var _this5 = this.decodeState;
		while(_this5.bytesInSeg != 0 || !_this5.lastSeg && _this5.next() != 0) {
			_this5.bytesInSeg--;
			_this5.inputPosition += 1;
			_this5.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: stb_format_vorbis_VorbisDecoder
};
var stb_format_vorbis_VorbisTools = function() { };
$hxClasses["stb.format.vorbis.VorbisTools"] = stb_format_vorbis_VorbisTools;
stb_format_vorbis_VorbisTools.__name__ = "stb.format.vorbis.VorbisTools";
stb_format_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
stb_format_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
stb_format_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	return r;
};
stb_format_vorbis_VorbisTools.computeWindow = function(n,$window) {
	var n2 = n >> 1;
	var _g = 0;
	var _g1 = n2;
	while(_g < _g1) {
		var i = _g++;
		$window[i] = Math.sin(1.5707963267948966 * stb_format_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
stb_format_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
stb_format_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g = 0;
	var _g1 = n8;
	while(_g < _g1) {
		var i = _g++;
		var n1 = i;
		n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
		n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
		n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
		n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
		rev[i] = (n1 >>> 16 | n1 << 16) >>> 32 - ld + 3 << 2;
	}
};
stb_format_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g = 0;
	var _g1 = n4;
	while(_g < _g1) {
		var k = _g++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k21 = 0;
	var _g2 = 0;
	var _g3 = n8;
	while(_g2 < _g3) {
		var k1 = _g2++;
		cf[k21] = Math.cos(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		cf[k21 + 1] = -Math.sin(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		k21 += 2;
	}
};
stb_format_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(stb_format_vorbis_VorbisTools.integerDivideTable == null) {
		var this1 = new Array(32);
		stb_format_vorbis_VorbisTools.integerDivideTable = this1;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var this2 = stb_format_vorbis_VorbisTools.integerDivideTable;
			var this3 = new Array(64);
			this2[i] = this3;
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				stb_format_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var x = x0;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -stb_format_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = stb_format_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		sy = dy < 0 ? base - 1 : base + 1;
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	output[x] *= stb_format_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	var _g2 = x + 1;
	var _g11 = x1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		output[i1] *= stb_format_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
var stb_format_vorbis_data_Codebook = function() {
};
$hxClasses["stb.format.vorbis.data.Codebook"] = stb_format_vorbis_data_Codebook;
stb_format_vorbis_data_Codebook.__name__ = "stb.format.vorbis.data.Codebook";
stb_format_vorbis_data_Codebook.read = function(decodeState) {
	var c = new stb_format_vorbis_data_Codebook();
	var tmp;
	var tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp2 = z;
		}
	} else {
		var z1 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp2 = z1;
	}
	if(tmp2 == 66) {
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z2 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp3 = z2;
			}
		} else {
			var z3 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z3;
		}
		tmp1 = tmp3 != 67;
	} else {
		tmp1 = true;
	}
	if(!tmp1) {
		var tmp4;
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else {
				var z4 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp4 = z4;
			}
		} else {
			var z5 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp4 = z5;
		}
		tmp = tmp4 != 86;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 40, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
	}
	var x;
	if(decodeState.validBits < 0) {
		x = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x = 0;
		} else {
			var z6 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			x = z6;
		}
	} else {
		var z7 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		x = z7;
	}
	var tmp5;
	if(decodeState.validBits < 0) {
		tmp5 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else {
			var z8 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp5 = z8;
		}
	} else {
		var z9 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp5 = z9;
	}
	c.dimensions = (tmp5 << 8) + x;
	var x1;
	if(decodeState.validBits < 0) {
		x1 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x1 = 0;
		} else {
			var z10 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			x1 = z10;
		}
	} else {
		var z11 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		x1 = z11;
	}
	var y;
	if(decodeState.validBits < 0) {
		y = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			y = 0;
		} else {
			var z12 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			y = z12;
		}
	} else {
		var z13 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		y = z13;
	}
	var tmp6;
	if(decodeState.validBits < 0) {
		tmp6 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp6 = 0;
		} else {
			var z14 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp6 = z14;
		}
	} else {
		var z15 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp6 = z15;
	}
	c.entries = (tmp6 << 16) + (y << 8) + x1;
	var ordered;
	if(decodeState.validBits < 0) {
		ordered = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			ordered = 0;
		} else {
			var z16 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			ordered = z16;
		}
	} else {
		var z17 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		ordered = z17;
	}
	var tmp7;
	if(ordered != 0) {
		tmp7 = false;
	} else {
		var tmp8;
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp8 = 0;
			} else {
				var z18 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp8 = z18;
			}
		} else {
			var z19 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp8 = z19;
		}
		tmp7 = tmp8 != 0;
	}
	c.sparse = tmp7;
	var this1 = new Array(c.entries);
	var lengths = this1;
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength;
		if(decodeState.validBits < 0) {
			currentLength = 0;
		} else if(decodeState.validBits < 5) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 5)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				currentLength = 0;
			} else {
				var z20 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				currentLength = z20;
			}
		} else {
			var z21 = decodeState.acc & 31;
			decodeState.acc = decodeState.acc >>> 5;
			decodeState.validBits -= 5;
			currentLength = z21;
		}
		var currentLength1 = currentLength + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0;
			var n1;
			if(decodeState.validBits < 0) {
				n1 = 0;
			} else if(decodeState.validBits < n) {
				if(n > 24) {
					var n2;
					if(decodeState.validBits < 0) {
						n2 = 0;
					} else if(decodeState.validBits < 24) {
						if(decodeState.validBits == 0) {
							decodeState.acc = 0;
						}
						while(true) {
							if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
								decodeState.validBits = -1;
								break;
							} else {
								decodeState.bytesInSeg--;
								decodeState.inputPosition += 1;
								decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
								decodeState.validBits += 8;
							}
							if(!(decodeState.validBits < 24)) {
								break;
							}
						}
						if(decodeState.validBits < 0) {
							n2 = 0;
						} else {
							var z22 = decodeState.acc & 16777215;
							decodeState.acc = decodeState.acc >>> 24;
							decodeState.validBits -= 24;
							n2 = z22;
						}
					} else {
						var z23 = decodeState.acc & 16777215;
						decodeState.acc = decodeState.acc >>> 24;
						decodeState.validBits -= 24;
						n2 = z23;
					}
					var n3 = n - 24;
					var n4;
					if(decodeState.validBits < 0) {
						n4 = 0;
					} else if(decodeState.validBits < n3) {
						if(n3 > 24) {
							n4 = decodeState.readBits(24) + (decodeState.readBits(n3 - 24) << 24);
						} else {
							if(decodeState.validBits == 0) {
								decodeState.acc = 0;
							}
							while(true) {
								if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
									decodeState.validBits = -1;
									break;
								} else {
									decodeState.bytesInSeg--;
									decodeState.inputPosition += 1;
									decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
									decodeState.validBits += 8;
								}
								if(!(decodeState.validBits < n3)) {
									break;
								}
							}
							if(decodeState.validBits < 0) {
								n4 = 0;
							} else {
								var z24 = decodeState.acc & (1 << n3) - 1;
								decodeState.acc = decodeState.acc >>> n3;
								decodeState.validBits -= n3;
								n4 = z24;
							}
						}
					} else {
						var z25 = decodeState.acc & (1 << n3) - 1;
						decodeState.acc = decodeState.acc >>> n3;
						decodeState.validBits -= n3;
						n4 = z25;
					}
					n1 = n2 + (n4 << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						n1 = 0;
					} else {
						var z26 = decodeState.acc & (1 << n) - 1;
						decodeState.acc = decodeState.acc >>> n;
						decodeState.validBits -= n;
						n1 = z26;
					}
				}
			} else {
				var z27 = decodeState.acc & (1 << n) - 1;
				decodeState.acc = decodeState.acc >>> n;
				decodeState.validBits -= n;
				n1 = z27;
			}
			if(currentEntry + n1 > c.entries) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 67, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g = 0;
			var _g1 = n1;
			while(_g < _g1) {
				var i = _g++;
				lengths[currentEntry + i] = currentLength1;
			}
			currentEntry += n1;
			++currentLength1;
		}
	} else {
		var _g2 = 0;
		var _g11 = c.entries;
		while(_g2 < _g11) {
			var j = _g2++;
			var present;
			if(c.sparse) {
				if(decodeState.validBits < 0) {
					present = 0;
				} else if(decodeState.validBits < 1) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 1)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						present = 0;
					} else {
						var z28 = decodeState.acc & 1;
						decodeState.acc = decodeState.acc >>> 1;
						decodeState.validBits -= 1;
						present = z28;
					}
				} else {
					var z29 = decodeState.acc & 1;
					decodeState.acc = decodeState.acc >>> 1;
					decodeState.validBits -= 1;
					present = z29;
				}
			} else {
				present = 1;
			}
			if(present != 0) {
				var val;
				if(decodeState.validBits < 0) {
					val = 0;
				} else if(decodeState.validBits < 5) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 5)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val = 0;
					} else {
						var z30 = decodeState.acc & 31;
						decodeState.acc = decodeState.acc >>> 5;
						decodeState.validBits -= 5;
						val = z30;
					}
				} else {
					var z31 = decodeState.acc & 31;
					decodeState.acc = decodeState.acc >>> 5;
					decodeState.validBits -= 5;
					val = z31;
				}
				lengths[j] = val + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp9;
	if(c.sparse) {
		tmp9 = total;
	} else {
		var sortedCount = 0;
		var _g3 = 0;
		var _g12 = c.entries;
		while(_g3 < _g12) {
			var j1 = _g3++;
			var l = lengths[j1];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp9 = sortedCount;
	}
	c.sortedEntries = tmp9;
	var values = null;
	if(!c.sparse) {
		var this2 = new Array(c.entries);
		c.codewords = this2;
	} else {
		if(c.sortedEntries != 0) {
			var this3 = new Array(c.sortedEntries);
			c.codewordLengths = this3;
			var this4 = new Array(c.entries);
			c.codewords = this4;
			var this5 = new Array(c.entries);
			values = this5;
		}
		var size = c.entries + 64 * c.sortedEntries;
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 120, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		var this6 = new Array(c.sortedEntries);
		c.sortedValues = this6;
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		values = null;
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	var tmp10;
	if(decodeState.validBits < 0) {
		tmp10 = 0;
	} else if(decodeState.validBits < 4) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 4)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp10 = 0;
		} else {
			var z32 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp10 = z32;
		}
	} else {
		var z33 = decodeState.acc & 15;
		decodeState.acc = decodeState.acc >>> 4;
		decodeState.validBits -= 4;
		tmp10 = z33;
	}
	c.lookupType = tmp10;
	if(c.lookupType > 2) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 143, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x2;
		if(decodeState.validBits < 0) {
			x2 = 0;
		} else if(decodeState.validBits < 32) {
			var x3;
			if(decodeState.validBits < 0) {
				x3 = 0;
			} else if(decodeState.validBits < 24) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 24)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					x3 = 0;
				} else {
					var z34 = decodeState.acc & 16777215;
					decodeState.acc = decodeState.acc >>> 24;
					decodeState.validBits -= 24;
					x3 = z34;
				}
			} else {
				var z35 = decodeState.acc & 16777215;
				decodeState.acc = decodeState.acc >>> 24;
				decodeState.validBits -= 24;
				x3 = z35;
			}
			var x4;
			if(decodeState.validBits < 0) {
				x4 = 0;
			} else if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					x4 = 0;
				} else {
					var z36 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					x4 = z36;
				}
			} else {
				var z37 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				x4 = z37;
			}
			x2 = x3 + (x4 << 24);
		} else {
			var z38 = decodeState.acc & -1;
			decodeState.acc = decodeState.acc >>> 32;
			decodeState.validBits -= 32;
			x2 = z38;
		}
		var mantissa = _$UInt_UInt_$Impl_$.toFloat(x2 & 2097151);
		var sign = x2 & -2147483648;
		var exp = (x2 & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.minimumValue = res * Math.pow(2,exp - 788);
		var x5;
		if(decodeState.validBits < 0) {
			x5 = 0;
		} else if(decodeState.validBits < 32) {
			var x6;
			if(decodeState.validBits < 0) {
				x6 = 0;
			} else if(decodeState.validBits < 24) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 24)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					x6 = 0;
				} else {
					var z39 = decodeState.acc & 16777215;
					decodeState.acc = decodeState.acc >>> 24;
					decodeState.validBits -= 24;
					x6 = z39;
				}
			} else {
				var z40 = decodeState.acc & 16777215;
				decodeState.acc = decodeState.acc >>> 24;
				decodeState.validBits -= 24;
				x6 = z40;
			}
			var x7;
			if(decodeState.validBits < 0) {
				x7 = 0;
			} else if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					x7 = 0;
				} else {
					var z41 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					x7 = z41;
				}
			} else {
				var z42 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				x7 = z42;
			}
			x5 = x6 + (x7 << 24);
		} else {
			var z43 = decodeState.acc & -1;
			decodeState.acc = decodeState.acc >>> 32;
			decodeState.validBits -= 32;
			x5 = z43;
		}
		var mantissa1 = _$UInt_UInt_$Impl_$.toFloat(x5 & 2097151);
		var sign1 = x5 & -2147483648;
		var exp1 = (x5 & 2145386496) >>> 21;
		var res1 = sign1 != 0 ? -mantissa1 : mantissa1;
		c.deltaValue = res1 * Math.pow(2,exp1 - 788);
		var tmp11;
		if(decodeState.validBits < 0) {
			tmp11 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp11 = 0;
			} else {
				var z44 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp11 = z44;
			}
		} else {
			var z45 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp11 = z45;
		}
		c.valueBits = tmp11 + 1;
		var tmp12;
		if(decodeState.validBits < 0) {
			tmp12 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp12 = 0;
			} else {
				var z46 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp12 = z46;
			}
		} else {
			var z47 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp12 = z47;
		}
		c.sequenceP = tmp12 != 0;
		if(c.lookupType == 1) {
			c.lookupValues = stb_format_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var this7 = new Array(c.lookupValues);
		var mults = this7;
		var _g4 = 0;
		var _g13 = c.lookupValues;
		while(_g4 < _g13) {
			var j2 = _g4++;
			var n5 = c.valueBits;
			var q;
			if(decodeState.validBits < 0) {
				q = 0;
			} else if(decodeState.validBits < n5) {
				if(n5 > 24) {
					var q1;
					if(decodeState.validBits < 0) {
						q1 = 0;
					} else if(decodeState.validBits < 24) {
						if(decodeState.validBits == 0) {
							decodeState.acc = 0;
						}
						while(true) {
							if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
								decodeState.validBits = -1;
								break;
							} else {
								decodeState.bytesInSeg--;
								decodeState.inputPosition += 1;
								decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
								decodeState.validBits += 8;
							}
							if(!(decodeState.validBits < 24)) {
								break;
							}
						}
						if(decodeState.validBits < 0) {
							q1 = 0;
						} else {
							var z48 = decodeState.acc & 16777215;
							decodeState.acc = decodeState.acc >>> 24;
							decodeState.validBits -= 24;
							q1 = z48;
						}
					} else {
						var z49 = decodeState.acc & 16777215;
						decodeState.acc = decodeState.acc >>> 24;
						decodeState.validBits -= 24;
						q1 = z49;
					}
					var n6 = n5 - 24;
					var q2;
					if(decodeState.validBits < 0) {
						q2 = 0;
					} else if(decodeState.validBits < n6) {
						if(n6 > 24) {
							q2 = decodeState.readBits(24) + (decodeState.readBits(n6 - 24) << 24);
						} else {
							if(decodeState.validBits == 0) {
								decodeState.acc = 0;
							}
							while(true) {
								if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
									decodeState.validBits = -1;
									break;
								} else {
									decodeState.bytesInSeg--;
									decodeState.inputPosition += 1;
									decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
									decodeState.validBits += 8;
								}
								if(!(decodeState.validBits < n6)) {
									break;
								}
							}
							if(decodeState.validBits < 0) {
								q2 = 0;
							} else {
								var z50 = decodeState.acc & (1 << n6) - 1;
								decodeState.acc = decodeState.acc >>> n6;
								decodeState.validBits -= n6;
								q2 = z50;
							}
						}
					} else {
						var z51 = decodeState.acc & (1 << n6) - 1;
						decodeState.acc = decodeState.acc >>> n6;
						decodeState.validBits -= n6;
						q2 = z51;
					}
					q = q1 + (q2 << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n5)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						q = 0;
					} else {
						var z52 = decodeState.acc & (1 << n5) - 1;
						decodeState.acc = decodeState.acc >>> n5;
						decodeState.validBits -= n5;
						q = z52;
					}
				}
			} else {
				var z53 = decodeState.acc & (1 << n5) - 1;
				decodeState.acc = decodeState.acc >>> n5;
				decodeState.validBits -= n5;
				q = z53;
			}
			if(q == -1) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 161, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j2] = q;
		}
		var this8 = new Array(c.lookupValues);
		c.multiplicands = this8;
		var _g21 = 0;
		var _g31 = c.lookupValues;
		while(_g21 < _g31) {
			var j3 = _g21++;
			c.multiplicands[j3] = mults[j3] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g22 = 1;
			var _g32 = c.lookupValues;
			while(_g22 < _g32) {
				var j4 = _g22++;
				c.multiplicands[j4] = c.multiplicands[j4 - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
stb_format_vorbis_data_Codebook.prototype = {
	computeCodewords: function(len,n,values) {
		var this1 = new Array(32);
		var available = this1;
		available[0] = 0;
		available[1] = 0;
		available[2] = 0;
		available[3] = 0;
		available[4] = 0;
		available[5] = 0;
		available[6] = 0;
		available[7] = 0;
		available[8] = 0;
		available[9] = 0;
		available[10] = 0;
		available[11] = 0;
		available[12] = 0;
		available[13] = 0;
		available[14] = 0;
		available[15] = 0;
		available[16] = 0;
		available[17] = 0;
		available[18] = 0;
		available[19] = 0;
		available[20] = 0;
		available[21] = 0;
		available[22] = 0;
		available[23] = 0;
		available[24] = 0;
		available[25] = 0;
		available[26] = 0;
		available[27] = 0;
		available[28] = 0;
		available[29] = 0;
		available[30] = 0;
		available[31] = 0;
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			return true;
		}
		var m = 0;
		var count = m++;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[count] = 0;
			this.codewordLengths[count] = len[k];
			values[count] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count1 = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count1] = huffCode;
				this.codewordLengths[count1] = len[i];
				values[count1] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g = 0;
			var _g1 = this.entries;
			while(_g < _g1) {
				var i = _g++;
				var len = lengths[i];
				if(this.sparse ? true : len == 255 ? false : len > 10) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = this.sortedEntries;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var n1 = this.codewords[i1];
				n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
				n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
				n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
				n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
				this.sortedCodewords[i1] = n1 >>> 16 | n1 << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(stb_format_vorbis_VorbisTools.uintAsc);
		var len1 = this.sparse ? this.sortedEntries : this.entries;
		var _g3 = 0;
		var _g12 = len1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var huffLen = this.sparse ? lengths[values[i2]] : lengths[i2];
			if(this.sparse ? true : huffLen == 255 ? false : huffLen > 10) {
				var n2 = this.codewords[i2];
				n2 = (n2 & -1431655766) >>> 1 | (n2 & 1431655765) << 1;
				n2 = (n2 & -858993460) >>> 2 | (n2 & 858993459) << 2;
				n2 = (n2 & -252645136) >>> 4 | (n2 & 252645135) << 4;
				n2 = (n2 & -16711936) >>> 8 | (n2 & 16711935) << 8;
				var code = n2 >>> 16 | n2 << 16;
				var x = 0;
				var n3 = this.sortedEntries;
				while(n3 > 1) {
					var m = x + (n3 >> 1);
					if(_$UInt_UInt_$Impl_$.gte(code,this.sortedCodewords[m])) {
						x = m;
						n3 -= n3 >> 1;
					} else {
						n3 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i2];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i2;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		var this1 = new Array(1024);
		this.fastHuffman = this1;
		this.fastHuffman[0] = -1;
		var _g = 0;
		var _g1 = 1024;
		while(_g < _g1) {
			var i = _g++;
			this.fastHuffman[i] = -1;
		}
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g2 = 0;
		var _g3 = len;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(this.codewordLengths[i1] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i1];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i1];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i1;
					z += 1 << this.codewordLengths[i1];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i1 = _g++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				output[offset + i1] += val1;
				if(sequenceP) {
					last = val1 + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last1 = 0.0;
			var _g2 = 0;
			var _g11 = len;
			while(_g2 < _g11) {
				var i2 = _g2++;
				var val2 = multiplicands[z + i2] + last1;
				output[offset + i2] += val2;
				last1 = val2 + minimumValue;
			}
		} else {
			var last2 = 0.0;
			var _g3 = 0;
			var _g12 = len;
			while(_g3 < _g12) {
				var i3 = _g3++;
				output[offset + i3] += multiplicands[z + i3] + last2;
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i1 = _g++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				output[offset + i1 * step] += val1;
				if(sequenceP) {
					last = val1;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g2 = 0;
		var _g11 = len;
		while(_g2 < _g11) {
			var i2 = _g2++;
			var val2 = multiplicands[z + i2] + last;
			output[offset + i2 * step] += val2;
			if(sequenceP) {
				last = val2;
			}
		}
		return true;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 488, className : "stb.format.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 503, className : "stb.format.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g = 0;
					var _g1 = effective;
					while(_g < _g1) {
						var i1 = _g++;
						var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val1 = multiplicands[off] + last;
						residueBuffers[cInter][pInter] += val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g2 = 0;
					var _g11 = effective;
					while(_g2 < _g11) {
						var i2 = _g2++;
						var off1 = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val2 = multiplicands[off1] + last;
						residueBuffers[cInter][pInter] += val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g3 = 0;
					var _g12 = effective;
					while(_g3 < _g12) {
						var i3 = _g3++;
						var val3 = multiplicands[z + i3] + last;
						residueBuffers[cInter][pInter] += val3;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val3;
					}
				} else {
					var _g4 = 0;
					var _g13 = effective;
					while(_g4 < _g13) {
						var i4 = _g4++;
						var val4 = multiplicands[z + i4] + last;
						residueBuffers[cInter][pInter] += val4;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g = 0;
			var _g1 = step;
			while(_g < _g1) {
				var k = _g++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k1 = 0;
			while(k1 < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k1)) {
					return false;
				}
				k1 += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: stb_format_vorbis_data_Codebook
};
var stb_format_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["stb.format.vorbis.data.Comment"] = stb_format_vorbis_data_Comment;
stb_format_vorbis_data_Comment.__name__ = "stb.format.vorbis.data.Comment";
stb_format_vorbis_data_Comment.prototype = {
	get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.data.h,key)) {
			this.data.h[key].push(value);
		} else {
			var v = [value];
			this.data.h[key] = v;
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.data.h,key)) {
			return this.data.h[key][0];
		} else {
			return null;
		}
	}
	,__class__: stb_format_vorbis_data_Comment
};
var stb_format_vorbis_data_Floor = function() {
};
$hxClasses["stb.format.vorbis.data.Floor"] = stb_format_vorbis_data_Floor;
stb_format_vorbis_data_Floor.__name__ = "stb.format.vorbis.data.Floor";
stb_format_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new stb_format_vorbis_data_Floor();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp = z1;
	}
	floor.type = tmp;
	if(floor.type > 1) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Floor.hx", lineNumber : 28, className : "stb.format.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new stb_format_vorbis_data_Floor0();
		var tmp1;
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp1 = 0;
			} else {
				var z2 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp1 = z2;
			}
		} else {
			var z3 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp1 = z3;
		}
		g.order = tmp1;
		var tmp2;
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp2 = 0;
			} else {
				var z4 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp2 = z4;
			}
		} else {
			var z5 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp2 = z5;
		}
		g.rate = tmp2;
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z6 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp3 = z6;
			}
		} else {
			var z7 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp3 = z7;
		}
		g.barkMapSize = tmp3;
		var tmp4;
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else if(decodeState.validBits < 6) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 6)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else {
				var z8 = decodeState.acc & 63;
				decodeState.acc = decodeState.acc >>> 6;
				decodeState.validBits -= 6;
				tmp4 = z8;
			}
		} else {
			var z9 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			tmp4 = z9;
		}
		g.amplitudeBits = tmp4;
		var tmp5;
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else {
				var z10 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp5 = z10;
			}
		} else {
			var z11 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp5 = z11;
		}
		g.amplitudeOffset = tmp5;
		var tmp6;
		if(decodeState.validBits < 0) {
			tmp6 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp6 = 0;
			} else {
				var z12 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp6 = z12;
			}
		} else {
			var z13 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp6 = z13;
		}
		g.numberOfBooks = tmp6 + 1;
		var _g = 0;
		var _g1 = g.numberOfBooks;
		while(_g < _g1) {
			var j = _g++;
			var this1 = g.bookList;
			var val;
			if(decodeState.validBits < 0) {
				val = 0;
			} else if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val = 0;
				} else {
					var z14 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val = z14;
				}
			} else {
				var z15 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val = z15;
			}
			this1[j] = val;
		}
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "stb/format/vorbis/data/Floor.hx", lineNumber : 41, className : "stb.format.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g1 = floor.floor1 = new stb_format_vorbis_data_Floor1();
		var maxClass = -1;
		var tmp7;
		if(decodeState.validBits < 0) {
			tmp7 = 0;
		} else if(decodeState.validBits < 5) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 5)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp7 = 0;
			} else {
				var z16 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				tmp7 = z16;
			}
		} else {
			var z17 = decodeState.acc & 31;
			decodeState.acc = decodeState.acc >>> 5;
			decodeState.validBits -= 5;
			tmp7 = z17;
		}
		g1.partitions = tmp7;
		var this2 = new Array(g1.partitions);
		g1.partitionClassList = this2;
		var _g2 = 0;
		var _g11 = g1.partitions;
		while(_g2 < _g11) {
			var j1 = _g2++;
			var this3 = g1.partitionClassList;
			var val1;
			if(decodeState.validBits < 0) {
				val1 = 0;
			} else if(decodeState.validBits < 4) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 4)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val1 = 0;
				} else {
					var z18 = decodeState.acc & 15;
					decodeState.acc = decodeState.acc >>> 4;
					decodeState.validBits -= 4;
					val1 = z18;
				}
			} else {
				var z19 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				val1 = z19;
			}
			this3[j1] = val1;
			if(g1.partitionClassList[j1] > maxClass) {
				maxClass = g1.partitionClassList[j1];
			}
		}
		var this4 = new Array(maxClass + 1);
		g1.classDimensions = this4;
		var this5 = new Array(maxClass + 1);
		g1.classMasterbooks = this5;
		var this6 = new Array(maxClass + 1);
		g1.classSubclasses = this6;
		var this7 = new Array(maxClass + 1);
		g1.subclassBooks = this7;
		var _g21 = 0;
		var _g3 = maxClass + 1;
		while(_g21 < _g3) {
			var j2 = _g21++;
			var this8 = g1.classDimensions;
			var val2;
			if(decodeState.validBits < 0) {
				val2 = 0;
			} else if(decodeState.validBits < 3) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 3)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val2 = 0;
				} else {
					var z20 = decodeState.acc & 7;
					decodeState.acc = decodeState.acc >>> 3;
					decodeState.validBits -= 3;
					val2 = z20;
				}
			} else {
				var z21 = decodeState.acc & 7;
				decodeState.acc = decodeState.acc >>> 3;
				decodeState.validBits -= 3;
				val2 = z21;
			}
			this8[j2] = val2 + 1;
			var this9 = g1.classSubclasses;
			var val3;
			if(decodeState.validBits < 0) {
				val3 = 0;
			} else if(decodeState.validBits < 2) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 2)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val3 = 0;
				} else {
					var z22 = decodeState.acc & 3;
					decodeState.acc = decodeState.acc >>> 2;
					decodeState.validBits -= 2;
					val3 = z22;
				}
			} else {
				var z23 = decodeState.acc & 3;
				decodeState.acc = decodeState.acc >>> 2;
				decodeState.validBits -= 2;
				val3 = z23;
			}
			this9[j2] = val3;
			if(g1.classSubclasses[j2] != 0) {
				var this10 = g1.classMasterbooks;
				var val4;
				if(decodeState.validBits < 0) {
					val4 = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val4 = 0;
					} else {
						var z24 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val4 = z24;
					}
				} else {
					var z25 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val4 = z25;
				}
				this10[j2] = val4;
				if(g1.classMasterbooks[j2] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Floor.hx", lineNumber : 64, className : "stb.format.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g1.classSubclasses[j2];
			var this11 = g1.subclassBooks;
			var this12 = new Array(kl);
			this11[j2] = this12;
			var _g22 = 0;
			var _g31 = kl;
			while(_g22 < _g31) {
				var k = _g22++;
				var this13 = g1.subclassBooks[j2];
				var val5;
				if(decodeState.validBits < 0) {
					val5 = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val5 = 0;
					} else {
						var z26 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val5 = z26;
					}
				} else {
					var z27 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val5 = z27;
				}
				this13[k] = val5 - 1;
				if(g1.subclassBooks[j2][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Floor.hx", lineNumber : 73, className : "stb.format.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		var tmp8;
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else if(decodeState.validBits < 2) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 2)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp8 = 0;
			} else {
				var z28 = decodeState.acc & 3;
				decodeState.acc = decodeState.acc >>> 2;
				decodeState.validBits -= 2;
				tmp8 = z28;
			}
		} else {
			var z29 = decodeState.acc & 3;
			decodeState.acc = decodeState.acc >>> 2;
			decodeState.validBits -= 2;
			tmp8 = z29;
		}
		g1.floor1Multiplier = tmp8 + 1;
		var tmp9;
		if(decodeState.validBits < 0) {
			tmp9 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp9 = 0;
			} else {
				var z30 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp9 = z30;
			}
		} else {
			var z31 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp9 = z31;
		}
		g1.rangebits = tmp9;
		var this14 = new Array(250);
		g1.xlist = this14;
		g1.xlist[0] = 0;
		g1.xlist[1] = 1 << g1.rangebits;
		g1.values = 2;
		var _g4 = 0;
		var _g5 = g1.partitions;
		while(_g4 < _g5) {
			var j3 = _g4++;
			var c = g1.partitionClassList[j3];
			var _g41 = 0;
			var _g51 = g1.classDimensions[c];
			while(_g41 < _g51) {
				var k1 = _g41++;
				var this15 = g1.xlist;
				var index = g1.values;
				var n = g1.rangebits;
				var val6;
				if(decodeState.validBits < 0) {
					val6 = 0;
				} else if(decodeState.validBits < n) {
					if(n > 24) {
						var val7;
						if(decodeState.validBits < 0) {
							val7 = 0;
						} else if(decodeState.validBits < 24) {
							if(decodeState.validBits == 0) {
								decodeState.acc = 0;
							}
							while(true) {
								if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
									decodeState.validBits = -1;
									break;
								} else {
									decodeState.bytesInSeg--;
									decodeState.inputPosition += 1;
									decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
									decodeState.validBits += 8;
								}
								if(!(decodeState.validBits < 24)) {
									break;
								}
							}
							if(decodeState.validBits < 0) {
								val7 = 0;
							} else {
								var z32 = decodeState.acc & 16777215;
								decodeState.acc = decodeState.acc >>> 24;
								decodeState.validBits -= 24;
								val7 = z32;
							}
						} else {
							var z33 = decodeState.acc & 16777215;
							decodeState.acc = decodeState.acc >>> 24;
							decodeState.validBits -= 24;
							val7 = z33;
						}
						var n1 = n - 24;
						var val8;
						if(decodeState.validBits < 0) {
							val8 = 0;
						} else if(decodeState.validBits < n1) {
							if(n1 > 24) {
								var val9;
								if(decodeState.validBits < 0) {
									val9 = 0;
								} else if(decodeState.validBits < 24) {
									if(decodeState.validBits == 0) {
										decodeState.acc = 0;
									}
									while(true) {
										if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
											decodeState.validBits = -1;
											break;
										} else {
											decodeState.bytesInSeg--;
											decodeState.inputPosition += 1;
											decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
											decodeState.validBits += 8;
										}
										if(!(decodeState.validBits < 24)) {
											break;
										}
									}
									if(decodeState.validBits < 0) {
										val9 = 0;
									} else {
										var z34 = decodeState.acc & 16777215;
										decodeState.acc = decodeState.acc >>> 24;
										decodeState.validBits -= 24;
										val9 = z34;
									}
								} else {
									var z35 = decodeState.acc & 16777215;
									decodeState.acc = decodeState.acc >>> 24;
									decodeState.validBits -= 24;
									val9 = z35;
								}
								var n2 = n1 - 24;
								var val10;
								if(decodeState.validBits < 0) {
									val10 = 0;
								} else if(decodeState.validBits < n2) {
									if(n2 > 24) {
										val10 = decodeState.readBits(24) + (decodeState.readBits(n2 - 24) << 24);
									} else {
										if(decodeState.validBits == 0) {
											decodeState.acc = 0;
										}
										while(true) {
											if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
												decodeState.validBits = -1;
												break;
											} else {
												decodeState.bytesInSeg--;
												decodeState.inputPosition += 1;
												decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
												decodeState.validBits += 8;
											}
											if(!(decodeState.validBits < n2)) {
												break;
											}
										}
										if(decodeState.validBits < 0) {
											val10 = 0;
										} else {
											var z36 = decodeState.acc & (1 << n2) - 1;
											decodeState.acc = decodeState.acc >>> n2;
											decodeState.validBits -= n2;
											val10 = z36;
										}
									}
								} else {
									var z37 = decodeState.acc & (1 << n2) - 1;
									decodeState.acc = decodeState.acc >>> n2;
									decodeState.validBits -= n2;
									val10 = z37;
								}
								val8 = val9 + (val10 << 24);
							} else {
								if(decodeState.validBits == 0) {
									decodeState.acc = 0;
								}
								while(true) {
									if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
										decodeState.validBits = -1;
										break;
									} else {
										decodeState.bytesInSeg--;
										decodeState.inputPosition += 1;
										decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
										decodeState.validBits += 8;
									}
									if(!(decodeState.validBits < n1)) {
										break;
									}
								}
								if(decodeState.validBits < 0) {
									val8 = 0;
								} else {
									var z38 = decodeState.acc & (1 << n1) - 1;
									decodeState.acc = decodeState.acc >>> n1;
									decodeState.validBits -= n1;
									val8 = z38;
								}
							}
						} else {
							var z39 = decodeState.acc & (1 << n1) - 1;
							decodeState.acc = decodeState.acc >>> n1;
							decodeState.validBits -= n1;
							val8 = z39;
						}
						val6 = val7 + (val8 << 24);
					} else {
						if(decodeState.validBits == 0) {
							decodeState.acc = 0;
						}
						while(true) {
							if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
								decodeState.validBits = -1;
								break;
							} else {
								decodeState.bytesInSeg--;
								decodeState.inputPosition += 1;
								decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
								decodeState.validBits += 8;
							}
							if(!(decodeState.validBits < n)) {
								break;
							}
						}
						if(decodeState.validBits < 0) {
							val6 = 0;
						} else {
							var z40 = decodeState.acc & (1 << n) - 1;
							decodeState.acc = decodeState.acc >>> n;
							decodeState.validBits -= n;
							val6 = z40;
						}
					}
				} else {
					var z41 = decodeState.acc & (1 << n) - 1;
					decodeState.acc = decodeState.acc >>> n;
					decodeState.validBits -= n;
					val6 = z41;
				}
				this15[index] = val6;
				g1.values++;
			}
		}
		var _g6 = 0;
		var _g7 = g1.values;
		while(_g6 < _g7) {
			var j4 = _g6++;
			p.push(new stb_format_vorbis_data_IntPoint());
			p[j4].x = g1.xlist[j4];
			p[j4].y = j4;
		}
		p.sort(stb_format_vorbis_VorbisTools.pointCompare);
		var this16 = new Array(g1.values);
		g1.sortedOrder = this16;
		var _g8 = 0;
		var _g9 = g1.values;
		while(_g8 < _g9) {
			var j5 = _g8++;
			g1.sortedOrder[j5] = p[j5].y;
		}
		var this17 = new Array(g1.values);
		g1.neighbors = this17;
		var _g10 = 2;
		var _g111 = g1.values;
		while(_g10 < _g111) {
			var j6 = _g10++;
			var x = g1.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g12 = 0;
			var _g13 = j6;
			while(_g12 < _g13) {
				var i = _g12++;
				if(x[i] > low && x[i] < x[j6]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j6]) {
					phigh = i;
					high = x[i];
				}
			}
			var ne_low = plow;
			var ne_high = phigh;
			var this18 = g1.neighbors;
			var this19 = new Array(g1.values);
			this18[j6] = this19;
			g1.neighbors[j6][0] = ne_low;
			g1.neighbors[j6][1] = ne_high;
		}
	}
	return floor;
};
stb_format_vorbis_data_Floor.prototype = {
	__class__: stb_format_vorbis_data_Floor
};
var stb_format_vorbis_data_Floor0 = function() {
};
$hxClasses["stb.format.vorbis.data.Floor0"] = stb_format_vorbis_data_Floor0;
stb_format_vorbis_data_Floor0.__name__ = "stb.format.vorbis.data.Floor0";
stb_format_vorbis_data_Floor0.prototype = {
	__class__: stb_format_vorbis_data_Floor0
};
var stb_format_vorbis_data_Floor1 = function() {
};
$hxClasses["stb.format.vorbis.data.Floor1"] = stb_format_vorbis_data_Floor1;
stb_format_vorbis_data_Floor1.__name__ = "stb.format.vorbis.data.Floor1";
stb_format_vorbis_data_Floor1.prototype = {
	__class__: stb_format_vorbis_data_Floor1
};
var stb_format_vorbis_data_Header = function() {
};
$hxClasses["stb.format.vorbis.data.Header"] = stb_format_vorbis_data_Header;
stb_format_vorbis_data_Header.__name__ = "stb.format.vorbis.data.Header";
stb_format_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 46, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 49, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 52, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 57, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[0] = x;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[1] = x1;
	var x2;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x2 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x2 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[2] = x2;
	var x3;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x3 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x3 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[3] = x3;
	var x4;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x4 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x4 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[4] = x4;
	var x5;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x5 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x5 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[5] = x5;
	if(header.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 300, className : "stb.format.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 66, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new stb_format_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header1.channel = decodeState.input.readByte();
	if(header1.channel == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 73, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	} else if(header1.channel > 16) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 75, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.sampleRate = decodeState.input.readInt32();
	if(header1.sampleRate == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 80, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x6 = decodeState.input.readByte();
	var log0 = x6 & 15;
	var log1 = x6 >> 4;
	header1.blocksize0 = 1 << log0;
	header1.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 93, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 96, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 99, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x7 = decodeState.input.readByte();
	if((x7 & 1) == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 105, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	var vendorLength = packetInput.readInt32();
	header1.vendor = packetInput.readString(vendorLength);
	header1.comment = new stb_format_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g = 0;
	var _g1 = commentCount;
	while(_g < _g1) {
		var i = _g++;
		var n = packetInput.readInt32();
		var str = packetInput.readString(n);
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header1.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	var x8 = packetInput.readByte();
	if((x8 & 1) == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 141, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x9;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x9 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x9 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x9 != 5) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 149, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	var header2 = new haxe_io_Bytes(new ArrayBuffer(6));
	var x10;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x10 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x10 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[0] = x10;
	var x11;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x11 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x11 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[1] = x11;
	var x12;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x12 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x12 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[2] = x12;
	var x13;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x13 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x13 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[3] = x13;
	var x14;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x14 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x14 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[4] = x14;
	var x15;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x15 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x15 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[5] = x15;
	if(header2.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 300, className : "stb.format.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount;
	if(decodeState.validBits < 0) {
		codebookCount = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			codebookCount = 0;
		} else {
			var z = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			codebookCount = z;
		}
	} else {
		var z1 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		codebookCount = z1;
	}
	var codebookCount1 = codebookCount + 1;
	var this1 = new Array(codebookCount1);
	header1.codebooks = this1;
	var _g2 = 0;
	var _g11 = codebookCount1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		header1.codebooks[i1] = stb_format_vorbis_data_Codebook.read(decodeState);
	}
	var x16;
	if(decodeState.validBits < 0) {
		x16 = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x16 = 0;
		} else {
			var z2 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			x16 = z2;
		}
	} else {
		var z3 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		x16 = z3;
	}
	x7 = x16 + 1;
	var _g21 = 0;
	var _g3 = x7;
	while(_g21 < _g3) {
		var i2 = _g21++;
		var tmp;
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp = 0;
			} else {
				var z4 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp = z4;
			}
		} else {
			var z5 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z5;
		}
		if(tmp != 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 165, className : "stb.format.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount;
	if(decodeState.validBits < 0) {
		floorCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			floorCount = 0;
		} else {
			var z6 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			floorCount = z6;
		}
	} else {
		var z7 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		floorCount = z7;
	}
	var floorCount1 = floorCount + 1;
	var this2 = new Array(floorCount1);
	header1.floorConfig = this2;
	var _g4 = 0;
	var _g5 = floorCount1;
	while(_g4 < _g5) {
		var i3 = _g4++;
		header1.floorConfig[i3] = stb_format_vorbis_data_Floor.read(decodeState,header1.codebooks);
	}
	var residueCount;
	if(decodeState.validBits < 0) {
		residueCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			residueCount = 0;
		} else {
			var z8 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			residueCount = z8;
		}
	} else {
		var z9 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		residueCount = z9;
	}
	var residueCount1 = residueCount + 1;
	var this3 = new Array(residueCount1);
	header1.residueConfig = this3;
	var _g6 = 0;
	var _g7 = residueCount1;
	while(_g6 < _g7) {
		var i4 = _g6++;
		header1.residueConfig[i4] = stb_format_vorbis_data_Residue.read(decodeState,header1.codebooks);
	}
	var mappingCount;
	if(decodeState.validBits < 0) {
		mappingCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			mappingCount = 0;
		} else {
			var z10 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			mappingCount = z10;
		}
	} else {
		var z11 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		mappingCount = z11;
	}
	var mappingCount1 = mappingCount + 1;
	var this4 = new Array(mappingCount1);
	header1.mapping = this4;
	var _g8 = 0;
	var _g9 = mappingCount1;
	while(_g8 < _g9) {
		var i5 = _g8++;
		var map = stb_format_vorbis_data_Mapping.read(decodeState,header1.channel);
		header1.mapping[i5] = map;
		var _g81 = 0;
		var _g91 = map.submaps;
		while(_g81 < _g91) {
			var j = _g81++;
			if(map.submapFloor[j] >= header1.floorConfig.length) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 191, className : "stb.format.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header1.residueConfig.length) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 194, className : "stb.format.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount;
	if(decodeState.validBits < 0) {
		modeCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			modeCount = 0;
		} else {
			var z12 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			modeCount = z12;
		}
	} else {
		var z13 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		modeCount = z13;
	}
	var modeCount1 = modeCount + 1;
	var this5 = new Array(modeCount1);
	header1.modes = this5;
	var _g10 = 0;
	var _g111 = modeCount1;
	while(_g10 < _g111) {
		var i6 = _g10++;
		var mode = stb_format_vorbis_data_Mode.read(decodeState);
		header1.modes[i6] = mode;
		if(mode.mapping >= header1.mapping.length) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 205, className : "stb.format.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header1;
};
stb_format_vorbis_data_Header.prototype = {
	__class__: stb_format_vorbis_data_Header
};
var stb_format_vorbis_data_IntPoint = function() {
};
$hxClasses["stb.format.vorbis.data.IntPoint"] = stb_format_vorbis_data_IntPoint;
stb_format_vorbis_data_IntPoint.__name__ = "stb.format.vorbis.data.IntPoint";
stb_format_vorbis_data_IntPoint.prototype = {
	__class__: stb_format_vorbis_data_IntPoint
};
var stb_format_vorbis_data_Mapping = function() {
};
$hxClasses["stb.format.vorbis.data.Mapping"] = stb_format_vorbis_data_Mapping;
stb_format_vorbis_data_Mapping.__name__ = "stb.format.vorbis.data.Mapping";
stb_format_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new stb_format_vorbis_data_Mapping();
	var mappingType;
	if(decodeState.validBits < 0) {
		mappingType = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			mappingType = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			mappingType = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		mappingType = z1;
	}
	if(mappingType != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 22, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
	}
	var this1 = new Array(channels);
	m.chan = this1;
	var _g = 0;
	var _g1 = channels;
	while(_g < _g1) {
		var j = _g++;
		m.chan[j] = new stb_format_vorbis_data_MappingChannel();
	}
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z2 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp = z2;
		}
	} else {
		var z3 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp = z3;
	}
	if(tmp != 0) {
		var tmp1;
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp1 = 0;
			} else {
				var z4 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp1 = z4;
			}
		} else {
			var z5 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp1 = z5;
		}
		m.submaps = tmp1 + 1;
	} else {
		m.submaps = 1;
	}
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z6 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp2 = z6;
		}
	} else {
		var z7 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp2 = z7;
	}
	if(tmp2 != 0) {
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z8 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp3 = z8;
			}
		} else {
			var z9 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z9;
		}
		m.couplingSteps = tmp3 + 1;
		var _g2 = 0;
		var _g3 = m.couplingSteps;
		while(_g2 < _g3) {
			var k = _g2++;
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n1 = n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0;
			var tmp4;
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else if(decodeState.validBits < n1) {
				if(n1 > 24) {
					var tmp5;
					if(decodeState.validBits < 0) {
						tmp5 = 0;
					} else if(decodeState.validBits < 24) {
						if(decodeState.validBits == 0) {
							decodeState.acc = 0;
						}
						while(true) {
							if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
								decodeState.validBits = -1;
								break;
							} else {
								decodeState.bytesInSeg--;
								decodeState.inputPosition += 1;
								decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
								decodeState.validBits += 8;
							}
							if(!(decodeState.validBits < 24)) {
								break;
							}
						}
						if(decodeState.validBits < 0) {
							tmp5 = 0;
						} else {
							var z10 = decodeState.acc & 16777215;
							decodeState.acc = decodeState.acc >>> 24;
							decodeState.validBits -= 24;
							tmp5 = z10;
						}
					} else {
						var z11 = decodeState.acc & 16777215;
						decodeState.acc = decodeState.acc >>> 24;
						decodeState.validBits -= 24;
						tmp5 = z11;
					}
					var n2 = n1 - 24;
					var tmp6;
					if(decodeState.validBits < 0) {
						tmp6 = 0;
					} else if(decodeState.validBits < n2) {
						if(n2 > 24) {
							tmp6 = decodeState.readBits(24) + (decodeState.readBits(n2 - 24) << 24);
						} else {
							if(decodeState.validBits == 0) {
								decodeState.acc = 0;
							}
							while(true) {
								if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
									decodeState.validBits = -1;
									break;
								} else {
									decodeState.bytesInSeg--;
									decodeState.inputPosition += 1;
									decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
									decodeState.validBits += 8;
								}
								if(!(decodeState.validBits < n2)) {
									break;
								}
							}
							if(decodeState.validBits < 0) {
								tmp6 = 0;
							} else {
								var z12 = decodeState.acc & (1 << n2) - 1;
								decodeState.acc = decodeState.acc >>> n2;
								decodeState.validBits -= n2;
								tmp6 = z12;
							}
						}
					} else {
						var z13 = decodeState.acc & (1 << n2) - 1;
						decodeState.acc = decodeState.acc >>> n2;
						decodeState.validBits -= n2;
						tmp6 = z13;
					}
					tmp4 = tmp5 + (tmp6 << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n1)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						tmp4 = 0;
					} else {
						var z14 = decodeState.acc & (1 << n1) - 1;
						decodeState.acc = decodeState.acc >>> n1;
						decodeState.validBits -= n1;
						tmp4 = z14;
					}
				}
			} else {
				var z15 = decodeState.acc & (1 << n1) - 1;
				decodeState.acc = decodeState.acc >>> n1;
				decodeState.validBits -= n1;
				tmp4 = z15;
			}
			m.chan[k].magnitude = tmp4;
			var n3 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n4 = n3 < 16384 ? n3 < 16 ? log2_41[n3] : n3 < 512 ? 5 + log2_41[n3 >> 5] : 10 + log2_41[n3 >> 10] : n3 < 16777216 ? n3 < 524288 ? 15 + log2_41[n3 >> 15] : 20 + log2_41[n3 >> 20] : n3 < 536870912 ? 25 + log2_41[n3 >> 25] : n3 < -2147483648 ? 30 + log2_41[n3 >> 30] : 0;
			var tmp7;
			if(decodeState.validBits < 0) {
				tmp7 = 0;
			} else if(decodeState.validBits < n4) {
				if(n4 > 24) {
					var tmp8;
					if(decodeState.validBits < 0) {
						tmp8 = 0;
					} else if(decodeState.validBits < 24) {
						if(decodeState.validBits == 0) {
							decodeState.acc = 0;
						}
						while(true) {
							if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
								decodeState.validBits = -1;
								break;
							} else {
								decodeState.bytesInSeg--;
								decodeState.inputPosition += 1;
								decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
								decodeState.validBits += 8;
							}
							if(!(decodeState.validBits < 24)) {
								break;
							}
						}
						if(decodeState.validBits < 0) {
							tmp8 = 0;
						} else {
							var z16 = decodeState.acc & 16777215;
							decodeState.acc = decodeState.acc >>> 24;
							decodeState.validBits -= 24;
							tmp8 = z16;
						}
					} else {
						var z17 = decodeState.acc & 16777215;
						decodeState.acc = decodeState.acc >>> 24;
						decodeState.validBits -= 24;
						tmp8 = z17;
					}
					var n5 = n4 - 24;
					var tmp9;
					if(decodeState.validBits < 0) {
						tmp9 = 0;
					} else if(decodeState.validBits < n5) {
						if(n5 > 24) {
							tmp9 = decodeState.readBits(24) + (decodeState.readBits(n5 - 24) << 24);
						} else {
							if(decodeState.validBits == 0) {
								decodeState.acc = 0;
							}
							while(true) {
								if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
									decodeState.validBits = -1;
									break;
								} else {
									decodeState.bytesInSeg--;
									decodeState.inputPosition += 1;
									decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
									decodeState.validBits += 8;
								}
								if(!(decodeState.validBits < n5)) {
									break;
								}
							}
							if(decodeState.validBits < 0) {
								tmp9 = 0;
							} else {
								var z18 = decodeState.acc & (1 << n5) - 1;
								decodeState.acc = decodeState.acc >>> n5;
								decodeState.validBits -= n5;
								tmp9 = z18;
							}
						}
					} else {
						var z19 = decodeState.acc & (1 << n5) - 1;
						decodeState.acc = decodeState.acc >>> n5;
						decodeState.validBits -= n5;
						tmp9 = z19;
					}
					tmp7 = tmp8 + (tmp9 << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n4)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						tmp7 = 0;
					} else {
						var z20 = decodeState.acc & (1 << n4) - 1;
						decodeState.acc = decodeState.acc >>> n4;
						decodeState.validBits -= n4;
						tmp7 = z20;
					}
				}
			} else {
				var z21 = decodeState.acc & (1 << n4) - 1;
				decodeState.acc = decodeState.acc >>> n4;
				decodeState.validBits -= n4;
				tmp7 = z21;
			}
			m.chan[k].angle = tmp7;
			if(m.chan[k].magnitude >= channels) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 46, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 49, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 52, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	var tmp10;
	if(decodeState.validBits < 0) {
		tmp10 = 0;
	} else if(decodeState.validBits < 2) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 2)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp10 = 0;
		} else {
			var z22 = decodeState.acc & 3;
			decodeState.acc = decodeState.acc >>> 2;
			decodeState.validBits -= 2;
			tmp10 = z22;
		}
	} else {
		var z23 = decodeState.acc & 3;
		decodeState.acc = decodeState.acc >>> 2;
		decodeState.validBits -= 2;
		tmp10 = z23;
	}
	if(tmp10 != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 61, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g21 = 0;
		var _g31 = channels;
		while(_g21 < _g31) {
			var j1 = _g21++;
			var tmp11;
			if(decodeState.validBits < 0) {
				tmp11 = 0;
			} else if(decodeState.validBits < 4) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 4)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					tmp11 = 0;
				} else {
					var z24 = decodeState.acc & 15;
					decodeState.acc = decodeState.acc >>> 4;
					decodeState.validBits -= 4;
					tmp11 = z24;
				}
			} else {
				var z25 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp11 = z25;
			}
			m.chan[j1].mux = tmp11;
			if(m.chan[j1].mux >= m.submaps) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 67, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g22 = 0;
		var _g32 = channels;
		while(_g22 < _g32) {
			var j2 = _g22++;
			m.chan[j2].mux = 0;
		}
	}
	var this2 = new Array(m.submaps);
	m.submapFloor = this2;
	var this3 = new Array(m.submaps);
	m.submapResidue = this3;
	var _g23 = 0;
	var _g33 = m.submaps;
	while(_g23 < _g33) {
		var j3 = _g23++;
		if(decodeState.validBits >= 0) {
			if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits >= 0) {
					var z26 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
				}
			} else {
				var z27 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
			}
		}
		var this4 = m.submapFloor;
		var val;
		if(decodeState.validBits < 0) {
			val = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				val = 0;
			} else {
				var z28 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val = z28;
			}
		} else {
			var z29 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			val = z29;
		}
		this4[j3] = val;
		var this5 = m.submapResidue;
		var val1;
		if(decodeState.validBits < 0) {
			val1 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				val1 = 0;
			} else {
				var z30 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val1 = z30;
			}
		} else {
			var z31 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			val1 = z31;
		}
		this5[j3] = val1;
	}
	return m;
};
stb_format_vorbis_data_Mapping.prototype = {
	doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var s = this.chan[i].mux;
		var floor;
		var floor1 = floors[this.submapFloor[s]];
		if(floor1.type == 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 94, className : "stb.format.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor1.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g = 1;
			var _g1 = g.values;
			while(_g < _g1) {
				var q = _g++;
				var j = g.sortedOrder[q];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					stb_format_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g2 = lx;
				var _g3 = n2;
				while(_g2 < _g3) {
					var j1 = _g2++;
					target[j1] *= stb_format_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: stb_format_vorbis_data_Mapping
};
var stb_format_vorbis_data_MappingChannel = function() {
};
$hxClasses["stb.format.vorbis.data.MappingChannel"] = stb_format_vorbis_data_MappingChannel;
stb_format_vorbis_data_MappingChannel.__name__ = "stb.format.vorbis.data.MappingChannel";
stb_format_vorbis_data_MappingChannel.prototype = {
	__class__: stb_format_vorbis_data_MappingChannel
};
var stb_format_vorbis_data_Mode = function() {
};
$hxClasses["stb.format.vorbis.data.Mode"] = stb_format_vorbis_data_Mode;
stb_format_vorbis_data_Mode.__name__ = "stb.format.vorbis.data.Mode";
stb_format_vorbis_data_Mode.read = function(decodeState) {
	var m = new stb_format_vorbis_data_Mode();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp = z1;
	}
	m.blockflag = tmp != 0;
	var tmp1;
	if(decodeState.validBits < 0) {
		tmp1 = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else {
			var z2 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp1 = z2;
		}
	} else {
		var z3 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp1 = z3;
	}
	m.windowtype = tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z4 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp2 = z4;
		}
	} else {
		var z5 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp2 = z5;
	}
	m.transformtype = tmp2;
	var tmp3;
	if(decodeState.validBits < 0) {
		tmp3 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else {
			var z6 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z6;
		}
	} else {
		var z7 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp3 = z7;
	}
	m.mapping = tmp3;
	if(m.windowtype != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mode.hx", lineNumber : 22, className : "stb.format.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mode.hx", lineNumber : 25, className : "stb.format.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
stb_format_vorbis_data_Mode.prototype = {
	__class__: stb_format_vorbis_data_Mode
};
var stb_format_vorbis_data_Page = function() {
};
$hxClasses["stb.format.vorbis.data.Page"] = stb_format_vorbis_data_Page;
stb_format_vorbis_data_Page.__name__ = "stb.format.vorbis.data.Page";
stb_format_vorbis_data_Page.prototype = {
	clone: function() {
		var page = new stb_format_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 323, className : "stb.format.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "stb/format/vorbis/data/Page.hx", lineNumber : 34, className : "stb.format.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: stb_format_vorbis_data_Page
};
var stb_format_vorbis_data_ProbedPage = function() {
};
$hxClasses["stb.format.vorbis.data.ProbedPage"] = stb_format_vorbis_data_ProbedPage;
stb_format_vorbis_data_ProbedPage.__name__ = "stb.format.vorbis.data.ProbedPage";
stb_format_vorbis_data_ProbedPage.prototype = {
	__class__: stb_format_vorbis_data_ProbedPage
};
var stb_format_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["stb.format.vorbis.data.ReaderError"] = stb_format_vorbis_data_ReaderError;
stb_format_vorbis_data_ReaderError.__name__ = "stb.format.vorbis.data.ReaderError";
stb_format_vorbis_data_ReaderError.prototype = {
	__class__: stb_format_vorbis_data_ReaderError
};
var stb_format_vorbis_data_ReaderErrorType = $hxEnums["stb.format.vorbis.data.ReaderErrorType"] = { __ename__ : "stb.format.vorbis.data.ReaderErrorType", __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"]
	,NEED_MORE_DATA: {_hx_index:0,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_API_MIXING: {_hx_index:1,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,OUTOFMEM: {_hx_index:2,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,FEATURE_NOT_SUPPORTED: {_hx_index:3,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,TOO_MANY_CHANNELS: {_hx_index:4,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,FILE_OPEN_FAILURE: {_hx_index:5,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_WITHOUT_LENGTH: {_hx_index:6,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,UNEXPECTED_EOF: {_hx_index:7,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_INVALID: {_hx_index:8,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_SETUP: {_hx_index:9,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM: {_hx_index:10,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,MISSING_CAPTURE_PATTERN: {_hx_index:11,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM_STRUCTURE_VERSION: {_hx_index:12,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,CONTINUED_PACKET_FLAG_INVALID: {_hx_index:13,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,INCORRECT_STREAM_SERIAL_NUMBER: {_hx_index:14,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_FIRST_PAGE: {_hx_index:15,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,BAD_PACKET_TYPE: {_hx_index:16,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,CANT_FIND_LAST_PAGE: {_hx_index:17,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_FAILED: {_hx_index:18,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
	,OTHER: {_hx_index:19,__enum__:"stb.format.vorbis.data.ReaderErrorType",toString:$estr}
};
stb_format_vorbis_data_ReaderErrorType.__empty_constructs__ = [stb_format_vorbis_data_ReaderErrorType.NEED_MORE_DATA,stb_format_vorbis_data_ReaderErrorType.INVALID_API_MIXING,stb_format_vorbis_data_ReaderErrorType.OUTOFMEM,stb_format_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,stb_format_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,stb_format_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE,stb_format_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH,stb_format_vorbis_data_ReaderErrorType.UNEXPECTED_EOF,stb_format_vorbis_data_ReaderErrorType.SEEK_INVALID,stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,stb_format_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,stb_format_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER,stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,stb_format_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE,stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,stb_format_vorbis_data_ReaderErrorType.OTHER];
var stb_format_vorbis_data_Residue = function() {
};
$hxClasses["stb.format.vorbis.data.Residue"] = stb_format_vorbis_data_Residue;
stb_format_vorbis_data_Residue.__name__ = "stb.format.vorbis.data.Residue";
stb_format_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new stb_format_vorbis_data_Residue();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp = z1;
	}
	r.type = tmp;
	if(r.type > 2) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Residue.hx", lineNumber : 29, className : "stb.format.vorbis.data.Residue", methodName : "read"}));
	}
	var this1 = new Array(64);
	var residueCascade = this1;
	var tmp1;
	if(decodeState.validBits < 0) {
		tmp1 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else {
			var z2 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp1 = z2;
		}
	} else {
		var z3 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp1 = z3;
	}
	r.begin = tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z4 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp2 = z4;
		}
	} else {
		var z5 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp2 = z5;
	}
	r.end = tmp2;
	var tmp3;
	if(decodeState.validBits < 0) {
		tmp3 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else {
			var z6 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp3 = z6;
		}
	} else {
		var z7 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp3 = z7;
	}
	r.partSize = tmp3 + 1;
	var classifications;
	if(decodeState.validBits < 0) {
		classifications = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			classifications = 0;
		} else {
			var z8 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			classifications = z8;
		}
	} else {
		var z9 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		classifications = z9;
	}
	var classifications1 = r.classifications = classifications + 1;
	var tmp4;
	if(decodeState.validBits < 0) {
		tmp4 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else {
			var z10 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp4 = z10;
		}
	} else {
		var z11 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp4 = z11;
	}
	r.classbook = tmp4;
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var highBits = 0;
		var lowBits;
		if(decodeState.validBits < 0) {
			lowBits = 0;
		} else if(decodeState.validBits < 3) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 3)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				lowBits = 0;
			} else {
				var z12 = decodeState.acc & 7;
				decodeState.acc = decodeState.acc >>> 3;
				decodeState.validBits -= 3;
				lowBits = z12;
			}
		} else {
			var z13 = decodeState.acc & 7;
			decodeState.acc = decodeState.acc >>> 3;
			decodeState.validBits -= 3;
			lowBits = z13;
		}
		var tmp5;
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else {
				var z14 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp5 = z14;
			}
		} else {
			var z15 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp5 = z15;
		}
		if(tmp5 != 0) {
			if(decodeState.validBits < 0) {
				highBits = 0;
			} else if(decodeState.validBits < 5) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 5)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					highBits = 0;
				} else {
					var z16 = decodeState.acc & 31;
					decodeState.acc = decodeState.acc >>> 5;
					decodeState.validBits -= 5;
					highBits = z16;
				}
			} else {
				var z17 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				highBits = z17;
			}
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	var this2 = new Array(r.classifications);
	r.residueBooks = this2;
	var _g2 = 0;
	var _g3 = r.classifications;
	while(_g2 < _g3) {
		var j1 = _g2++;
		var this3 = r.residueBooks;
		var this4 = new Array(8);
		this3[j1] = this4;
		var _g21 = 0;
		while(_g21 < 8) {
			var k = _g21++;
			if((residueCascade[j1] & 1 << k) != 0) {
				var this5 = r.residueBooks[j1];
				var val;
				if(decodeState.validBits < 0) {
					val = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val = 0;
					} else {
						var z18 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val = z18;
					}
				} else {
					var z19 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val = z19;
				}
				this5[k] = val;
				if(r.residueBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Residue.hx", lineNumber : 55, className : "stb.format.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j1][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	var this6 = new Array(el);
	r.classdata = this6;
	var _g4 = 0;
	var _g5 = el;
	while(_g4 < _g5) {
		var j2 = _g4++;
		var temp = j2;
		var k1 = classwords;
		var this7 = r.classdata;
		var this8 = new Array(classwords);
		var cd = this7[j2] = this8;
		while(--k1 >= 0) {
			cd[k1] = temp % classifications1;
			temp = temp / classifications1 | 0;
		}
	}
	return r;
};
stb_format_vorbis_data_Residue.prototype = {
	decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var nRead = this.end - this.begin;
		var partSize = this.partSize;
		var partRead = _$UInt_UInt_$Impl_$.toFloat(nRead) / _$UInt_UInt_$Impl_$.toFloat(partSize) | 0;
		var this1 = new Array(header.channel * partRead);
		var classifications = this1;
		var _g = 0;
		var _g1 = ch;
		while(_g < _g1) {
			var i = _g++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g2 = 0;
				var _g11 = buffer.length;
				while(_g2 < _g11) {
					var j = _g2++;
					buffer[j] = 0;
				}
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g21 = 0;
			var _g3 = ch;
			while(_g21 < _g3) {
				var j1 = _g21++;
				if(!doNotDecode[j1]) {
					break;
				} else if(j1 == ch - 1) {
					return;
				}
			}
			var _g4 = 0;
			while(_g4 < 8) {
				var pass = _g4++;
				var pcount = 0;
				var classSet = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i1 = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							var i2 = classwords;
							while(--i2 >= 0) {
								classifications[i2 + pcount] = q % this.classifications;
								q = q / this.classifications | 0;
							}
						}
						var _g41 = 0;
						var _g5 = classwords;
						while(_g41 < _g5) {
							var i3 = _g41++;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var c1 = classifications[pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var book = codebooks[b];
								var result = book.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var z2 = this.begin + pcount * partSize;
						var cInter1 = 0;
						var pInter1 = z2;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i4 = c2.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i4 >= 0) {
								var l1 = c2.codewordLengths[i4];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i4;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val1 = c2.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							var i5 = classwords;
							while(--i5 >= 0) {
								classifications[i5 + pcount] = q1 % this.classifications;
								q1 = q1 / this.classifications | 0;
							}
						}
						var _g42 = 0;
						var _g51 = classwords;
						while(_g42 < _g51) {
							var i6 = _g42++;
							if(pcount >= partRead) {
								break;
							}
							var z3 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var book1 = codebooks[b1];
								var result1 = book1.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z3 = z3 + partSize;
								cInter1 = 0;
								pInter1 = z3;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z4 = this.begin + pcount * partSize;
						var cInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						var pInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						if(pass == 0) {
							var c3 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i7 = c3.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i7 >= 0) {
								var l2 = c3.codewordLengths[i7];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i7;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c3);
							}
							if(c3.sparse) {
								val2 = c3.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							var i8 = classwords;
							while(--i8 >= 0) {
								classifications[i8 + pcount] = q2 % this.classifications;
								q2 = q2 / this.classifications | 0;
							}
						}
						var _g43 = 0;
						var _g52 = classwords;
						while(_g43 < _g52) {
							var i9 = _g43++;
							if(pcount >= partRead) {
								break;
							}
							var z5 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var book2 = codebooks[b2];
								var result2 = book2.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z5 = z5 + partSize;
								cInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
								pInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g22 = 0;
		while(_g22 < 8) {
			var pass1 = _g22++;
			var pcount1 = 0;
			var classSet1 = 0;
			while(pcount1 < partRead) {
				if(pass1 == 0) {
					var _g23 = 0;
					var _g31 = ch;
					while(_g23 < _g31) {
						var j2 = _g23++;
						if(!doNotDecode[j2]) {
							var c4 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i10 = c4.fastHuffman[decodeState.acc & 1023];
							var val3;
							if(i10 >= 0) {
								var l3 = c4.codewordLengths[i10];
								decodeState.acc = decodeState.acc >>> l3;
								decodeState.validBits -= l3;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val3 = -1;
								} else {
									val3 = i10;
								}
							} else {
								val3 = decodeState.decodeScalarRaw(c4);
							}
							if(c4.sparse) {
								val3 = c4.sortedValues[val3];
							}
							var temp = val3;
							if(temp == -1) {
								return;
							}
							var i11 = classwords;
							while(--i11 >= 0) {
								classifications[j2 * partRead + i11 + pcount1] = temp % this.classifications;
								temp = temp / this.classifications | 0;
							}
						}
					}
				}
				var _g24 = 0;
				var _g32 = classwords;
				while(_g24 < _g32) {
					var i12 = _g24++;
					if(pcount1 >= partRead) {
						break;
					}
					var _g25 = 0;
					var _g33 = ch;
					while(_g25 < _g33) {
						var j3 = _g25++;
						if(!doNotDecode[j3]) {
							var c5 = classifications[j3 * partRead + pcount1];
							var b3 = this.residueBooks[c5][pass1];
							if(b3 >= 0) {
								var target = residueBuffers[j3];
								var offset = this.begin + pcount1 * partSize;
								var n1 = partSize;
								var book3 = codebooks[b3];
								if(!book3.residueDecode(decodeState,target,offset,n1,this.type)) {
									return;
								}
							}
						}
					}
					++pcount1;
				}
			}
		}
	}
	,__class__: stb_format_vorbis_data_Residue
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "R_sfx_firehit_wav", data : "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"},{ name : "R_sfx_hit_wav", data : "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"},{ name : "R_fonts_fonts_json", data : "Ww0KCXsNCgkgICJpbnB1dCI6ICIwNEJfMDNfXy5UVEYiLA0KCSAgIm91dHB1dCI6ICJmb250MTQuZm50IiwNCgkgICJtb2RlIjogInJhc3RlciIsDQoJICAib3B0aW9ucyI6IFsiYWxsb3dub25wcmludCJdLA0KCSAgImNoYXJzZXQiOiBbDQoJCSJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSA/ISwoKS0vJy4iDQoJICBdLA0KCSAgImZvbnRTaXplIjogMTQNCgl9LA0KCXsNCgkgICJpbnB1dCI6ICIwNEJfMDNfXy5UVEYiLA0KCSAgIm91dHB1dCI6ICJmb250MjAuZm50IiwNCgkgICJtb2RlIjogInJhc3RlciIsDQoJICAib3B0aW9ucyI6IFsiYWxsb3dub25wcmludCJdLA0KCSAgImNoYXJzZXQiOiBbDQoJCSJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSA/ISwoKS0vJy4iDQoJICBdLA0KCSAgImZvbnRTaXplIjogMjANCgl9DQpd"},{ name : "R_props_json", data : "ew0KCSJmcy5jb252ZXJ0IiA6IHsNCgkJIndhdiIgOiAib2dnIg0KCX0NCn0"},{ name : "R_p0Banner_png", data : "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"},{ name : "R_sfx_save_wav", data : "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"},{ name : "R_sprites_png", data : "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BEMD6Ft73dUf/tqu62Sr6H70PUaf1sOs0HNvp77BuvXPSFfnzkiBfL37HhOqv5t6mC3m7n/wifdvucj9nqz9Rw5e9uTv5IxsZd+dlzOilJ0cvS8IopX6u6wnZizUB/7IHgz0ehj4Bn1aD7PC2H0AfTvdSkvlsN4F/YkXb5epiGxb1MurMrFRzUraD91nZAB5y3VSq8s1+gaXXeH9/mcbAr0WSVwRJuqPFlG9X3m0PZKmSmb7c/RO0x83TFTfLzcMdJ+hASSho8t8cihbedUVcMmRqc+p30+4uu2ZtD4wTGb7YVbo+QmtaeEvcuuZaI+Yr8+p3/WgddvjaFFf/GfS82X6osFgVuj5Q3x/6Z1+5ehVintfE0N8pT6nfp9JtydHH0WNka+HmWDsItjNyP1OLlEYPbfAZp0xA+j7ql2djvXpN9jXVxapJV55e7qgh+4z+hNJ/33xO7Ldefjb7ozsP/JGX88Xo6hPFKklbqs909UTsxEr95BbTpmoUyddP9ik1ACZOe1WBuvaoJbeibEBtEvkcejMbCuuozsbVH7XwDOJIrWaBFCXueKk6PKz1wi6/9VNc0JRoydFdvPGuY+fu0ZwZROlgpe0uCtS9l1ckxJKgmgY6oOyvrys3/XvB7l1cbdEWNZVF++kuiXF6LcI7jrVGmQAchh8uVRz69yazWUTGz30xSdevL3SAEH2+57RZwqCIkUD4AFondEcw40J5999pe64iU00Hnmjr+KzL/iC7MjWFfRr63nTHndeaha9FtFS/vQmmEEVmxHUTxDNw+9otVfWx2b87jnodIOO3D1po8WLU5piXx6UCiZC/tSrOMgwCECL9ILZvMtLoWgAP0GDUs4wwZWDv1jkKvS/S9Q2UU+q2J+YTf2fD2adnp+d0RGg7DIguJYtWiU6CPhXDsGlc9QAZcMFIwC0wugiOEjN4kVwelZTOTmJToQSsyzfMMEgE71oBmjAaBm0uOBYN6Hz9Vok8V2KBghsSfZDK4T3ATKzPyhVNlBE9f5VQVmpQBOMM3T/0BbxRyHyn+0JcrqBPlEw8ECDJ44A0oQPw+WncjO9X6pW/XT8MAna+fXodfOymWHIfmgd/j4AmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGkwAJgGA4BpMACYBgOAaTAAmAYDgGn+Dx9qZpCY6gDIAAAAAElFTkSuQmCC"},{ name : "R_title_png", data : "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"},{ name : "R_pubBanner_png", data : "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"},{ name : "R_sfx_music1_sunvox", data : "U1ZPWAAAAABWRVJTBAAAAAAABwFCUE0gBAAAAH0AAABTUEVEBAAAAAYAAABHVk9MBAAAAFAAAABOQU1FGgAAAE15IHNvbmcgMjcgYXVnIDIwMTIgMDAuMzIAUERUQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUENITgQAAAABAAAAUExJTgQAAAAgAAAAUFlTWgQAAAAgAAAAUElDTyAAAAAAAAAAMAAwPYhIAEDEQARAJBAEMCgwMCKACQAQABAAEFBGR0MDAAAAAAAAUEJHQwMAAAD///9QRkZGBAAAAAAAAABQWFhYBAAAACT///9QWVlZBAAAAAAAAABQRU5EAAAAAFBEVEGoBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgQIAWgAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGBAgBaAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMgQIAWgAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2BAgBaAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEYECAFAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADIECAFAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANgQIARQAAAIAAAAAAAAAAAAAAAAAAAAARgQIAVQAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgQIARQAAAIAAAAAAAAAAAAAAAAAAAAASgQIAWgAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbgQIAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgQIAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGBAgBVAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZgQIAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaBAgBAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIECAFUAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2BAgBVAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyBAgBAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYECAEUAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACKBAgBaAAAAgAAAAAAAAABQQ0hOBAAAAAEAAABQTElOBAAAALUAAABQWVNaBAAAACAAAABQSUNPIAAAAHJOZmZzzsJDZCYH4JGJJmQr1FZq88/mZ/vf8A/gB8ADUEZHQwMAAAAAAABQQkdDAwAAAP+AgFBGRkYEAAAAAAAAAFBYWFgEAAAAAAAAAFBZWVkEAAAAIAAAAFBFTkQAAAAAUERUQTgHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6BAgBFAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANYECAEUAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD2BAgBFAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALIECAFAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzgQIARQAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADWBAgBFAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALIECAFoAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADOBAgBVAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANYECAEoAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsgQIAWgAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCBAgBQAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsgQIAWgAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMYECAEAAAACAAAAAAAAAAAAAAAAAAAAANYECAFoAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaBAgBAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsgQIAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANYECAEAAAACAAAAAAAAAAAAAAAAAAAAANoECAFUAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADiBAgBFAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMYECAEoAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2gQIAWgAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANoECAFUAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4gQIAVQAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADqBAgBFAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANoECAEAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQQ0hOBAAAAAEAAABQTElOBAAAAOcAAABQWVNaBAAAACAAAABQSUNPIAAAAOmXJmRMMsADgAHL0wZgDDAMMAZgy9OAAcADTDImZOmXUEZHQwMAAAAAAABQQkdDAwAAAP+AgFBGRkYEAAAAAgAAAFBYWFgEAAAAAAAAAFBZWVkEAAAAQAAAAFBFTkQAAAAAU0ZGRgQAAABDAAAAU05BTSAAAABPVVQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNGSU4EAAAAAAAAAFNSRUwEAAAAAAAAAFNYWFgEAAAAgAMAAFNZWVkEAAAAAAIAAFNDT0wDAAAA////U01JQwQAAAAAAAAAU01JQgQAAAD/////U01JUAQAAAD/////U0xOSwgAAAACAAAA/////1NFTkQAAAAAU0ZGRgQAAABZAAAAU05BTSAAAABHZW5lcmF0b3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNUWVAKAAAAR2VuZXJhdG9yAFNGSU4EAAAAAAAAAFNSRUwEAAAAAAAAAFNYWFgEAAAAgAAAAFNZWVkEAAAAAAIAAFNDT0wDAAAABf8AU01JQwQAAAAAAAAAU01JQgQAAAD/////U01JUAQAAAD/////U0xOSwAAAABDVkFMBAAAAIAAAABDVkFMBAAAAAAAAABDVkFMBAAAAIAAAABDVkFMBAAAAAAAAABDVkFMBAAAAAACAABDVkFMBAAAAAgAAABDVkFMBAAAAAAAAABDVkFMBAAAAAAAAABDVkFMBAAAAAAAAABDVkFMBAAAAP8BAABTRU5EAAAAAFNGRkYEAAAAUQAAAFNOQU0gAAAARWNobwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTVFlQBQAAAEVjaG8AU0ZJTgQAAAAAAAAAU1JFTAQAAAAAAAAAU1hYWAQAAAAAAgAAU1lZWQQAAAAAAgAAU0NPTAMAAAD/o39TTUlDBAAAAAAAAABTTUlCBAAAAP////9TTUlQBAAAAP////9TTE5LCAAAAAEAAAD/////Q1ZBTAQAAAAAAQAAQ1ZBTAQAAACAAAAAQ1ZBTAQAAACAAAAAQ1ZBTAQAAAAAAQAAQ1ZBTAQAAAABAAAAU0VORAAAAABTRU5EAAAAAA"},{ name : "R_fonts_font12_fnt", data : "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"},{ name : "R_sfx_fireball_wav", data : "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"},{ name : "R_sfx_kill_wav", data : ""},{ name : "R_sfx_walk_wav", data : "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"},{ name : "R_fonts_font12_png", data : "iVBORw0KGgoAAAANSUhEUgAAAFgAAABbCAYAAAD3AUKaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAA29JREFUeJztnd1WxDAIhLMe3/+V61W1RiBAmDRd57vq2ebPdUqAUH0dx9EIjs/L9flNv7pr730k1nqa856mJKuf1Maztm8+jI6kgM9xE/E39DLuVTJ6krS2/fqk9la/yDpMqGAwmoKrFJmxadd+iCfDst2eNv3aTCVTwWCuCkaoJTrmCuV6xrbse/+ZOT4VDEbzg69IHoOlBq9Ssn61Zvu8qrf2Bc+e4VH3N1QwmFdhqLw6unsEVDAYTyTnhcoVOL/gkZ3IJlmy48zMddc4IjQRYHoTkU7LDe4dwrXl7kQSOtpc3nGao016A6eCwfQKnrWLWlsr1SmN40qkJNazYpxfUMFgTgVHEs2RREgklI7M1Yw2Ep4nIRQCe6GCwYz84Kjt9BAZJ9Im4t1IP29mT6AffDeVyR4iEDERs3lUT3+Ps2/Noc0VnSNjiniicQejUNnjOln9tTEyRGoxPIFKdl08Vd6JTD44WhM20x/B7BOlPUni2qlgMBkFZ9KVUhtP2OtV9Myp9KySTahgMOh05fX+rH21Kmkyoayl5LLUJRUMhqEymD5UzhS97XbSe21bFZ6nc8U0EWC0TQ51ErH6pLfKJUtDBYPRkj1P2PmqTlgihJ8EKhjM6CWYrJJX1ipAToOroILBRJI9EZuXSYZH1RnxlbPrmPZCqGAwO4XKW9nOKqhgMJWvEMzyVso9GSV7mnC/Kkkyu0mhTMrsuL/600SA0UzEig0nU5An9V1xkp0uQqSCwcycKle/AiCpyqPy6lqzw2hzCJ9bZ4VUMJqZyp6ZhLk1zo5YazXDaSoYTP8SjGZzkOlGqU3GhktzWPuFZw7L9rqggsHslOx5SyIKPtr4kZXaXD/LjvFYaCLAjIr/TryhafR0ox8zWr66c1VRa40KhuOtTbsSDU0z4ao2p8eNvLOq6M/3RQWDuetE4228hBFUMBgtVEZzVzVOpCajJB1LBYMZhcoVynpSWrK1ufX+6UsFg8m8xuXlacqFQAWDYboSTLWC3yrVWAFNBBgt2WMlbXpGtQHVtWyexE/knjWXBs/kdsHzImKk1H8X12x2PWWhPBUMxvMHmkdJZYRarQR4de1GdB0hqGAwkf8n1+O1xZkKmlk1Wir3rEfzik7oRewCQ+UfILacCgaz02tcq1nhDVHBaP6zgpdEm1QwmC+7uT4TnXdMewAAAABJRU5ErkJggg"},{ name : "R_music_ogg", data : "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"},{ name : "R_sfx_menu_wav", data : "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"},{ name : "R_sfx_princess_wav", data : ""},{ name : "R_world_png", data : "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"},{ name : "R_fonts_font18_png", data : "iVBORw0KGgoAAAANSUhEUgAAAH4AAACECAYAAABWKp/3AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAABDNJREFUeJztndlypDAMRbun8v+/3HmYSooiYLR5gXvO06SCF3JH8iLZvD+fzwv0+Nr8e/s/4H3w8yv47ApY32WL5zmL9Vjra5U5w/33/2esGB4Gwovydf3ILy138jY+NxLPUGUpf/aOrTqs9VnLnP3ODRYvCsKL0nL1I9x05cx2X9+sYca6SoiUOXs/t9vH4kVBeFG2rn6Ga6xoczX3HumDdWVx9jt3X7B4URBelNZe/Z7WJo3V1UVdYnVswDIjjg4b1pVKZEUTGRIOweJFQXhR3gPi8SvMumEHFi8KwoviCctGwb0vyI/w3oG+On2pup1ImWzAaLV2muDqRUF4UY7G+G6Zncbn9q4skiaVTa2y9C3azqvxc6YdF1i8KAgvypGr7zlztpS3ZvC22kmlJTnayTKqnT9g8aIgvCg/rj6b3J9NHcrG8LN92xNxtZEhpSy+7gWLFwXhRfHs1VfMtiNk28mWyW5Otf62lasU9urhGoQXZUTqFSxIZozvmUYcqTsS8LD256y+6v5Uzjuaz+PqRUF4UTzx+MjumLXuq/oryV7bEgkAVb9b+pw8Fi8KwotSlV5dcUlgr7pn0XPosgxXzb8HFi8KwotS5eors2xbZSIx9OgQ0OsMfk+3bwaLFwXhRVkly3b/bM8ZuvW2qMoYuNXtD8u6xeJFQXhRiMeLchSPr7xl8Wln0PflR+UNlKdh4+pFQXhRrpZzs0+4rH4GfdTuXDlYvCgIL8pV6pXSWm/UyaAsJUMKFi8KwotyFY/v6fZXvm5k2rn1UWDxoiC8KJnUq+wsuPIAQ4Xbzu7vW8tlz8RzwSHEQXhRnhKPf8xsexRYvCgIL8qIT5OMAPfuxJN6taUiZj7jGpMWs+cJPdv/UzeuXhSEF+VqjJ/t/vZU3h7Zqne1c/zlt3Ni8aIgvCg9zsfP+HxIy51GhocZlxPu+2O54sS66mFWD/9BeFF63HrV69CDtZ0nYn1vcwwfixcF4UU5+gqVZTa5QiZsq0zliqHVH+tqJtIf60w+BBYvCsKL8pTUK3CSWc5FxhrPblt1/bABVy8KwoviudlySzR+XXGy5qzdo/LeCczTb+n6BYsXBeFFiV5wuKcifl0Z2z4iuzt5x1u6TjXD4kVBeFHucpKG7cVisHhREF6Uq3j8KtzpFqrs1S1DspSxeFEQXhRPPL63W13RbY+i17uf1ovFi4LwolR9cDCKsnufChYvCsKLQpatKKODNIzpi4CrFwXhRblKvYp8T3aL53qOGZckRtKxss9Z+2aBQ5PgA+FF8X5bNvtpkCfM6nu+z7C8AyxeFIQX5erbstbfrfYtVuuBhRnXvljp2gcsXhSEF8W7V589zttyp5U3Q/V0z9bhIfI+ls2uLWzggA+EF4V4/FymrR6weFEQXpS7HJO+O6ttcGHxqiC8KLj6MSwXgsbiRfkGDLs4dWzjsuYAAAAASUVORK5CYII"},{ name : "R_sfx_gameover_wav", data : ""},{ name : "R_sfx_sword_wav", data : "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"},{ name : "R_fonts_font18_fnt", data : "QkZOVAABBQAwNGIwMxIACgBmb250MTgucG5nGAASAD8AAABvAAAAVABaAAwADAAAAAYADgAAAAAASgAAAEYAJAAMAA8AAAADAA4AAAAAAHAAAABhAFoADAASAAAABgAOAAAAAABLAAAAUwAkAAwADwAAAAMADgAAAAAAcQAAAG4AWgAMABIAAAAGAA4AAAAAAEwAAABgACQACQAPAAAAAwALAAAAAAAnAAAABgABAAMABgAAAAMABQAAAAAAcgAAAAEAcAAJAAwAAAAGAAsAAAAAAE0AAABqACQADwAPAAAAAwARAAAAAAAoAAAACgABAAYADwAAAAMACAAAAAAAcwAAAAsAcAAMAAwAAAAGAA4AAAAAAE4AAAABADQADAAPAAAAAwAOAAAAAAApAAAAEQABAAYADwAAAAMACAAAAAAAdAAAABgAbQAJAA8AAAADAAsAAAAAAE8AAAAOADQADAAPAAAAAwAOAAAAAAB1AAAAIgBwAAwADAAAAAYADgAAAAAAUAAAABsANAAMAA8AAAADAA4AAAAAAHYAAAAvAHAADAAMAAAABgAOAAAAAABRAAAAKAA0AAwAEgAAAAMADgAAAAAALAAAABgADQAGAAYAAAAPAAgAAAAAAHcAAAA8AHAADwAMAAAABgARAAAAAABSAAAANQA0AAwADwAAAAMADgAAAAAALQAAAB8ABwAJAAMAAAAJAAsAAAAAAHgAAABMAHAACQAMAAAABgALAAAAAABTAAAAQgA0AAwADwAAAAMADgAAAAAALgAAACkADQADAAMAAAAPAAUAAAAAAHkAAABWAHAADAASAAAABgAOAAAAAABUAAAATwA0AAkADwAAAAMACwAAAAAALwAAAC0AAQAPAA8AAAADABEAAAAAAHoAAABjAHAADAAMAAAABgAOAAAAAAAwAAAAPQABAAwADwAAAAMADgAAAAAAVQAAAFkANAAMAA8AAAADAA4AAAAAADEAAABKAAEABgAPAAAAAwAIAAAAAABWAAAAZgA0AAwADwAAAAMADgAAAAAAMgAAAFEAAQAMAA8AAAADAA4AAAAAAFcAAAABAEcADwAPAAAAAwARAAAAAABYAAAAEQBHAAwADwAAAAMADgAAAAAAMwAAAF4AAQAMAA8AAAADAA4AAAAAAFkAAAAeAEcADAAPAAAAAwAOAAAAAAA0AAAAawABAAwADwAAAAMADgAAAAAAWgAAACsARwAJAA8AAAADAAsAAAAAADUAAAABABQADAAPAAAAAwAOAAAAAAA2AAAADgAUAAwADwAAAAMADgAAAAAANwAAABsAFAAMAA8AAAADAA4AAAAAADgAAAAoABQADAAPAAAAAwAOAAAAAAA5AAAANQAUAAwADwAAAAMADgAAAAAAYQAAADUASgAMAAwAAAAGAA4AAAAAAGIAAABCAEcADAAPAAAAAwAOAAAAAABjAAAATwBKAAkADAAAAAYACwAAAAAAZAAAAFkARwAMAA8AAAADAA4AAAAAAD8AAABCABQADAAPAAAAAwAOAAAAAABlAAAAZgBKAAwADAAAAAYADgAAAAAAQQAAAE8AFAAMAA8AAAADAA4AAAAAAGYAAABzAEcACQAPAAAAAwALAAAAAABCAAAAXAAUAAwADwAAAAMADgAAAAAAZwAAAAEAWgAMABIAAAAGAA4AAAAAAEMAAABpABQACQAPAAAAAwALAAAAAABoAAAADgBXAAwADwAAAAMADgAAAAAAaQAAABsAVwADAA8AAAADAAUAAAAAAEQAAAABACQADAAPAAAAAwAOAAAAAAAgAAAAAQAQAAAAAAAAABIACwAAAAAAagAAAB8AVwAGABUAAAADAAgAAAAAAEUAAAAOACQACQAPAAAAAwALAAAAAAAhAAAAAgABAAMADwAAAAMABQAAAAAAawAAACYAVwAMAA8AAAADAA4AAAAAAEYAAAAYACQACQAPAAAAAwALAAAAAABsAAAAMwBXAAMADwAAAAMABQAAAAAARwAAACIAJAAMAA8AAAADAA4AAAAAAG0AAAA3AFoADwAMAAAABgARAAAAAABIAAAALwAkAAwADwAAAAMADgAAAAAAbgAAAEcAWgAMAAwAAAAGAA4AAAAAAEkAAAA8ACQACQAPAAAAAwALAAAAAAAAAAAA"},{ name : "R_sfx_open_wav", data : "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"},{ name : "R_sfx_levelup_wav", data : ""},{ name : "R_sfx_puzzle_wav", data : "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SimllBJCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCAUA+E84APg/2KApsThAoSErAYBwAADAGKWYcgw6CSk1jDkGoZSUUmqtYYwxCKWk1FpLlXMQSkmptdhirJyDUFJKrcUaYwchpdZarLHWmjsIKaUWa6w52BxKaS3GWHPOvfeQUmsx1lpz772X1mKsNefcgxDCtBRjrrn24HvvKbZaa809+CCEULHVWnPwQQghhIsx99yD8D0IIVyMOecehPDBB2EAAHeDAwBEgo0zrCSdFY4GFxqyEgAICQAgEGKKMeecgxBCCJFSjDnnHIQQQiglUoox55yDDkIIJWSMOecchBBCKKWUjDHnnIMQQgmllJI55xyEEEIopZRSMueggxBCCaWUUkrnHIQQQgillFJK6aCDEEIJpZRSSikhhBBCCaWUUkopJYQQQgmllFJKKaWEEEoopZRSSimllBBCKaWUUkoppZQSQiillFJKKaWUkkIppZRSSimllFJSKKWUUkoppZRSSgmllFJKKaWUlFJJBQAAHDgAAAQYQScZVRZhowkXHoBCQ1YCAEAAABTEVlOJnUHMMWepIQgxqKlCSimGMUPKIKYpUwohhSFziiECocVWS8UAAAAQBAAICAkAMEBQMAMADA4QPgdBJ0BwtAEACEJkhkg0LASHB5UAETEVACQmKOQCQIXFRdrFBXQZ4IIu7joQQhCCEMTiAApIwMEJNzzxhifc4ASdolIHAQAAAABwAAAPAADHBRAR0RxGhsYGR4fHB0hIAAAAAADIAMAHAMAhAkRENIeRobHB0eHxARISAAAAAAAAAAAABAQEAAAAAAACAAAABARPZ2dTAASsGwAAAAAAAL5CAAACAAAAL8LZIREBAQEBAQEBASssNNHfe5nEgQACAAAAAAAA1EpSEgEmdFnH6mABqc94pC+fuJ5sGnwpjZr86W40kjbEnEujo08dVt1KFAxfWFIA83Af2zYyEJRBGsGaLm2ssPuG8y9ldIiQPgF9K+mFyfrmviZySEMBBGGYajDIb8DSVOfMADgzFgLLIMnfkkX6fSCYESWViePWnc1VRwz0mzHplQjwQm8/SlPrUJpYDQzPfT1RcfALp6tNLY/61q+t8+6nla/vnsdm1HXd0aCh94mOo3OeAzABvUYC1SClksDCa+md263J1R39z/sd3+qu8a3B4dvrcPW/tUaD/sfl3rmaVQFhvfbMzDUjStlmHHz8sTCATLy3H9qPG7XatuHweAfGYJADRTQmsVl1TfC5394dn379+b9W2pkJxBRT9LoeU+urN8BtWO36p3lZKHseAPh2n/v1WvidFACE+Po2L9TipZMNDahs7xN16WPuysbeSM37kiJOfvcWYS9YfhlmUQp+QIed8vIK3PSs8H2nhzEM7DzPcwDk1NACAEZrbwHAfg4AAADYeQP0AmP0xg4pKJVTc3Lzl+tbqxrnkHgcx3GYz6DuMe4YoVprJSItMUeMAEBNxukRV4BWrY0mEF2j4iA7SDUB/DSNAt5iDNN7q/cu8mQ1BgAYddEBADS+++0P32wMUJ0VAAAAKs55ifnwnQ7uAGAAAKCS1SX8dvqud3kEAwDw7qUaXlTQ18cNAAMAlABWvz+DyswcAt1JGbB94jH/6UTiAFgAyKSY9kxbS2cAIHPZI1nuTHoVAJ4Jbk8s4TXbPD89IzH82pePD4A6AACQBEUAABATANMEiKQAGRAAIEgDgAYEaZAAgAqAqID5AgAAALksAADAEAAAAAAAUgBaVgAADADvIXRQgpBCCoS846iEAABo/yyjDSDkhwMAAHAGwBZAAQAAAHweAQAAAJCcAQAMAL7oNchJvBJLTN41jcdnM3anG+c4El3XdV3XgboGXQkJml/dAIATgGcCIJA+AQAQQZAGAF0CyQlIAMDSP4mf+vr9vfsqR1jW9F9DCEF9DSHwmzMIAAAAAN23ArALAAAAAAAAfBoFfBwAAKAIh0eZ/dJxTm6uIhwe/f+/1fAX8GMCPADKKStAAgB+tgAA/PrvAAAgeAIAQALbAN72DAe2G92NLrp77jxV20s9bzvP8zzPAePz9AUA5kCfgB4ARgsAO8/zABkwEkCoWqAGjCVThf9NPHq2HmOMAO2Vba1BtccZY4wxxggAAEDwvKnW3pf4ogDw9t3dnajHx79vOr/dglUIT7yUanvvvffe+3ukVgD62YZKdTUJ/B3hrNY3w4T548bhuFYDAACQ9aXZbx0AAACeb2kAAAAAADB/DAAISHh1CPMAAPTeId88yd0GAwAg32QYAvB461tkzwDAjwL+lVzkU0J/xPF15+nDPSJwIDq3zrnzZBwxgB5mYrVqQQQBAgAAAEqO87+L+WcPabqu9VXz+Exa6SFRDWH5pOe5oDOVcZnwR9+5QM963kbf+uv9xvGlyp1nQL2CN/88avbtZ9hKA8Ce/7Hvz9RRAODU5x8dKwDAQvwyAbgcPQCXYAE"},{ name : "R_sfx_chest_wav", data : "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"},{ name : "R_tiles_png", data : ""},{ name : "R_dungeon_png", data : "iVBORw0KGgoAAAANSUhEUgAAAGIAAABiCAIAAAAkx5FZAAAAB3RJTUUH3AgbABApFjBnlgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QA/wD/AP+gvaeTAAADWElEQVR4nO2bv28TMRTHQ2FAVI0QA2JIxcSEYKBToH9AOxCFjT+AqUMXKhqhSgipgpBuDCBGJARjoy6tmNNu3dnJxMpcGaMTT9adcz/iZ/uZfL/66uRYl8v502c/n31ttZfbcKVb0e8gCQMTMAETMEl0aEynP87m88JhGjUXMAETMC0apqVWVK0cDhrVR1O60RQyFSaDyepgvTJyp6uv06NJ0bp+8ussxM8jmupYEKaP3aUSTNZLaX/d3g4wNgnqdL+fDBudv7m2YS37kCBMTXV8fmIte5GcTlc+Nll7XG7wWohO11Q602VpTh+zrOdRvJFS+Vctpqr5FlIolJRqB0h2zJiUWq5/u4Rpvt/S3+3t9OkoF5PjipojppBjkyumOUZfFkwmqTTmTc8/f6Hy6uCltd6HsrnS9Qc3Wv7nTQlHU7te0mAxw9ikm3px936OTlYzqw3UPKVWhGwKeMTUrgqoWY3X9To96cexzLosHFO06eXusxfWskxJmYV7H4PdxIPJTHCzakwJh1IUD6afwzeVNUXd3npKR+GK1ulCrha5iwHTo946uTOdUvnqnVX3i0sRb+LU2Z3K3XvdkmlEbokWEwK7sq2RaadDeySSxYxJN3vv1V7Nk2lRjfcefIg/mvZf79c8c/3mw8G4r4/s98CumNNLHUfD/ngRo2lWm4/PTzKblVkcJRFNnJmOnngp05FHfxetr1E6s66FR09nJWbGpNQVwmTaysJ9vSlVTGY0VTohTJxjk85xehZeP9OlJEbkNKumj40cPWRCRJN1R9/6UtKsN5W8vwfgIsfwydl8RtOefLpVPCcbvx5ffCdXbi5Et/edFaUum+03MfV2+qlgYuh0NKW0Fg4O3pZ899LuB/cbCCAGTDSNLilYpd5tabvfQAg16mLW+WGlcp3O+i3hya4ZJv3AYT6CvD/8Nvr3QkhJoQiXrK+QxIQgdDTlXLLCKcoNxqbNtQ35a/ue5D3TuV9fgmJmuoTkffVyMO77/okQchnY3B9rUxnCI//nODABEzABEzABEzBJMDABEzABk0QDEzD9H5gSetUiMibzpSfJjoxJ/p5KfEwJGZiACZiASaKBCZiACZgkGpiACZiASaKBCZiACZgkGpiACZiASaKBCZj4/AdRcPs4zgbVQQAAAABJRU5ErkJggg"},{ name : "R_sfx_npc_wav", data : ""},{ name : "R_title2_png", data : "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"},{ name : "R_title3_png", data : "iVBORw0KGgoAAAANSUhEUgAAASwAAADMCAIAAABGLAkUAAAAB3RJTUUH3AgZFREVkKCDQAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QA/wD/AP+gvaeTAAAC3UlEQVR4nO3dQU7CQBiAUe6/7z08kFuvoS6MxCCQ2lG+sX3JW7GhJPMx05+knJanVyB0yq8ADk6EEBMhxEQIMRFCTIQQEyHERAgxEUJMhBATIcRECDERQkyEEBMhxEQIMRFCTIQQEyHERAgxEUJMhBATIcRECLEtET6/vN16/UP+qeAf2bgTXsSmPdhs+3H0vO/JD0aM3hMqEAYZzEBMhBATIcREuMWacZTBFSuJcLtbgQmPHxHhEL+XMk6Eoxw7GSTCXyA/RogQYiKEmAghJkKIzRLhndmG2SP7NkuEy7cOtcdBTBTh8tmh9jiUuSJcFMjxTBchHI0IISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAgh9ugIVz66wlOeOI5gJ7xTV9jemjf13y/8hew4+nUpz7Cy5/xq4Ajie8LZ1vfVZ5/mV8W+GcxcOoenQB5DhFfMtj+zbyKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIvQPnPvjfUUrNxwAAAABJRU5ErkJggg"}];
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
haxe_MainLoop.add(hxd_System.updateCursor,-1);
var hx__registerFont;
hx__registerFont = function(name,data) {
	var s = window.document.createElement("style");
	s.type = "text/css";
	s.innerHTML = "@font-face{ font-family: " + name + "; src: url('data:font/ttf;base64," + data + "') format('truetype'); }";
	window.document.getElementsByTagName("head")[0].appendChild(s);
	var div = window.document.createElement("div");
	div.style.fontFamily = name;
	div.style.opacity = 0;
	div.style.width = "1px";
	div.style.height = "1px";
	div.style.position = "fixed";
	div.style.bottom = "0px";
	div.style.right = "0px";
	div.innerHTML = ".";
	div.className = "hx__loadFont";
	window.document.body.appendChild(div);
};
hx__registerFont("R_fonts_04B_03___TTF","");
js_Boot.__toStr = ({ }).toString;
Chests.t = [{ name : "Left Key", sub : "Always going right is boring !"},{ name : "2D Movement", sub : "Lucky ! You can't go anywhere else anyway"},[{ name : "Basic Scrolling", sub : "You want to see where you're heading, right ?"},{ name : "Smoother Scrolling", sub : "Will save you some headache"}],[{ name : "16 Colors Display", sub : "OMG ! Color !!"},{ name : "64 Colors Display", sub : "Mooorreee !! Coloooor !!"},{ name : "256 Colors Display", sub : "This is almost real graphics, no ?"},{ name : "True Colors Display", sub : "At last, RGB !"}],[{ name : "Monsters !", sub : "Be careful not to touch them !"},{ name : "Powerful Monsters", sub : "Make sure you have saved your game"}],[{ name : "Sword", sub : "Now you can kill the evil monsters, and cut bushes"}],[{ name : "VGA Resolution", sub : "Now it looks like some good-old game !"},{ name : "HD Resolution", sub : "Sorry, no 3D yet !"}],{ name : "Save Points", sub : "An evolution that changed gaming forever..."},[{ name : "Ad Banner", sub : "Developers have somehow to pay for their own food, no ?"},{ name : "Social Links", sub : "Share with your friends !"}],[{ name : "NPC", sub : "It's nice to be able to talk to someone !"},{ name : "Quest System", sub : "It's even better if NPC have some actual usefulness !"}],{ name : "Gold Coin", sub : "This is a shiny piece of gold !"},{ name : "Key", sub : "You found a key !!! What does it open ?"},{ name : "Free Movement", sub : "Looks like it's time for some action/adventure !"},{ name : "Diablo Mode", sub : "A life bar and some XP system !"},{ name : "Triforce", sub : "Dungeon cleared ! Time to go back to overworld !"},{ name : "P0rn Banner", sub : "Classic ads don't make enough money..."},{ name : "Sounds FX", sub : "The game looks much more alive this way"},{ name : "Music", sub : "Always good for better ambient"},{ name : "Title Screen", sub : "There's always a starting point somewhere"},{ name : "Right Key", sub : "There seems to be some chest to open this way"},{ name : "Secret Block !", sub : "Ta-da-da-dam !"},{ name : "Dungeons", sub : "My passion : explore dark caves filled with hungry monsters"},{ name : "Killed-all-monsters", sub : "Good boy ! You get a bonus for this !"},{ name : "Puzzle Solved !", sub : "Real adventurers must be strong AND smart"},{ name : "Level Up !", sub : "You have reached level "},{ name : "Monster Farming !", sub : "What that ACTUALLY funny ?"},{ name : "Princess", sub : "Or is it a Prince, maybe ?"}];
h3d_shader_ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
BitmaskShader.SRC = "HXSLDUJpdG1hc2tTaGFkZXIMAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwRtYXNrAQIAAAwFZGVsdGEDAgAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPBGNvbnYOBgAAEAhmcmFnbWVudA4GAAAEAg0AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAOAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAMPAREBdgMEAAADBQIIEgFrAQQAAAYLCQMlDgEJAxUOAgYABgECEQMBAwAAAAAA4G9AAwMCDAMDAQMAAAAAAOBvQAMDAQILAQEADQYCCQMmDgECEgEDAQMAAAAAAAB0QAMDAAABEAAABQUIEwVwaXhlbAUMBAAACQMhDgICCgoCCQUKBQwABgQCCAUMAhMFDAUMBgQKAggFDJIABQsJAykOAwkCDw4BCgITBQwAAAMDCQIPDgEKAhMFDAQAAwMJAg8OAQoCEwUMCAADAwULBQsGBAoCCAUMDAADAQMAAAAAAADwPwMDCwYFAgwDAQMAAAAAAABIQAMCBQILBgcKAhMFDAgAAwEDAAAAAAAA4D8DAgYECgIIBQwIAAMKAhMFDAgAAwMAAAsGDgYHCgITBQwAAAMBAwAAAAAAAOA/AwIGBwoCEwUMBAADAQMAAAAAAADgPwMCAgYECgIIBQwRAAUKCQMoDgIBAwAAAAAAAOA/AwEDAAAAAAAA4D8DBQoFCgAAAAAAAA";
hxd_Pad.CONFIG_JS_STD = { A : 0, B : 1, X : 2, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 12, dpadDown : 13, dpadLeft : 14, dpadRight : 15, analogX : 17, analogY : 18, ranalogX : 19, ranalogY : 20, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.CONFIG_JS_DS4 = { A : 0, B : 1, X : 2, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 12, dpadDown : 13, dpadLeft : 14, dpadRight : 15, analogX : 18, analogY : 19, ranalogX : 20, ranalogY : 21, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.CONFIG_JS_DS4_FF = { A : 1, B : 2, X : 0, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 9000, dpadDown : 9000, dpadLeft : 9000, dpadRight : 9000, analogX : 18, analogY : 19, ranalogX : 20, ranalogY : 23, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.DEFAULT_CONFIG = hxd_Pad.CONFIG_JS_STD;
hxd_Pad.initDone = false;
hxd_Pad.pads = new haxe_ds_IntMap();
Game.has = { monsters : false, npc : false, savePoints : false};
Game.DEF_PROPS = (function($this) {
	var $r;
	var tmp = [];
	var tmp1 = [];
	$r = { zoom : 4, bars : true, left : false, scroll : 0, color : 0, life : 0, monsters : 0, weapons : 0, web : 0, nchests : 0, pos : { x : 21, y : 76}, canSave : false, chests : tmp, rem : tmp1, npc : 0, keys : 0, gold : 0, quests : [], freeMove : false, dungeon : false, dmkills : 0, puzzle : false, xp : -1, level : 1, porn : false, sounds : false, music : false};
	return $r;
}(this));
Game.props = Game.DEF_PROPS;
Game.pad = hxd_Pad.createDummy();
Part.all = [];
Popup.all = [];
Sounds.sounds = new haxe_ds_StringMap();
Title.NEED_CLICK = true;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
format_mp3_MPEG.Reserved = 1;
format_mp3_MPEG.V1_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.V2_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.SamplingRates = [[format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_Bad]];
format_mp3_CLayer.LReserved = 0;
h2d_HtmlText.REG_SPACES = new EReg("[\r\n\t ]+","g");
h2d_filter__$Mask_MaskShader.SRC = "HXSLG2gyZC5maWx0ZXIuX01hc2suTWFza1NoYWRlcg0BBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQoCAAALBG1hc2sKAgAADAhtYXNrTWF0QQULAgAADQhtYXNrTWF0QgULAgAADgtzbW9vdGhBbHBoYQICAAEAAAAAAA8IX19pbml0X18OBgAAEAZ2ZXJ0ZXgOBgAAEQhmcmFnbWVudA4GAAADAg8AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAQAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAERAAAFBQgSBWNvbG9yBQwEAAAJAyEOAgIKCgIDBQoFDAAIEwJ1dgULBAAACQMpDgICAwUKAQMAAAAAAADwPwMFCwAIFAFrBQwEAAAJAyEOAgILCgkDKA4CCQMdDgICEwULAgwFCwMJAx0OAgITBQsCDQULAwUKBQwACBUFYWxwaGEDBAAACwIOAgoCFAUMDAADCQMmDgEGBwoCFAUMDAADAQMAAAAAAAAAAAMCAwMABgQCBwUMBgECEgUMAhUDBQwFDAA";
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_Matrix.tmp = new h3d_Matrix();
h3d_impl_InputNames.UID = 0;
h3d_impl_InputNames.CACHE = new haxe_ds_StringMap();
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g11 = [];
			var _g2 = 0;
			var _g3 = i;
			while(_g2 < _g3) {
				var k = _g2++;
				_g11.push(36064 + k);
			}
			_g.push(_g11);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__.slice();
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_pass__$Border_BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass_ColorMatrixShader.SRC = "HXSLGmgzZC5wYXNzLkNvbG9yTWF0cml4U2hhZGVyFQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgd0ZXh0dXJlCgIAAAsGbWF0cml4BwIAAAwIdXNlQWxwaGECAgABAAAAAAANB3VzZU1hc2sCAgABAAAAAAAOCm1hc2tJbnZlcnQCAgABAAAAAAAPD2hhc1NlY29uZE1hdHJpeAICAAEAAAAAABAHbWF0cml4MgcCAAARBG1hc2sKAgAAEghtYXNrTWF0QQULAgAAEwhtYXNrTWF0QgULAgAAFAltYXNrUG93ZXIDAgAAFQttYXNrQ2hhbm5lbAUMAgAAFghfX2luaXRfXw4GAAAXBnZlcnRleA4GAAAYBWFwcGx5DgYAABkIZnJhZ21lbnQOBgAABAIWAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAAFwAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADGAIaBWNvbG9yBQwEAAAbA21hdAcEAAAFDAUBDQsCDAIGAQIaBQwCGwcFDAYBCQMqDgIKAhoFDJIABQsBAwAAAAAAAPA/AwUMAhsHBQwFDAAAARkAAAUBCwINAgUFCBwFY29sb3IFDAQAAAkDIQ4CAgoKAgMFCgUMAAgdAnV2BQsEAAAJAykOAgIDBQoBAwAAAAAAAPA/AwULAAgeAWsDBAAACQMIDgIJAx0OAgkDIQ4CAhEKCQMoDgIJAx0OAgIdBQsCEgULAwkDHQ4CAh0FCwITBQsDBQoFDAIVBQwDAhQDAwAIHwZjb2xvcjIFDAQAAAsCDwIJAhgOAgIcBQwCEAcFDAIcBQwFDAAGBAIHBQwLAg4CCQMYDgMCHwUMCQIYDgICHAUMAgsHBQwCHgMFDAkDGA4DCQIYDgICHAUMAgsHBQwCHwUMAh4DBQwFDAUMAAYEAgcFDAkCGA4CCQMhDgICCgoCAwUKBQwCCwcFDAUMAAA";
h3d_pass__$Copy_CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d_pass_Default.__meta__ = { fields : { cameraView : { global : ["camera.view"]}, cameraNear : { global : ["camera.zNear"]}, cameraFar : { global : ["camera.zFar"]}, cameraProj : { global : ["camera.proj"]}, cameraPos : { global : ["camera.position"]}, cameraProjDiag : { global : ["camera.projDiag"]}, cameraProjFlip : { global : ["camera.projFlip"]}, cameraViewProj : { global : ["camera.viewProj"]}, cameraInverseViewProj : { global : ["camera.inverseViewProj"]}, globalTime : { global : ["global.time"]}, pixelSize : { global : ["global.pixelSize"]}, globalModelView : { global : ["global.modelView"]}, globalModelViewInverse : { global : ["global.modelViewInverse"]}}};
h3d_pass__$HardwarePick_FixedColor.SRC = "HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA";
h3d_pass_ShaderManager.STRICT = true;
h3d_shader_AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGgEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCHZpZXdwb3J0BQwCAAAcDm91dHB1dFBvc2l0aW9uBQwEAAAdCF9faW5pdF9fDgYAAB4GdmVydGV4DgYAAB8IZnJhZ21lbnQOBgAAAwIdAAAFBgYEAgsFDAkDKg4DAgIFCgIJAwEDAAAAAAAA8D8DBQwFDAsCEAIFAwYECgIMBQwAAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwISBQsDAwYECgIMBQwEAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwITBQsDAwYECgIMBQw5AAUKCgILBQw5AAUKBQoABgQCDAUMAgsFDAUMAAYEAg8FCgsCFgIGAAYBAgMFCgoCFwUMOQAFCgUKCgIXBQwRAAUKBQoCAwUKBQoFCgYEAg0FDAsCEAIGAQIRBQwCBAUMBQwCBAUMBQwFDAYEAg4FDAkDIQ4CAgoKAg8FCgUMBQwGgQINBQwCDgUMBQwAAB4AAAUFCCADdG1wBQsEAAAJAykOAgoCDAUMEQAFCgEDAAAAAAAA8D8DBQsABgQCHAUMCQMqDgMJAx0OAgIgBQsCFAULAwkDHQ4CAiAFCwIVBQsDCgIMBQw5AAUKBQwFDAYECgIcBQwRAAUKBgEEBgAKAhwFDBEABQoKAhsFDBEABQoFCgUKCgIbBQw5AAUKBQoFCgsCGQIGgwoCHAUMEQAFCgIaBQoFCgAABgQCBgUMAhwFDAUMAAEfAAAFAgsGDgIYAgYJCgINBQwMAAMBA/yp8dJNYlA/AwICDAAAAAYEAgcFDAINBQwFDAA";
h3d_shader_BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d_shader_Blur.SRC = "HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA";
h3d_shader_ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA";
h3d_shader_DirShadow.SRC = "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";
h3d_shader_LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d_shader_CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d_shader_NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d_shader_Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsDAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_SignedDistanceField.SRC = "HXSLHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA4BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEAthbHBoYUN1dG9mZgMCAAARCXNtb290aGluZwMCAAASBm1lZGlhbg4GAAATCGZyYWdtZW50DgYAAAIDEgMUAXIDBAAAFQFnAwQAABYBYgMEAAADBQENCQMWDgIJAxUOAgIUAwIVAwMJAxUOAgkDFg4CAhQDAhUDAwIWAwMDAAABEwAABQQIFw10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgYCGRpc3RhbmNlAwQAAAAABgQCGAMLBgUCDwEBAgAAAAABAgoCFwUMAAADCwYFAg8BAQIBAAAAAQIKAhcFDAQAAwsGBQIPAQECAgAAAAECCgIXBQwIAAMLBgUCDwEBAgMAAAABAgoCFwUMDAADCQISDgMKAhcFDAAAAwoCFwUMBAADCgIXBQwIAAMDAwMDAwMGBAIMBQwJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGg4DBgMCEAMCEQMDBgACEAMCEQMDAhgDAwUMBQwA";
h3d_shader_SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UFARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIAA";
h3d_shader_Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbggBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAUNYm9uZXNNYXRyaXhlcw8IBAIAAQgGBWlucHV0DQEEBwhwb3NpdGlvbgULAQYACAZub3JtYWwFCwEGAAkHd2VpZ2h0cwULAQYACgdpbmRleGVzCQQAAAABBgABAAALEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADAZ2ZXJ0ZXgOBgAAAQAMAAAFAgYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAAAAQgFCwULCgIJBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCgkEAAAABAABCAULBQsKAgkFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAgAAQgFCwULCgIJBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAAAAABCAYFCwULCgIJBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgIKCQQAAAAEAAEIBgULBQsKAgkFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAACAABCAYFCwULCgIJBQsIAAMFCwULBQsFCwA";
h3d_shader_SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIBgVpbnB1dA0BBQcIcG9zaXRpb24FCwEGAAgGbm9ybWFsBQsBBgAJB3RhbmdlbnQFCwEGAAoHd2VpZ2h0cwULAQYACwdpbmRleGVzCQQAAAABBgABAAAMEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADQZ2ZXJ0ZXgOBgAAAQANAAAFAwYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAAAAQgFCwULCgIKBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCwkEAAAABAABCAULBQsKAgoFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAgAAQgFCwULCgIKBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgILCQQAAAAEAAEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAACAABCAYFCwULCgIKBQsIAAMFCwULBQsFCwYEAgwFDAkDKg4CCQMfDgEGAAYABgEEBgEKAgkFC5IABQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAQAAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAgAAQgGBQsFCwoCCgULCAADBQsFCwULCgIMBQwMAAMFDAUMAA";
h3d_shader_SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d_shader_Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d_shader_UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe__$Int32_Int32_$Impl_$._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = Date.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_fs_EmbedFileSystem.invalidChars = new EReg("[^A-Za-z0-9_]","g");
hxd_res_Resource.LIVE_UPDATE = false;
hxd_res_Image.ALLOW_NPOT = true;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.DEFAULT_ASYNC = false;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxd_res_Sound.ENABLE_AUTO_WATCH = true;
hxd_snd_Channel.ID = 0;
hxd_snd_Source.ID = 0;
hxd_snd_Manager.STREAM_DURATION = 5.;
hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT = 44100;
hxd_snd_Manager.BUFFER_QUEUE_LENGTH = 2;
hxd_snd_Manager.MAX_SOURCES = 16;
hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE = 256;
hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD = 1e-5;
hxd_snd_Manager.BUFFER_STREAM_SPLIT = 16;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXICAQtCYXRjaF9Db3VudAECAAEAAAABAAIMQmF0Y2hfQnVmZmVyEAUMAQIAAAA";
hxsl_GlslOut.KWD_LIST = ["input","output","discard","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			_g.h[k] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var m = new haxe_ds_EnumValueMap();
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			m.set(g,n);
		}
	}
	m.set(hxsl_TGlobal.ToInt,"int");
	m.set(hxsl_TGlobal.ToFloat,"float");
	m.set(hxsl_TGlobal.ToBool,"bool");
	m.set(hxsl_TGlobal.LReflect,"reflect");
	m.set(hxsl_TGlobal.Mat3x4,"_mat3x4");
	m.set(hxsl_TGlobal.VertexID,"gl_VertexID");
	m.set(hxsl_TGlobal.InstanceID,"gl_InstanceID");
	m.set(hxsl_TGlobal.IVec2,"ivec2");
	m.set(hxsl_TGlobal.IVec3,"ivec3");
	m.set(hxsl_TGlobal.IVec4,"ivec4");
	m.set(hxsl_TGlobal.BVec2,"bvec2");
	m.set(hxsl_TGlobal.BVec3,"bvec3");
	m.set(hxsl_TGlobal.BVec4,"bvec4");
	{
		var g1 = m.iterator();
		while(g1.hasNext()) {
			var g2 = g1.next();
			hxsl_GlslOut.KWDS.h[g2] = true;
		}
	}
	$r = m;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9139229;
hxsl_SharedShader.UNROLL_LOOPS = false;
stb_format_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
{
	Game.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
